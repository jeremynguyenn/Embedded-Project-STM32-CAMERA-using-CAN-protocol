
ETH OPAMP DCMI FSMC CAN ENCODER CS1000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011be8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d20  08011d78  08011d78  00021d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014a98  08014a98  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  08014a98  08014a98  00024a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014aa0  08014aa0  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014aa0  08014aa0  00024aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014aa4  08014aa4  00024aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08014aa8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008028  20000090  08014b38  00030090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200080b8  08014b38  000380b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030490  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006e47  00000000  00000000  00060550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002660  00000000  00000000  00067398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002518  00000000  00000000  000699f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000341cf  00000000  00000000  0006bf10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003a9be  00000000  00000000  000a00df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104b10  00000000  00000000  000daa9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001df5ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ab60  00000000  00000000  001df600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011d60 	.word	0x08011d60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08011d60 	.word	0x08011d60

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <transmit_reset>:
static uint16_t channel_value[4] = {0};
static uint8_t channel_power_down[4] = {0};
static uint8_t channel_gain[4] = {0};
static uint8_t channel_vref[4] = {0};

void static transmit_reset(){
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af02      	add	r7, sp, #8
	uint8_t pData[1] = {GENERAL_CALL_RESET};
 800057a:	2306      	movs	r3, #6
 800057c:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(_hi2c, GERNAL_CALL_COMMAND, pData, sizeof(pData), Timeout);
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <transmit_reset+0x24>)
 8000580:	6818      	ldr	r0, [r3, #0]
 8000582:	1d3a      	adds	r2, r7, #4
 8000584:	230a      	movs	r3, #10
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	2301      	movs	r3, #1
 800058a:	2100      	movs	r1, #0
 800058c:	f003 fe80 	bl	8004290 <HAL_I2C_Master_Transmit>
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	200000ac 	.word	0x200000ac

0800059c <transmit_wake_up>:

void static transmit_wake_up(){
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af02      	add	r7, sp, #8
	uint8_t pData[1] = {GENERAL_CALL_WAKE_UP};
 80005a2:	2309      	movs	r3, #9
 80005a4:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit(_hi2c, GERNAL_CALL_COMMAND, pData, sizeof(pData), Timeout);
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <transmit_wake_up+0x24>)
 80005a8:	6818      	ldr	r0, [r3, #0]
 80005aa:	1d3a      	adds	r2, r7, #4
 80005ac:	230a      	movs	r3, #10
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	2301      	movs	r3, #1
 80005b2:	2100      	movs	r1, #0
 80005b4:	f003 fe6c 	bl	8004290 <HAL_I2C_Master_Transmit>
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	200000ac 	.word	0x200000ac

080005c4 <mcp4728_init>:

void mcp4728_init(I2C_HandleTypeDef *hi2c, uint8_t address){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70fb      	strb	r3, [r7, #3]
	_hi2c = hi2c;
 80005d0:	4a0b      	ldr	r2, [pc, #44]	; (8000600 <mcp4728_init+0x3c>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	6013      	str	r3, [r2, #0]
	_address = (0xC << 3) | address;
 80005d6:	78fb      	ldrb	r3, [r7, #3]
 80005d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <mcp4728_init+0x40>)
 80005e0:	701a      	strb	r2, [r3, #0]
	transmit_reset();
 80005e2:	f7ff ffc7 	bl	8000574 <transmit_reset>
	transmit_wake_up();
 80005e6:	f7ff ffd9 	bl	800059c <transmit_wake_up>
	HAL_GPIO_WritePin(LDAC_GPIO_Port, LDAC_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005f0:	4805      	ldr	r0, [pc, #20]	; (8000608 <mcp4728_init+0x44>)
 80005f2:	f003 fcef 	bl	8003fd4 <HAL_GPIO_WritePin>
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200000ac 	.word	0x200000ac
 8000604:	200000b0 	.word	0x200000b0
 8000608:	40020800 	.word	0x40020800

0800060c <mcp4728_set_channel_value>:

void mcp4728_set_channel_value(uint8_t channel, uint16_t value){
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	460a      	mov	r2, r1
 8000616:	71fb      	strb	r3, [r7, #7]
 8000618:	4613      	mov	r3, r2
 800061a:	80bb      	strh	r3, [r7, #4]
	if(channel <= MCP4728_CHANNEL_D)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	2b03      	cmp	r3, #3
 8000620:	d804      	bhi.n	800062c <mcp4728_set_channel_value+0x20>
		channel_value[channel] = value;
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	4904      	ldr	r1, [pc, #16]	; (8000638 <mcp4728_set_channel_value+0x2c>)
 8000626:	88ba      	ldrh	r2, [r7, #4]
 8000628:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	200000b4 	.word	0x200000b4

0800063c <mcp4728_set_channel_power_down>:

void mcp4728_set_channel_power_down(uint8_t channel, uint8_t power_down){
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	460a      	mov	r2, r1
 8000646:	71fb      	strb	r3, [r7, #7]
 8000648:	4613      	mov	r3, r2
 800064a:	71bb      	strb	r3, [r7, #6]
	if(channel <= MCP4728_CHANNEL_D)
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	2b03      	cmp	r3, #3
 8000650:	d803      	bhi.n	800065a <mcp4728_set_channel_power_down+0x1e>
		channel_power_down[channel] = power_down;
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4904      	ldr	r1, [pc, #16]	; (8000668 <mcp4728_set_channel_power_down+0x2c>)
 8000656:	79ba      	ldrb	r2, [r7, #6]
 8000658:	54ca      	strb	r2, [r1, r3]
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	200000bc 	.word	0x200000bc

0800066c <mcp4728_set_channel_gain>:

void mcp4728_set_channel_gain(uint8_t channel, uint8_t gain){
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	460a      	mov	r2, r1
 8000676:	71fb      	strb	r3, [r7, #7]
 8000678:	4613      	mov	r3, r2
 800067a:	71bb      	strb	r3, [r7, #6]
	if(channel <= MCP4728_CHANNEL_D)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	2b03      	cmp	r3, #3
 8000680:	d803      	bhi.n	800068a <mcp4728_set_channel_gain+0x1e>
		channel_gain[channel] = gain;
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	4904      	ldr	r1, [pc, #16]	; (8000698 <mcp4728_set_channel_gain+0x2c>)
 8000686:	79ba      	ldrb	r2, [r7, #6]
 8000688:	54ca      	strb	r2, [r1, r3]
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	200000c0 	.word	0x200000c0

0800069c <mcp4728_set_channel_vref>:

void mcp4728_set_channel_vref(uint8_t channel, uint8_t vref){
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	460a      	mov	r2, r1
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	4613      	mov	r3, r2
 80006aa:	71bb      	strb	r3, [r7, #6]
	if(channel <= MCP4728_CHANNEL_D)
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d803      	bhi.n	80006ba <mcp4728_set_channel_vref+0x1e>
		channel_vref[channel] = vref;
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	4904      	ldr	r1, [pc, #16]	; (80006c8 <mcp4728_set_channel_vref+0x2c>)
 80006b6:	79ba      	ldrb	r2, [r7, #6]
 80006b8:	54ca      	strb	r2, [r1, r3]
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	200000c4 	.word	0x200000c4

080006cc <mcp4728_multi_write_command>:

void mcp4728_multi_write_command(){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af02      	add	r7, sp, #8
	const uint8_t UDAC = 0x0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	71bb      	strb	r3, [r7, #6]
	for(uint8_t channel = MCP4728_CHANNEL_A; channel <= MCP4728_CHANNEL_D; channel++){
 80006d6:	2300      	movs	r3, #0
 80006d8:	71fb      	strb	r3, [r7, #7]
 80006da:	e03d      	b.n	8000758 <mcp4728_multi_write_command+0x8c>
		uint8_t multi_write_data[3] = {(MULTI_WRITE_COMMAND << 3) | (channel << 1) | UDAC, (channel_vref[channel] << 7) | (channel_power_down[channel] << 5) | (channel_gain[channel] << 4) | (channel_value[channel] >> 8), channel_value[channel]};
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	79bb      	ldrb	r3, [r7, #6]
 80006e4:	4313      	orrs	r3, r2
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	703b      	strb	r3, [r7, #0]
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	4a1d      	ldr	r2, [pc, #116]	; (8000768 <mcp4728_multi_write_command+0x9c>)
 80006f4:	5cd3      	ldrb	r3, [r2, r3]
 80006f6:	01db      	lsls	r3, r3, #7
 80006f8:	b25a      	sxtb	r2, r3
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	491b      	ldr	r1, [pc, #108]	; (800076c <mcp4728_multi_write_command+0xa0>)
 80006fe:	5ccb      	ldrb	r3, [r1, r3]
 8000700:	015b      	lsls	r3, r3, #5
 8000702:	b25b      	sxtb	r3, r3
 8000704:	4313      	orrs	r3, r2
 8000706:	b25a      	sxtb	r2, r3
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	4919      	ldr	r1, [pc, #100]	; (8000770 <mcp4728_multi_write_command+0xa4>)
 800070c:	5ccb      	ldrb	r3, [r1, r3]
 800070e:	011b      	lsls	r3, r3, #4
 8000710:	b25b      	sxtb	r3, r3
 8000712:	4313      	orrs	r3, r2
 8000714:	b25a      	sxtb	r2, r3
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	4916      	ldr	r1, [pc, #88]	; (8000774 <mcp4728_multi_write_command+0xa8>)
 800071a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800071e:	0a1b      	lsrs	r3, r3, #8
 8000720:	b29b      	uxth	r3, r3
 8000722:	b25b      	sxtb	r3, r3
 8000724:	4313      	orrs	r3, r2
 8000726:	b25b      	sxtb	r3, r3
 8000728:	b2db      	uxtb	r3, r3
 800072a:	707b      	strb	r3, [r7, #1]
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	4a11      	ldr	r2, [pc, #68]	; (8000774 <mcp4728_multi_write_command+0xa8>)
 8000730:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	70bb      	strb	r3, [r7, #2]
		HAL_I2C_Master_Transmit(_hi2c, _address << 1, multi_write_data, sizeof(multi_write_data), Timeout);
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <mcp4728_multi_write_command+0xac>)
 800073a:	6818      	ldr	r0, [r3, #0]
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <mcp4728_multi_write_command+0xb0>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	b29b      	uxth	r3, r3
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	b299      	uxth	r1, r3
 8000746:	463a      	mov	r2, r7
 8000748:	230a      	movs	r3, #10
 800074a:	9300      	str	r3, [sp, #0]
 800074c:	2303      	movs	r3, #3
 800074e:	f003 fd9f 	bl	8004290 <HAL_I2C_Master_Transmit>
	for(uint8_t channel = MCP4728_CHANNEL_A; channel <= MCP4728_CHANNEL_D; channel++){
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	3301      	adds	r3, #1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	2b03      	cmp	r3, #3
 800075c:	d9be      	bls.n	80006dc <mcp4728_multi_write_command+0x10>
	}
}
 800075e:	bf00      	nop
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200000c4 	.word	0x200000c4
 800076c:	200000bc 	.word	0x200000bc
 8000770:	200000c0 	.word	0x200000c0
 8000774:	200000b4 	.word	0x200000b4
 8000778:	200000ac 	.word	0x200000ac
 800077c:	200000b0 	.word	0x200000b0

08000780 <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(SPI_HandleTypeDef *hspi)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af02      	add	r7, sp, #8
 8000786:	6078      	str	r0, [r7, #4]
	/* Set touch SPI */
	_hspi = hspi;
 8000788:	4ab6      	ldr	r2, [pc, #728]	; (8000a64 <lcdInit+0x2e4>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6013      	str	r3, [r2, #0]

  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 800078e:	2300      	movs	r3, #0
 8000790:	9301      	str	r3, [sp, #4]
 8000792:	2301      	movs	r3, #1
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	2300      	movs	r3, #0
 8000798:	2200      	movs	r2, #0
 800079a:	2101      	movs	r1, #1
 800079c:	2000      	movs	r0, #0
 800079e:	f000 f995 	bl	8000acc <lcdBuildMemoryAccessControlConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	461a      	mov	r2, r3
 80007a6:	4bb0      	ldr	r3, [pc, #704]	; (8000a68 <lcdInit+0x2e8>)
 80007a8:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 80007aa:	2300      	movs	r3, #0
 80007ac:	9301      	str	r3, [sp, #4]
 80007ae:	2301      	movs	r3, #1
 80007b0:	9300      	str	r3, [sp, #0]
 80007b2:	2300      	movs	r3, #0
 80007b4:	2201      	movs	r2, #1
 80007b6:	2100      	movs	r1, #0
 80007b8:	2000      	movs	r0, #0
 80007ba:	f000 f987 	bl	8000acc <lcdBuildMemoryAccessControlConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	461a      	mov	r2, r3
 80007c2:	4baa      	ldr	r3, [pc, #680]	; (8000a6c <lcdInit+0x2ec>)
 80007c4:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 80007c6:	2300      	movs	r3, #0
 80007c8:	9301      	str	r3, [sp, #4]
 80007ca:	2301      	movs	r3, #1
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	2300      	movs	r3, #0
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	2001      	movs	r0, #1
 80007d6:	f000 f979 	bl	8000acc <lcdBuildMemoryAccessControlConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	461a      	mov	r2, r3
 80007de:	4ba4      	ldr	r3, [pc, #656]	; (8000a70 <lcdInit+0x2f0>)
 80007e0:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 80007e2:	2300      	movs	r3, #0
 80007e4:	9301      	str	r3, [sp, #4]
 80007e6:	2301      	movs	r3, #1
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2300      	movs	r3, #0
 80007ec:	2201      	movs	r2, #1
 80007ee:	2101      	movs	r1, #1
 80007f0:	2001      	movs	r0, #1
 80007f2:	f000 f96b 	bl	8000acc <lcdBuildMemoryAccessControlConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b9e      	ldr	r3, [pc, #632]	; (8000a74 <lcdInit+0x2f4>)
 80007fc:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 80007fe:	f000 f93b 	bl	8000a78 <lcdReset>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 8000802:	2028      	movs	r0, #40	; 0x28
 8000804:	f000 f942 	bl	8000a8c <lcdWriteCommand>

  lcdWriteCommand(0xCF);
 8000808:	20cf      	movs	r0, #207	; 0xcf
 800080a:	f000 f93f 	bl	8000a8c <lcdWriteCommand>
  lcdWriteData(0x00);
 800080e:	2000      	movs	r0, #0
 8000810:	f000 f94c 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x83);
 8000814:	2083      	movs	r0, #131	; 0x83
 8000816:	f000 f949 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x30);
 800081a:	2030      	movs	r0, #48	; 0x30
 800081c:	f000 f946 	bl	8000aac <lcdWriteData>

  lcdWriteCommand(0xED);
 8000820:	20ed      	movs	r0, #237	; 0xed
 8000822:	f000 f933 	bl	8000a8c <lcdWriteCommand>
  lcdWriteData(0x64);
 8000826:	2064      	movs	r0, #100	; 0x64
 8000828:	f000 f940 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x03);
 800082c:	2003      	movs	r0, #3
 800082e:	f000 f93d 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x12);
 8000832:	2012      	movs	r0, #18
 8000834:	f000 f93a 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x81);
 8000838:	2081      	movs	r0, #129	; 0x81
 800083a:	f000 f937 	bl	8000aac <lcdWriteData>

  lcdWriteCommand(0xE8);
 800083e:	20e8      	movs	r0, #232	; 0xe8
 8000840:	f000 f924 	bl	8000a8c <lcdWriteCommand>
  lcdWriteData(0x85);
 8000844:	2085      	movs	r0, #133	; 0x85
 8000846:	f000 f931 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x01);
 800084a:	2001      	movs	r0, #1
 800084c:	f000 f92e 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x79);
 8000850:	2079      	movs	r0, #121	; 0x79
 8000852:	f000 f92b 	bl	8000aac <lcdWriteData>

  lcdWriteCommand(0xCB);
 8000856:	20cb      	movs	r0, #203	; 0xcb
 8000858:	f000 f918 	bl	8000a8c <lcdWriteCommand>
  lcdWriteData(0x39);
 800085c:	2039      	movs	r0, #57	; 0x39
 800085e:	f000 f925 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x2C);
 8000862:	202c      	movs	r0, #44	; 0x2c
 8000864:	f000 f922 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x00);
 8000868:	2000      	movs	r0, #0
 800086a:	f000 f91f 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x34);
 800086e:	2034      	movs	r0, #52	; 0x34
 8000870:	f000 f91c 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x02);
 8000874:	2002      	movs	r0, #2
 8000876:	f000 f919 	bl	8000aac <lcdWriteData>

  lcdWriteCommand(0xF7);
 800087a:	20f7      	movs	r0, #247	; 0xf7
 800087c:	f000 f906 	bl	8000a8c <lcdWriteCommand>
  lcdWriteData(0x20);
 8000880:	2020      	movs	r0, #32
 8000882:	f000 f913 	bl	8000aac <lcdWriteData>

  lcdWriteCommand(0xEA);
 8000886:	20ea      	movs	r0, #234	; 0xea
 8000888:	f000 f900 	bl	8000a8c <lcdWriteCommand>
  lcdWriteData(0x00);
 800088c:	2000      	movs	r0, #0
 800088e:	f000 f90d 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x00);
 8000892:	2000      	movs	r0, #0
 8000894:	f000 f90a 	bl	8000aac <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 8000898:	20c0      	movs	r0, #192	; 0xc0
 800089a:	f000 f8f7 	bl	8000a8c <lcdWriteCommand>
  lcdWriteData(0x26);
 800089e:	2026      	movs	r0, #38	; 0x26
 80008a0:	f000 f904 	bl	8000aac <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 80008a4:	20c1      	movs	r0, #193	; 0xc1
 80008a6:	f000 f8f1 	bl	8000a8c <lcdWriteCommand>
  lcdWriteData(0x11);
 80008aa:	2011      	movs	r0, #17
 80008ac:	f000 f8fe 	bl	8000aac <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 80008b0:	20c5      	movs	r0, #197	; 0xc5
 80008b2:	f000 f8eb 	bl	8000a8c <lcdWriteCommand>
  lcdWriteData(0x35);
 80008b6:	2035      	movs	r0, #53	; 0x35
 80008b8:	f000 f8f8 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x3E);
 80008bc:	203e      	movs	r0, #62	; 0x3e
 80008be:	f000 f8f5 	bl	8000aac <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 80008c2:	20c7      	movs	r0, #199	; 0xc7
 80008c4:	f000 f8e2 	bl	8000a8c <lcdWriteCommand>
  lcdWriteData(0xBE);
 80008c8:	20be      	movs	r0, #190	; 0xbe
 80008ca:	f000 f8ef 	bl	8000aac <lcdWriteData>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 80008ce:	2036      	movs	r0, #54	; 0x36
 80008d0:	f000 f8dc 	bl	8000a8c <lcdWriteCommand>
  lcdWriteData(lcdPortraitConfig);
 80008d4:	4b64      	ldr	r3, [pc, #400]	; (8000a68 <lcdInit+0x2e8>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	b29b      	uxth	r3, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f8e6 	bl	8000aac <lcdWriteData>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 80008e0:	203a      	movs	r0, #58	; 0x3a
 80008e2:	f000 f8d3 	bl	8000a8c <lcdWriteCommand>
  lcdWriteData(0x55);
 80008e6:	2055      	movs	r0, #85	; 0x55
 80008e8:	f000 f8e0 	bl	8000aac <lcdWriteData>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 80008ec:	20b1      	movs	r0, #177	; 0xb1
 80008ee:	f000 f8cd 	bl	8000a8c <lcdWriteCommand>
  lcdWriteData(0x00);
 80008f2:	2000      	movs	r0, #0
 80008f4:	f000 f8da 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x1B);
 80008f8:	201b      	movs	r0, #27
 80008fa:	f000 f8d7 	bl	8000aac <lcdWriteData>

  lcdWriteCommand(0xF2);
 80008fe:	20f2      	movs	r0, #242	; 0xf2
 8000900:	f000 f8c4 	bl	8000a8c <lcdWriteCommand>
  lcdWriteData(0x08);
 8000904:	2008      	movs	r0, #8
 8000906:	f000 f8d1 	bl	8000aac <lcdWriteData>

  lcdWriteCommand(ILI9341_GAMMASET);
 800090a:	2026      	movs	r0, #38	; 0x26
 800090c:	f000 f8be 	bl	8000a8c <lcdWriteCommand>
  lcdWriteData(0x01);
 8000910:	2001      	movs	r0, #1
 8000912:	f000 f8cb 	bl	8000aac <lcdWriteData>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 8000916:	20e0      	movs	r0, #224	; 0xe0
 8000918:	f000 f8b8 	bl	8000a8c <lcdWriteCommand>
  lcdWriteData(0x1F);
 800091c:	201f      	movs	r0, #31
 800091e:	f000 f8c5 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x1A);
 8000922:	201a      	movs	r0, #26
 8000924:	f000 f8c2 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x18);
 8000928:	2018      	movs	r0, #24
 800092a:	f000 f8bf 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x0A);
 800092e:	200a      	movs	r0, #10
 8000930:	f000 f8bc 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x0F);
 8000934:	200f      	movs	r0, #15
 8000936:	f000 f8b9 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x06);
 800093a:	2006      	movs	r0, #6
 800093c:	f000 f8b6 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x45);
 8000940:	2045      	movs	r0, #69	; 0x45
 8000942:	f000 f8b3 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x87);
 8000946:	2087      	movs	r0, #135	; 0x87
 8000948:	f000 f8b0 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x32);
 800094c:	2032      	movs	r0, #50	; 0x32
 800094e:	f000 f8ad 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x0A);
 8000952:	200a      	movs	r0, #10
 8000954:	f000 f8aa 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x07);
 8000958:	2007      	movs	r0, #7
 800095a:	f000 f8a7 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x02);
 800095e:	2002      	movs	r0, #2
 8000960:	f000 f8a4 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x07);
 8000964:	2007      	movs	r0, #7
 8000966:	f000 f8a1 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x05);
 800096a:	2005      	movs	r0, #5
 800096c:	f000 f89e 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x00);
 8000970:	2000      	movs	r0, #0
 8000972:	f000 f89b 	bl	8000aac <lcdWriteData>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 8000976:	20e1      	movs	r0, #225	; 0xe1
 8000978:	f000 f888 	bl	8000a8c <lcdWriteCommand>
  lcdWriteData(0x00);
 800097c:	2000      	movs	r0, #0
 800097e:	f000 f895 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x25);
 8000982:	2025      	movs	r0, #37	; 0x25
 8000984:	f000 f892 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x27);
 8000988:	2027      	movs	r0, #39	; 0x27
 800098a:	f000 f88f 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x05);
 800098e:	2005      	movs	r0, #5
 8000990:	f000 f88c 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x10);
 8000994:	2010      	movs	r0, #16
 8000996:	f000 f889 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x09);
 800099a:	2009      	movs	r0, #9
 800099c:	f000 f886 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x3A);
 80009a0:	203a      	movs	r0, #58	; 0x3a
 80009a2:	f000 f883 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x78);
 80009a6:	2078      	movs	r0, #120	; 0x78
 80009a8:	f000 f880 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x4D);
 80009ac:	204d      	movs	r0, #77	; 0x4d
 80009ae:	f000 f87d 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x05);
 80009b2:	2005      	movs	r0, #5
 80009b4:	f000 f87a 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x18);
 80009b8:	2018      	movs	r0, #24
 80009ba:	f000 f877 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x0D);
 80009be:	200d      	movs	r0, #13
 80009c0:	f000 f874 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x38);
 80009c4:	2038      	movs	r0, #56	; 0x38
 80009c6:	f000 f871 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x3A);
 80009ca:	203a      	movs	r0, #58	; 0x3a
 80009cc:	f000 f86e 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x1F);
 80009d0:	201f      	movs	r0, #31
 80009d2:	f000 f86b 	bl	8000aac <lcdWriteData>

  lcdWriteCommand(ILI9341_COLADDRSET);
 80009d6:	202a      	movs	r0, #42	; 0x2a
 80009d8:	f000 f858 	bl	8000a8c <lcdWriteCommand>
  lcdWriteData(0x00);
 80009dc:	2000      	movs	r0, #0
 80009de:	f000 f865 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x00);
 80009e2:	2000      	movs	r0, #0
 80009e4:	f000 f862 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x00);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f000 f85f 	bl	8000aac <lcdWriteData>
  lcdWriteData(0xEF);
 80009ee:	20ef      	movs	r0, #239	; 0xef
 80009f0:	f000 f85c 	bl	8000aac <lcdWriteData>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 80009f4:	202b      	movs	r0, #43	; 0x2b
 80009f6:	f000 f849 	bl	8000a8c <lcdWriteCommand>
  lcdWriteData(0x00);
 80009fa:	2000      	movs	r0, #0
 80009fc:	f000 f856 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x00);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f000 f853 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x01);
 8000a06:	2001      	movs	r0, #1
 8000a08:	f000 f850 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x3F);
 8000a0c:	203f      	movs	r0, #63	; 0x3f
 8000a0e:	f000 f84d 	bl	8000aac <lcdWriteData>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 8000a12:	20b7      	movs	r0, #183	; 0xb7
 8000a14:	f000 f83a 	bl	8000a8c <lcdWriteCommand>
  lcdWriteData(0x07);
 8000a18:	2007      	movs	r0, #7
 8000a1a:	f000 f847 	bl	8000aac <lcdWriteData>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 8000a1e:	20b6      	movs	r0, #182	; 0xb6
 8000a20:	f000 f834 	bl	8000a8c <lcdWriteCommand>
  lcdWriteData(0x0A);
 8000a24:	200a      	movs	r0, #10
 8000a26:	f000 f841 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x82);
 8000a2a:	2082      	movs	r0, #130	; 0x82
 8000a2c:	f000 f83e 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x27);
 8000a30:	2027      	movs	r0, #39	; 0x27
 8000a32:	f000 f83b 	bl	8000aac <lcdWriteData>
  lcdWriteData(0x00);
 8000a36:	2000      	movs	r0, #0
 8000a38:	f000 f838 	bl	8000aac <lcdWriteData>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 8000a3c:	2011      	movs	r0, #17
 8000a3e:	f000 f825 	bl	8000a8c <lcdWriteCommand>
  HAL_Delay(100);
 8000a42:	2064      	movs	r0, #100	; 0x64
 8000a44:	f001 fc72 	bl	800232c <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 8000a48:	2029      	movs	r0, #41	; 0x29
 8000a4a:	f000 f81f 	bl	8000a8c <lcdWriteCommand>
  HAL_Delay(100);
 8000a4e:	2064      	movs	r0, #100	; 0x64
 8000a50:	f001 fc6c 	bl	800232c <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8000a54:	202c      	movs	r0, #44	; 0x2c
 8000a56:	f000 f819 	bl	8000a8c <lcdWriteCommand>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000c8 	.word	0x200000c8
 8000a68:	200000cc 	.word	0x200000cc
 8000a6c:	200000cd 	.word	0x200000cd
 8000a70:	200000ce 	.word	0x200000ce
 8000a74:	200000cf 	.word	0x200000cf

08000a78 <lcdReset>:
  }
  while (i < dataLength);
}

static void lcdReset(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f000 f805 	bl	8000a8c <lcdWriteCommand>
	HAL_Delay(50);
 8000a82:	2032      	movs	r0, #50	; 0x32
 8000a84:	f001 fc52 	bl	800232c <HAL_Delay>
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <lcdWriteCommand>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 8000a96:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000a9a:	79fa      	ldrb	r2, [r7, #7]
 8000a9c:	b292      	uxth	r2, r2
 8000a9e:	801a      	strh	r2, [r3, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <lcdWriteData>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 8000ab6:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <lcdWriteData+0x1c>)
 8000ab8:	88fb      	ldrh	r3, [r7, #6]
 8000aba:	8013      	strh	r3, [r2, #0]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	60020000 	.word	0x60020000

08000acc <lcdBuildMemoryAccessControlConfig>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 8000acc:	b490      	push	{r4, r7}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4608      	mov	r0, r1
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4623      	mov	r3, r4
 8000adc:	71fb      	strb	r3, [r7, #7]
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71bb      	strb	r3, [r7, #6]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	717b      	strb	r3, [r7, #5]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) value 	|= ILI9341_MADCTL_MH;
 8000aee:	7f3b      	ldrb	r3, [r7, #28]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d003      	beq.n	8000afc <lcdBuildMemoryAccessControlConfig+0x30>
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	f043 0304 	orr.w	r3, r3, #4
 8000afa:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) value 				|= ILI9341_MADCTL_BGR;
 8000afc:	7e3b      	ldrb	r3, [r7, #24]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d003      	beq.n	8000b0a <lcdBuildMemoryAccessControlConfig+0x3e>
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
 8000b04:	f043 0308 	orr.w	r3, r3, #8
 8000b08:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) value 	|= ILI9341_MADCTL_ML;
 8000b0a:	793b      	ldrb	r3, [r7, #4]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d003      	beq.n	8000b18 <lcdBuildMemoryAccessControlConfig+0x4c>
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	f043 0310 	orr.w	r3, r3, #16
 8000b16:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) value 		|= ILI9341_MADCTL_MV;
 8000b18:	797b      	ldrb	r3, [r7, #5]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <lcdBuildMemoryAccessControlConfig+0x5a>
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
 8000b20:	f043 0320 	orr.w	r3, r3, #32
 8000b24:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) value 		|= ILI9341_MADCTL_MX;
 8000b26:	79bb      	ldrb	r3, [r7, #6]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d003      	beq.n	8000b34 <lcdBuildMemoryAccessControlConfig+0x68>
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b32:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) value 		|= ILI9341_MADCTL_MY;
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d003      	beq.n	8000b42 <lcdBuildMemoryAccessControlConfig+0x76>
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b40:	73fb      	strb	r3, [r7, #15]
  return value;
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc90      	pop	{r4, r7}
 8000b4c:	4770      	bx	lr
	...

08000b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b54:	f001 fba8 	bl	80022a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b58:	f000 f87a 	bl	8000c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5c:	f000 fb46 	bl	80011ec <MX_GPIO_Init>
  MX_FSMC_Init();
 8000b60:	f000 fc6c 	bl	800143c <MX_FSMC_Init>
  MX_DCMI_Init();
 8000b64:	f000 f966 	bl	8000e34 <MX_DCMI_Init>
  MX_SPI2_Init();
 8000b68:	f000 f9e0 	bl	8000f2c <MX_SPI2_Init>
  MX_TIM1_Init();
 8000b6c:	f000 fa14 	bl	8000f98 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000b70:	f000 fa6a 	bl	8001048 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000b74:	f000 f8d8 	bl	8000d28 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000b78:	f000 f928 	bl	8000dcc <MX_CAN1_Init>
  MX_RTC_Init();
 8000b7c:	f000 f9b0 	bl	8000ee0 <MX_RTC_Init>
  MX_TIM4_Init();
 8000b80:	f000 fab6 	bl	80010f0 <MX_TIM4_Init>
  MX_UART5_Init();
 8000b84:	f000 fb08 	bl	8001198 <MX_UART5_Init>
  MX_LWIP_Init();
 8000b88:	f005 fd6a 	bl	8006660 <MX_LWIP_Init>
  MX_I2C1_Init();
 8000b8c:	f000 f97a 	bl	8000e84 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* Start up LCD */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	2101      	movs	r1, #1
 8000b94:	482a      	ldr	r0, [pc, #168]	; (8000c40 <main+0xf0>)
 8000b96:	f003 fa1d 	bl	8003fd4 <HAL_GPIO_WritePin>
  LCD_BL_ON();
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	2120      	movs	r1, #32
 8000b9e:	4829      	ldr	r0, [pc, #164]	; (8000c44 <main+0xf4>)
 8000ba0:	f003 fa18 	bl	8003fd4 <HAL_GPIO_WritePin>
  lcdInit(&hspi2);
 8000ba4:	4828      	ldr	r0, [pc, #160]	; (8000c48 <main+0xf8>)
 8000ba6:	f7ff fdeb 	bl	8000780 <lcdInit>
  //touchCalibrate();
  //lcdFillRGB(COLOR_BLACK);

  /* Write to MCP4728 */
  mcp4728_init(&hi2c1, 0x4); // Manufacturer I2C settings: A4 (A2 = 1, A1 = 0, A0 = 0)
 8000baa:	2104      	movs	r1, #4
 8000bac:	4827      	ldr	r0, [pc, #156]	; (8000c4c <main+0xfc>)
 8000bae:	f7ff fd09 	bl	80005c4 <mcp4728_init>

  /* Set values */
  mcp4728_set_channel_value(MCP4728_CHANNEL_A, 4095);
 8000bb2:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f7ff fd28 	bl	800060c <mcp4728_set_channel_value>
  mcp4728_set_channel_value(MCP4728_CHANNEL_B, 3000);
 8000bbc:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f7ff fd23 	bl	800060c <mcp4728_set_channel_value>
  mcp4728_set_channel_value(MCP4728_CHANNEL_C, 2000);
 8000bc6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000bca:	2002      	movs	r0, #2
 8000bcc:	f7ff fd1e 	bl	800060c <mcp4728_set_channel_value>
  mcp4728_set_channel_value(MCP4728_CHANNEL_D, 1000);
 8000bd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	f7ff fd19 	bl	800060c <mcp4728_set_channel_value>

  /* Set gain */
  mcp4728_set_channel_gain(MCP4728_CHANNEL_A, MCP4728_GAIN_1);
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff fd45 	bl	800066c <mcp4728_set_channel_gain>
  mcp4728_set_channel_gain(MCP4728_CHANNEL_B, MCP4728_GAIN_1);
 8000be2:	2100      	movs	r1, #0
 8000be4:	2001      	movs	r0, #1
 8000be6:	f7ff fd41 	bl	800066c <mcp4728_set_channel_gain>
  mcp4728_set_channel_gain(MCP4728_CHANNEL_C, MCP4728_GAIN_1);
 8000bea:	2100      	movs	r1, #0
 8000bec:	2002      	movs	r0, #2
 8000bee:	f7ff fd3d 	bl	800066c <mcp4728_set_channel_gain>
  mcp4728_set_channel_gain(MCP4728_CHANNEL_D, MCP4728_GAIN_1);
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f7ff fd39 	bl	800066c <mcp4728_set_channel_gain>

  /* Set power down */
  mcp4728_set_channel_power_down(MCP4728_CHANNEL_A, MCP4728_POWER_DOWN_NORMAL);
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f7ff fd1d 	bl	800063c <mcp4728_set_channel_power_down>
  mcp4728_set_channel_power_down(MCP4728_CHANNEL_B, MCP4728_POWER_DOWN_NORMAL);
 8000c02:	2100      	movs	r1, #0
 8000c04:	2001      	movs	r0, #1
 8000c06:	f7ff fd19 	bl	800063c <mcp4728_set_channel_power_down>
  mcp4728_set_channel_power_down(MCP4728_CHANNEL_C, MCP4728_POWER_DOWN_NORMAL);
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2002      	movs	r0, #2
 8000c0e:	f7ff fd15 	bl	800063c <mcp4728_set_channel_power_down>
  mcp4728_set_channel_power_down(MCP4728_CHANNEL_D, MCP4728_POWER_DOWN_NORMAL);
 8000c12:	2100      	movs	r1, #0
 8000c14:	2003      	movs	r0, #3
 8000c16:	f7ff fd11 	bl	800063c <mcp4728_set_channel_power_down>

  /* Set voltage reference */
  mcp4728_set_channel_vref(MCP4728_CHANNEL_A, MCP4728_VREF_VDD);
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f7ff fd3d 	bl	800069c <mcp4728_set_channel_vref>
  mcp4728_set_channel_vref(MCP4728_CHANNEL_B, MCP4728_VREF_VDD);
 8000c22:	2100      	movs	r1, #0
 8000c24:	2001      	movs	r0, #1
 8000c26:	f7ff fd39 	bl	800069c <mcp4728_set_channel_vref>
  mcp4728_set_channel_vref(MCP4728_CHANNEL_C, MCP4728_VREF_VDD);
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2002      	movs	r0, #2
 8000c2e:	f7ff fd35 	bl	800069c <mcp4728_set_channel_vref>
  mcp4728_set_channel_vref(MCP4728_CHANNEL_D, MCP4728_VREF_VDD);
 8000c32:	2100      	movs	r1, #0
 8000c34:	2003      	movs	r0, #3
 8000c36:	f7ff fd31 	bl	800069c <mcp4728_set_channel_vref>

  /* Multi write without EEPROM */
  mcp4728_multi_write_command();
 8000c3a:	f7ff fd47 	bl	80006cc <mcp4728_multi_write_command>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <main+0xee>
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40020000 	.word	0x40020000
 8000c48:	200001f4 	.word	0x200001f4
 8000c4c:	20000180 	.word	0x20000180

08000c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b094      	sub	sp, #80	; 0x50
 8000c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c56:	f107 0320 	add.w	r3, r7, #32
 8000c5a:	2230      	movs	r2, #48	; 0x30
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f010 f826 	bl	8010cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	4b29      	ldr	r3, [pc, #164]	; (8000d20 <SystemClock_Config+0xd0>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	4a28      	ldr	r2, [pc, #160]	; (8000d20 <SystemClock_Config+0xd0>)
 8000c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c82:	6413      	str	r3, [r2, #64]	; 0x40
 8000c84:	4b26      	ldr	r3, [pc, #152]	; (8000d20 <SystemClock_Config+0xd0>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c90:	2300      	movs	r3, #0
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <SystemClock_Config+0xd4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a22      	ldr	r2, [pc, #136]	; (8000d24 <SystemClock_Config+0xd4>)
 8000c9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <SystemClock_Config+0xd4>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000cac:	230a      	movs	r3, #10
 8000cae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb4:	2310      	movs	r3, #16
 8000cb6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cc4:	2308      	movs	r3, #8
 8000cc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000cc8:	2332      	movs	r3, #50	; 0x32
 8000cca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd4:	f107 0320 	add.w	r3, r7, #32
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f003 fde1 	bl	80048a0 <HAL_RCC_OscConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ce4:	f000 fc19 	bl	800151a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce8:	230f      	movs	r3, #15
 8000cea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cec:	2302      	movs	r3, #2
 8000cee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000cfa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cfe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	2101      	movs	r1, #1
 8000d06:	4618      	mov	r0, r3
 8000d08:	f004 f842 	bl	8004d90 <HAL_RCC_ClockConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000d12:	f000 fc02 	bl	800151a <Error_Handler>
  }
}
 8000d16:	bf00      	nop
 8000d18:	3750      	adds	r7, #80	; 0x50
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40007000 	.word	0x40007000

08000d28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d2e:	463b      	mov	r3, r7
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d3a:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000d3c:	4a21      	ldr	r2, [pc, #132]	; (8000dc4 <MX_ADC1_Init+0x9c>)
 8000d3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d40:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d46:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d4c:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d52:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000d68:	4a17      	ldr	r2, [pc, #92]	; (8000dc8 <MX_ADC1_Init+0xa0>)
 8000d6a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d86:	480e      	ldr	r0, [pc, #56]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000d88:	f001 faf4 	bl	8002374 <HAL_ADC_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d92:	f000 fbc2 	bl	800151a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da2:	463b      	mov	r3, r7
 8000da4:	4619      	mov	r1, r3
 8000da6:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <MX_ADC1_Init+0x98>)
 8000da8:	f001 fb28 	bl	80023fc <HAL_ADC_ConfigChannel>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000db2:	f000 fbb2 	bl	800151a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200000d0 	.word	0x200000d0
 8000dc4:	40012000 	.word	0x40012000
 8000dc8:	0f000001 	.word	0x0f000001

08000dcc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <MX_CAN1_Init+0x60>)
 8000dd2:	4a17      	ldr	r2, [pc, #92]	; (8000e30 <MX_CAN1_Init+0x64>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <MX_CAN1_Init+0x60>)
 8000dd8:	2210      	movs	r2, #16
 8000dda:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ddc:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <MX_CAN1_Init+0x60>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <MX_CAN1_Init+0x60>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000de8:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <MX_CAN1_Init+0x60>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_CAN1_Init+0x60>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000df4:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <MX_CAN1_Init+0x60>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_CAN1_Init+0x60>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <MX_CAN1_Init+0x60>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_CAN1_Init+0x60>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <MX_CAN1_Init+0x60>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_CAN1_Init+0x60>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <MX_CAN1_Init+0x60>)
 8000e1a:	f001 fd0d 	bl	8002838 <HAL_CAN_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000e24:	f000 fb79 	bl	800151a <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000118 	.word	0x20000118
 8000e30:	40006400 	.word	0x40006400

08000e34 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000e38:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <MX_DCMI_Init+0x48>)
 8000e3a:	4a11      	ldr	r2, [pc, #68]	; (8000e80 <MX_DCMI_Init+0x4c>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_DCMI_Init+0x48>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <MX_DCMI_Init+0x48>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_DCMI_Init+0x48>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000e50:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <MX_DCMI_Init+0x48>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_DCMI_Init+0x48>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <MX_DCMI_Init+0x48>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_DCMI_Init+0x48>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000e68:	4804      	ldr	r0, [pc, #16]	; (8000e7c <MX_DCMI_Init+0x48>)
 8000e6a:	f001 fec3 	bl	8002bf4 <HAL_DCMI_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 8000e74:	f000 fb51 	bl	800151a <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000140 	.word	0x20000140
 8000e80:	50050000 	.word	0x50050000

08000e84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000e8a:	4a13      	ldr	r2, [pc, #76]	; (8000ed8 <MX_I2C1_Init+0x54>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000e90:	4a12      	ldr	r2, [pc, #72]	; (8000edc <MX_I2C1_Init+0x58>)
 8000e92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000ea2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ea6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ec0:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000ec2:	f003 f8a1 	bl	8004008 <HAL_I2C_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ecc:	f000 fb25 	bl	800151a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000180 	.word	0x20000180
 8000ed8:	40005400 	.word	0x40005400
 8000edc:	000186a0 	.word	0x000186a0

08000ee0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <MX_RTC_Init+0x44>)
 8000ee6:	4a10      	ldr	r2, [pc, #64]	; (8000f28 <MX_RTC_Init+0x48>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_RTC_Init+0x44>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_RTC_Init+0x44>)
 8000ef2:	227f      	movs	r2, #127	; 0x7f
 8000ef4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <MX_RTC_Init+0x44>)
 8000ef8:	22ff      	movs	r2, #255	; 0xff
 8000efa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_RTC_Init+0x44>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <MX_RTC_Init+0x44>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_RTC_Init+0x44>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_RTC_Init+0x44>)
 8000f10:	f004 fa72 	bl	80053f8 <HAL_RTC_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000f1a:	f000 fafe 	bl	800151a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200001d4 	.word	0x200001d4
 8000f28:	40002800 	.word	0x40002800

08000f2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f30:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <MX_SPI2_Init+0x64>)
 8000f32:	4a18      	ldr	r2, [pc, #96]	; (8000f94 <MX_SPI2_Init+0x68>)
 8000f34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f36:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <MX_SPI2_Init+0x64>)
 8000f38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <MX_SPI2_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <MX_SPI2_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_SPI2_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_SPI2_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_SPI2_Init+0x64>)
 8000f58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f5c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_SPI2_Init+0x64>)
 8000f60:	2228      	movs	r2, #40	; 0x28
 8000f62:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <MX_SPI2_Init+0x64>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_SPI2_Init+0x64>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <MX_SPI2_Init+0x64>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_SPI2_Init+0x64>)
 8000f78:	220a      	movs	r2, #10
 8000f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f7c:	4804      	ldr	r0, [pc, #16]	; (8000f90 <MX_SPI2_Init+0x64>)
 8000f7e:	f004 fb35 	bl	80055ec <HAL_SPI_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000f88:	f000 fac7 	bl	800151a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200001f4 	.word	0x200001f4
 8000f94:	40003800 	.word	0x40003800

08000f98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08c      	sub	sp, #48	; 0x30
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	2224      	movs	r2, #36	; 0x24
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f00f fe82 	bl	8010cb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fb4:	4b22      	ldr	r3, [pc, #136]	; (8001040 <MX_TIM1_Init+0xa8>)
 8000fb6:	4a23      	ldr	r2, [pc, #140]	; (8001044 <MX_TIM1_Init+0xac>)
 8000fb8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <MX_TIM1_Init+0xa8>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <MX_TIM1_Init+0xa8>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <MX_TIM1_Init+0xa8>)
 8000fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fcc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <MX_TIM1_Init+0xa8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <MX_TIM1_Init+0xa8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <MX_TIM1_Init+0xa8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	4619      	mov	r1, r3
 800100a:	480d      	ldr	r0, [pc, #52]	; (8001040 <MX_TIM1_Init+0xa8>)
 800100c:	f004 fc88 	bl	8005920 <HAL_TIM_Encoder_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001016:	f000 fa80 	bl	800151a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	4619      	mov	r1, r3
 8001026:	4806      	ldr	r0, [pc, #24]	; (8001040 <MX_TIM1_Init+0xa8>)
 8001028:	f004 fef0 	bl	8005e0c <HAL_TIMEx_MasterConfigSynchronization>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001032:	f000 fa72 	bl	800151a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	3730      	adds	r7, #48	; 0x30
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2000024c 	.word	0x2000024c
 8001044:	40010000 	.word	0x40010000

08001048 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	2224      	movs	r2, #36	; 0x24
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f00f fe2a 	bl	8010cb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001064:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <MX_TIM3_Init+0xa0>)
 8001066:	4a21      	ldr	r2, [pc, #132]	; (80010ec <MX_TIM3_Init+0xa4>)
 8001068:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800106a:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <MX_TIM3_Init+0xa0>)
 800106c:	2200      	movs	r2, #0
 800106e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <MX_TIM3_Init+0xa0>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001076:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <MX_TIM3_Init+0xa0>)
 8001078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800107c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_TIM3_Init+0xa0>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <MX_TIM3_Init+0xa0>)
 8001086:	2200      	movs	r2, #0
 8001088:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800108a:	2301      	movs	r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001092:	2301      	movs	r3, #1
 8001094:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800109e:	2300      	movs	r3, #0
 80010a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010a2:	2301      	movs	r3, #1
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	4619      	mov	r1, r3
 80010b4:	480c      	ldr	r0, [pc, #48]	; (80010e8 <MX_TIM3_Init+0xa0>)
 80010b6:	f004 fc33 	bl	8005920 <HAL_TIM_Encoder_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80010c0:	f000 fa2b 	bl	800151a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c4:	2300      	movs	r3, #0
 80010c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_TIM3_Init+0xa0>)
 80010d2:	f004 fe9b 	bl	8005e0c <HAL_TIMEx_MasterConfigSynchronization>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80010dc:	f000 fa1d 	bl	800151a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	3730      	adds	r7, #48	; 0x30
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000294 	.word	0x20000294
 80010ec:	40000400 	.word	0x40000400

080010f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08c      	sub	sp, #48	; 0x30
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010f6:	f107 030c 	add.w	r3, r7, #12
 80010fa:	2224      	movs	r2, #36	; 0x24
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f00f fdd6 	bl	8010cb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800110c:	4b20      	ldr	r3, [pc, #128]	; (8001190 <MX_TIM4_Init+0xa0>)
 800110e:	4a21      	ldr	r2, [pc, #132]	; (8001194 <MX_TIM4_Init+0xa4>)
 8001110:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001112:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <MX_TIM4_Init+0xa0>)
 8001114:	2200      	movs	r2, #0
 8001116:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <MX_TIM4_Init+0xa0>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800111e:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <MX_TIM4_Init+0xa0>)
 8001120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001124:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_TIM4_Init+0xa0>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_TIM4_Init+0xa0>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001132:	2301      	movs	r3, #1
 8001134:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800113a:	2301      	movs	r3, #1
 800113c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001146:	2300      	movs	r3, #0
 8001148:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800114a:	2301      	movs	r3, #1
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <MX_TIM4_Init+0xa0>)
 800115e:	f004 fbdf 	bl	8005920 <HAL_TIM_Encoder_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001168:	f000 f9d7 	bl	800151a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_TIM4_Init+0xa0>)
 800117a:	f004 fe47 	bl	8005e0c <HAL_TIMEx_MasterConfigSynchronization>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001184:	f000 f9c9 	bl	800151a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3730      	adds	r7, #48	; 0x30
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200002dc 	.word	0x200002dc
 8001194:	40000800 	.word	0x40000800

08001198 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_UART5_Init+0x4c>)
 800119e:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <MX_UART5_Init+0x50>)
 80011a0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <MX_UART5_Init+0x4c>)
 80011a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_UART5_Init+0x4c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_UART5_Init+0x4c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <MX_UART5_Init+0x4c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_UART5_Init+0x4c>)
 80011be:	220c      	movs	r2, #12
 80011c0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <MX_UART5_Init+0x4c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_UART5_Init+0x4c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_UART5_Init+0x4c>)
 80011d0:	f004 feac 	bl	8005f2c <HAL_UART_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80011da:	f000 f99e 	bl	800151a <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000324 	.word	0x20000324
 80011e8:	40005000 	.word	0x40005000

080011ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08c      	sub	sp, #48	; 0x30
 80011f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	4b86      	ldr	r3, [pc, #536]	; (8001420 <MX_GPIO_Init+0x234>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a85      	ldr	r2, [pc, #532]	; (8001420 <MX_GPIO_Init+0x234>)
 800120c:	f043 0310 	orr.w	r3, r3, #16
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b83      	ldr	r3, [pc, #524]	; (8001420 <MX_GPIO_Init+0x234>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0310 	and.w	r3, r3, #16
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	4b7f      	ldr	r3, [pc, #508]	; (8001420 <MX_GPIO_Init+0x234>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a7e      	ldr	r2, [pc, #504]	; (8001420 <MX_GPIO_Init+0x234>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b7c      	ldr	r3, [pc, #496]	; (8001420 <MX_GPIO_Init+0x234>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b78      	ldr	r3, [pc, #480]	; (8001420 <MX_GPIO_Init+0x234>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a77      	ldr	r2, [pc, #476]	; (8001420 <MX_GPIO_Init+0x234>)
 8001244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b75      	ldr	r3, [pc, #468]	; (8001420 <MX_GPIO_Init+0x234>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b71      	ldr	r3, [pc, #452]	; (8001420 <MX_GPIO_Init+0x234>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a70      	ldr	r2, [pc, #448]	; (8001420 <MX_GPIO_Init+0x234>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b6e      	ldr	r3, [pc, #440]	; (8001420 <MX_GPIO_Init+0x234>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	4b6a      	ldr	r3, [pc, #424]	; (8001420 <MX_GPIO_Init+0x234>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a69      	ldr	r2, [pc, #420]	; (8001420 <MX_GPIO_Init+0x234>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b67      	ldr	r3, [pc, #412]	; (8001420 <MX_GPIO_Init+0x234>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b63      	ldr	r3, [pc, #396]	; (8001420 <MX_GPIO_Init+0x234>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a62      	ldr	r2, [pc, #392]	; (8001420 <MX_GPIO_Init+0x234>)
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b60      	ldr	r3, [pc, #384]	; (8001420 <MX_GPIO_Init+0x234>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ENCODER0_REVERSE_Pin|ENCODER1_REVERSE_Pin|LCD_RESET_Pin|CAMERA_RESET_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	210f      	movs	r1, #15
 80012ae:	485d      	ldr	r0, [pc, #372]	; (8001424 <MX_GPIO_Init+0x238>)
 80012b0:	f002 fe90 	bl	8003fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ENCODER2_REVERSE_Pin|SDCARD_CS_Pin|LDAC_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	f642 0101 	movw	r1, #10241	; 0x2801
 80012ba:	485b      	ldr	r0, [pc, #364]	; (8001428 <MX_GPIO_Init+0x23c>)
 80012bc:	f002 fe8a 	bl	8003fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2101      	movs	r1, #1
 80012c4:	4859      	ldr	r0, [pc, #356]	; (800142c <MX_GPIO_Init+0x240>)
 80012c6:	f002 fe85 	bl	8003fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_LCD_ON_GPIO_Port, LED_LCD_ON_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2120      	movs	r1, #32
 80012ce:	4858      	ldr	r0, [pc, #352]	; (8001430 <MX_GPIO_Init+0x244>)
 80012d0:	f002 fe80 	bl	8003fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ETH_RESET_Pin|OUTPUT3_Pin|OUTPUT2_Pin, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	f24c 0101 	movw	r1, #49153	; 0xc001
 80012da:	4856      	ldr	r0, [pc, #344]	; (8001434 <MX_GPIO_Init+0x248>)
 80012dc:	f002 fe7a 	bl	8003fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUTPUT1_Pin|OUTPUT0_Pin, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2148      	movs	r1, #72	; 0x48
 80012e4:	4854      	ldr	r0, [pc, #336]	; (8001438 <MX_GPIO_Init+0x24c>)
 80012e6:	f002 fe75 	bl	8003fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENCODER0_REVERSE_Pin ENCODER1_REVERSE_Pin LCD_RESET_Pin CAMERA_RESET_Pin */
  GPIO_InitStruct.Pin = ENCODER0_REVERSE_Pin|ENCODER1_REVERSE_Pin|LCD_RESET_Pin|CAMERA_RESET_Pin;
 80012ea:	230f      	movs	r3, #15
 80012ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012fa:	f107 031c 	add.w	r3, r7, #28
 80012fe:	4619      	mov	r1, r3
 8001300:	4848      	ldr	r0, [pc, #288]	; (8001424 <MX_GPIO_Init+0x238>)
 8001302:	f002 fccb 	bl	8003c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER2_REVERSE_Pin SDCARD_CS_Pin */
  GPIO_InitStruct.Pin = ENCODER2_REVERSE_Pin|SDCARD_CS_Pin;
 8001306:	f242 0301 	movw	r3, #8193	; 0x2001
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	4842      	ldr	r0, [pc, #264]	; (8001428 <MX_GPIO_Init+0x23c>)
 8001320:	f002 fcbc 	bl	8003c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8001324:	2301      	movs	r3, #1
 8001326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001328:	2301      	movs	r3, #1
 800132a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	4619      	mov	r1, r3
 800133a:	483c      	ldr	r0, [pc, #240]	; (800142c <MX_GPIO_Init+0x240>)
 800133c:	f002 fcae 	bl	8003c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8001340:	2302      	movs	r3, #2
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4619      	mov	r1, r3
 8001352:	4836      	ldr	r0, [pc, #216]	; (800142c <MX_GPIO_Init+0x240>)
 8001354:	f002 fca2 	bl	8003c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_LCD_ON_Pin */
  GPIO_InitStruct.Pin = LED_LCD_ON_Pin;
 8001358:	2320      	movs	r3, #32
 800135a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_LCD_ON_GPIO_Port, &GPIO_InitStruct);
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	4619      	mov	r1, r3
 800136e:	4830      	ldr	r0, [pc, #192]	; (8001430 <MX_GPIO_Init+0x244>)
 8001370:	f002 fc94 	bl	8003c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ETH_RESET_Pin OUTPUT3_Pin OUTPUT2_Pin */
  GPIO_InitStruct.Pin = ETH_RESET_Pin|OUTPUT3_Pin|OUTPUT2_Pin;
 8001374:	f24c 0301 	movw	r3, #49153	; 0xc001
 8001378:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137a:	2301      	movs	r3, #1
 800137c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001386:	f107 031c 	add.w	r3, r7, #28
 800138a:	4619      	mov	r1, r3
 800138c:	4829      	ldr	r0, [pc, #164]	; (8001434 <MX_GPIO_Init+0x248>)
 800138e:	f002 fc85 	bl	8003c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT2_Pin */
  GPIO_InitStruct.Pin = INPUT2_Pin;
 8001392:	2304      	movs	r3, #4
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(INPUT2_GPIO_Port, &GPIO_InitStruct);
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	4619      	mov	r1, r3
 80013a4:	4823      	ldr	r0, [pc, #140]	; (8001434 <MX_GPIO_Init+0x248>)
 80013a6:	f002 fc79 	bl	8003c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT0_Pin INPUT1_Pin */
  GPIO_InitStruct.Pin = INPUT0_Pin|INPUT1_Pin;
 80013aa:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80013ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	481c      	ldr	r0, [pc, #112]	; (8001430 <MX_GPIO_Init+0x244>)
 80013c0:	f002 fc6c 	bl	8003c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT3_Pin */
  GPIO_InitStruct.Pin = INPUT3_Pin;
 80013c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(INPUT3_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	4619      	mov	r1, r3
 80013d8:	4813      	ldr	r0, [pc, #76]	; (8001428 <MX_GPIO_Init+0x23c>)
 80013da:	f002 fc5f 	bl	8003c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LDAC_Pin */
  GPIO_InitStruct.Pin = LDAC_Pin;
 80013de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LDAC_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	4619      	mov	r1, r3
 80013f6:	480c      	ldr	r0, [pc, #48]	; (8001428 <MX_GPIO_Init+0x23c>)
 80013f8:	f002 fc50 	bl	8003c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT1_Pin OUTPUT0_Pin */
  GPIO_InitStruct.Pin = OUTPUT1_Pin|OUTPUT0_Pin;
 80013fc:	2348      	movs	r3, #72	; 0x48
 80013fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	4809      	ldr	r0, [pc, #36]	; (8001438 <MX_GPIO_Init+0x24c>)
 8001414:	f002 fc42 	bl	8003c9c <HAL_GPIO_Init>

}
 8001418:	bf00      	nop
 800141a:	3730      	adds	r7, #48	; 0x30
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40023800 	.word	0x40023800
 8001424:	40021000 	.word	0x40021000
 8001428:	40020800 	.word	0x40020800
 800142c:	40021c00 	.word	0x40021c00
 8001430:	40020000 	.word	0x40020000
 8001434:	40020400 	.word	0x40020400
 8001438:	40020c00 	.word	0x40020c00

0800143c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
 8001450:	615a      	str	r2, [r3, #20]
 8001452:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001454:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <MX_FSMC_Init+0xb8>)
 8001456:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800145a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800145c:	4b25      	ldr	r3, [pc, #148]	; (80014f4 <MX_FSMC_Init+0xb8>)
 800145e:	4a26      	ldr	r2, [pc, #152]	; (80014f8 <MX_FSMC_Init+0xbc>)
 8001460:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001462:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <MX_FSMC_Init+0xb8>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001468:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <MX_FSMC_Init+0xb8>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800146e:	4b21      	ldr	r3, [pc, #132]	; (80014f4 <MX_FSMC_Init+0xb8>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001474:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <MX_FSMC_Init+0xb8>)
 8001476:	2210      	movs	r2, #16
 8001478:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800147a:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <MX_FSMC_Init+0xb8>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001480:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <MX_FSMC_Init+0xb8>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001486:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <MX_FSMC_Init+0xb8>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <MX_FSMC_Init+0xb8>)
 800148e:	2200      	movs	r2, #0
 8001490:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_FSMC_Init+0xb8>)
 8001494:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001498:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <MX_FSMC_Init+0xb8>)
 800149c:	2200      	movs	r2, #0
 800149e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <MX_FSMC_Init+0xb8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <MX_FSMC_Init+0xb8>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_FSMC_Init+0xb8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <MX_FSMC_Init+0xb8>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 10;
 80014b8:	230a      	movs	r3, #10
 80014ba:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80014bc:	230f      	movs	r3, #15
 80014be:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 20;
 80014c0:	2314      	movs	r3, #20
 80014c2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80014c8:	2310      	movs	r3, #16
 80014ca:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80014cc:	2311      	movs	r3, #17
 80014ce:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2200      	movs	r2, #0
 80014d8:	4619      	mov	r1, r3
 80014da:	4806      	ldr	r0, [pc, #24]	; (80014f4 <MX_FSMC_Init+0xb8>)
 80014dc:	f004 f90f 	bl	80056fe <HAL_SRAM_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 80014e6:	f000 f818 	bl	800151a <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80014ea:	bf00      	nop
 80014ec:	3720      	adds	r7, #32
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000368 	.word	0x20000368
 80014f8:	a0000104 	.word	0xa0000104

080014fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800150c:	d101      	bne.n	8001512 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800150e:	f000 feed 	bl	80022ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800151e:	b672      	cpsid	i
}
 8001520:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001522:	e7fe      	b.n	8001522 <Error_Handler+0x8>

08001524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <HAL_MspInit+0x4c>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	4a0f      	ldr	r2, [pc, #60]	; (8001570 <HAL_MspInit+0x4c>)
 8001534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001538:	6453      	str	r3, [r2, #68]	; 0x44
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <HAL_MspInit+0x4c>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_MspInit+0x4c>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	4a08      	ldr	r2, [pc, #32]	; (8001570 <HAL_MspInit+0x4c>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001554:	6413      	str	r3, [r2, #64]	; 0x40
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_MspInit+0x4c>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800

08001574 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a24      	ldr	r2, [pc, #144]	; (8001624 <HAL_ADC_MspInit+0xb0>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d141      	bne.n	800161a <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	4b23      	ldr	r3, [pc, #140]	; (8001628 <HAL_ADC_MspInit+0xb4>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	4a22      	ldr	r2, [pc, #136]	; (8001628 <HAL_ADC_MspInit+0xb4>)
 80015a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a4:	6453      	str	r3, [r2, #68]	; 0x44
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <HAL_ADC_MspInit+0xb4>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <HAL_ADC_MspInit+0xb4>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a1b      	ldr	r2, [pc, #108]	; (8001628 <HAL_ADC_MspInit+0xb4>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b19      	ldr	r3, [pc, #100]	; (8001628 <HAL_ADC_MspInit+0xb4>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_ADC_MspInit+0xb4>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a14      	ldr	r2, [pc, #80]	; (8001628 <HAL_ADC_MspInit+0xb4>)
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_ADC_MspInit+0xb4>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ANALOG0_Pin|ANALOG2_Pin;
 80015ea:	2309      	movs	r3, #9
 80015ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ee:	2303      	movs	r3, #3
 80015f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	480b      	ldr	r0, [pc, #44]	; (800162c <HAL_ADC_MspInit+0xb8>)
 80015fe:	f002 fb4d 	bl	8003c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ANALOG1_Pin;
 8001602:	2302      	movs	r3, #2
 8001604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001606:	2303      	movs	r3, #3
 8001608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ANALOG1_GPIO_Port, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	4806      	ldr	r0, [pc, #24]	; (8001630 <HAL_ADC_MspInit+0xbc>)
 8001616:	f002 fb41 	bl	8003c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800161a:	bf00      	nop
 800161c:	3728      	adds	r7, #40	; 0x28
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40012000 	.word	0x40012000
 8001628:	40023800 	.word	0x40023800
 800162c:	40020000 	.word	0x40020000
 8001630:	40020400 	.word	0x40020400

08001634 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	; 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a19      	ldr	r2, [pc, #100]	; (80016b8 <HAL_CAN_MspInit+0x84>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d12c      	bne.n	80016b0 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_CAN_MspInit+0x88>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	4a17      	ldr	r2, [pc, #92]	; (80016bc <HAL_CAN_MspInit+0x88>)
 8001660:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001664:	6413      	str	r3, [r2, #64]	; 0x40
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_CAN_MspInit+0x88>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_CAN_MspInit+0x88>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a10      	ldr	r2, [pc, #64]	; (80016bc <HAL_CAN_MspInit+0x88>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <HAL_CAN_MspInit+0x88>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800168e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80016a0:	2309      	movs	r3, #9
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <HAL_CAN_MspInit+0x8c>)
 80016ac:	f002 faf6 	bl	8003c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80016b0:	bf00      	nop
 80016b2:	3728      	adds	r7, #40	; 0x28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40006400 	.word	0x40006400
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000

080016c4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08c      	sub	sp, #48	; 0x30
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 031c 	add.w	r3, r7, #28
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a47      	ldr	r2, [pc, #284]	; (8001800 <HAL_DCMI_MspInit+0x13c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	f040 8087 	bne.w	80017f6 <HAL_DCMI_MspInit+0x132>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	61bb      	str	r3, [r7, #24]
 80016ec:	4b45      	ldr	r3, [pc, #276]	; (8001804 <HAL_DCMI_MspInit+0x140>)
 80016ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f0:	4a44      	ldr	r2, [pc, #272]	; (8001804 <HAL_DCMI_MspInit+0x140>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6353      	str	r3, [r2, #52]	; 0x34
 80016f8:	4b42      	ldr	r3, [pc, #264]	; (8001804 <HAL_DCMI_MspInit+0x140>)
 80016fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	61bb      	str	r3, [r7, #24]
 8001702:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	4b3e      	ldr	r3, [pc, #248]	; (8001804 <HAL_DCMI_MspInit+0x140>)
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	4a3d      	ldr	r2, [pc, #244]	; (8001804 <HAL_DCMI_MspInit+0x140>)
 800170e:	f043 0310 	orr.w	r3, r3, #16
 8001712:	6313      	str	r3, [r2, #48]	; 0x30
 8001714:	4b3b      	ldr	r3, [pc, #236]	; (8001804 <HAL_DCMI_MspInit+0x140>)
 8001716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001718:	f003 0310 	and.w	r3, r3, #16
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	4b37      	ldr	r3, [pc, #220]	; (8001804 <HAL_DCMI_MspInit+0x140>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	4a36      	ldr	r2, [pc, #216]	; (8001804 <HAL_DCMI_MspInit+0x140>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6313      	str	r3, [r2, #48]	; 0x30
 8001730:	4b34      	ldr	r3, [pc, #208]	; (8001804 <HAL_DCMI_MspInit+0x140>)
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	4b30      	ldr	r3, [pc, #192]	; (8001804 <HAL_DCMI_MspInit+0x140>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	4a2f      	ldr	r2, [pc, #188]	; (8001804 <HAL_DCMI_MspInit+0x140>)
 8001746:	f043 0304 	orr.w	r3, r3, #4
 800174a:	6313      	str	r3, [r2, #48]	; 0x30
 800174c:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <HAL_DCMI_MspInit+0x140>)
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	4b29      	ldr	r3, [pc, #164]	; (8001804 <HAL_DCMI_MspInit+0x140>)
 800175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001760:	4a28      	ldr	r2, [pc, #160]	; (8001804 <HAL_DCMI_MspInit+0x140>)
 8001762:	f043 0302 	orr.w	r3, r3, #2
 8001766:	6313      	str	r3, [r2, #48]	; 0x30
 8001768:	4b26      	ldr	r3, [pc, #152]	; (8001804 <HAL_DCMI_MspInit+0x140>)
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001774:	2370      	movs	r3, #112	; 0x70
 8001776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001784:	230d      	movs	r3, #13
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	4619      	mov	r1, r3
 800178e:	481e      	ldr	r0, [pc, #120]	; (8001808 <HAL_DCMI_MspInit+0x144>)
 8001790:	f002 fa84 	bl	8003c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001794:	2350      	movs	r3, #80	; 0x50
 8001796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80017a4:	230d      	movs	r3, #13
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a8:	f107 031c 	add.w	r3, r7, #28
 80017ac:	4619      	mov	r1, r3
 80017ae:	4817      	ldr	r0, [pc, #92]	; (800180c <HAL_DCMI_MspInit+0x148>)
 80017b0:	f002 fa74 	bl	8003c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80017b4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80017b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80017c6:	230d      	movs	r3, #13
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ca:	f107 031c 	add.w	r3, r7, #28
 80017ce:	4619      	mov	r1, r3
 80017d0:	480f      	ldr	r0, [pc, #60]	; (8001810 <HAL_DCMI_MspInit+0x14c>)
 80017d2:	f002 fa63 	bl	8003c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017d6:	23c0      	movs	r3, #192	; 0xc0
 80017d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80017e6:	230d      	movs	r3, #13
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ea:	f107 031c 	add.w	r3, r7, #28
 80017ee:	4619      	mov	r1, r3
 80017f0:	4808      	ldr	r0, [pc, #32]	; (8001814 <HAL_DCMI_MspInit+0x150>)
 80017f2:	f002 fa53 	bl	8003c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80017f6:	bf00      	nop
 80017f8:	3730      	adds	r7, #48	; 0x30
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	50050000 	.word	0x50050000
 8001804:	40023800 	.word	0x40023800
 8001808:	40021000 	.word	0x40021000
 800180c:	40020000 	.word	0x40020000
 8001810:	40020800 	.word	0x40020800
 8001814:	40020400 	.word	0x40020400

08001818 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a19      	ldr	r2, [pc, #100]	; (800189c <HAL_I2C_MspInit+0x84>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d12c      	bne.n	8001894 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <HAL_I2C_MspInit+0x88>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a17      	ldr	r2, [pc, #92]	; (80018a0 <HAL_I2C_MspInit+0x88>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <HAL_I2C_MspInit+0x88>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001856:	f44f 7340 	mov.w	r3, #768	; 0x300
 800185a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800185c:	2312      	movs	r3, #18
 800185e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001860:	2301      	movs	r3, #1
 8001862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001868:	2304      	movs	r3, #4
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4619      	mov	r1, r3
 8001872:	480c      	ldr	r0, [pc, #48]	; (80018a4 <HAL_I2C_MspInit+0x8c>)
 8001874:	f002 fa12 	bl	8003c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <HAL_I2C_MspInit+0x88>)
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <HAL_I2C_MspInit+0x88>)
 8001882:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001886:	6413      	str	r3, [r2, #64]	; 0x40
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <HAL_I2C_MspInit+0x88>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001894:	bf00      	nop
 8001896:	3728      	adds	r7, #40	; 0x28
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40005400 	.word	0x40005400
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020400 	.word	0x40020400

080018a8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018b0:	f107 0308 	add.w	r3, r7, #8
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a0c      	ldr	r2, [pc, #48]	; (80018f4 <HAL_RTC_MspInit+0x4c>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d111      	bne.n	80018ec <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80018c8:	2302      	movs	r3, #2
 80018ca:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80018cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018d0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018d2:	f107 0308 	add.w	r3, r7, #8
 80018d6:	4618      	mov	r0, r3
 80018d8:	f003 fcac 	bl	8005234 <HAL_RCCEx_PeriphCLKConfig>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80018e2:	f7ff fe1a 	bl	800151a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80018e6:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <HAL_RTC_MspInit+0x50>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80018ec:	bf00      	nop
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40002800 	.word	0x40002800
 80018f8:	42470e3c 	.word	0x42470e3c

080018fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a28      	ldr	r2, [pc, #160]	; (80019bc <HAL_SPI_MspInit+0xc0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d14a      	bne.n	80019b4 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <HAL_SPI_MspInit+0xc4>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a26      	ldr	r2, [pc, #152]	; (80019c0 <HAL_SPI_MspInit+0xc4>)
 8001928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <HAL_SPI_MspInit+0xc4>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <HAL_SPI_MspInit+0xc4>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a1f      	ldr	r2, [pc, #124]	; (80019c0 <HAL_SPI_MspInit+0xc4>)
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b1d      	ldr	r3, [pc, #116]	; (80019c0 <HAL_SPI_MspInit+0xc4>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <HAL_SPI_MspInit+0xc4>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a18      	ldr	r2, [pc, #96]	; (80019c0 <HAL_SPI_MspInit+0xc4>)
 8001960:	f043 0302 	orr.w	r3, r3, #2
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <HAL_SPI_MspInit+0xc4>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001972:	230c      	movs	r3, #12
 8001974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197e:	2303      	movs	r3, #3
 8001980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001982:	2305      	movs	r3, #5
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	4619      	mov	r1, r3
 800198c:	480d      	ldr	r0, [pc, #52]	; (80019c4 <HAL_SPI_MspInit+0xc8>)
 800198e:	f002 f985 	bl	8003c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a0:	2303      	movs	r3, #3
 80019a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019a4:	2305      	movs	r3, #5
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	4619      	mov	r1, r3
 80019ae:	4806      	ldr	r0, [pc, #24]	; (80019c8 <HAL_SPI_MspInit+0xcc>)
 80019b0:	f002 f974 	bl	8003c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80019b4:	bf00      	nop
 80019b6:	3728      	adds	r7, #40	; 0x28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40003800 	.word	0x40003800
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40020800 	.word	0x40020800
 80019c8:	40020400 	.word	0x40020400

080019cc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08e      	sub	sp, #56	; 0x38
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a4c      	ldr	r2, [pc, #304]	; (8001b1c <HAL_TIM_Encoder_MspInit+0x150>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d12d      	bne.n	8001a4a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	623b      	str	r3, [r7, #32]
 80019f2:	4b4b      	ldr	r3, [pc, #300]	; (8001b20 <HAL_TIM_Encoder_MspInit+0x154>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	4a4a      	ldr	r2, [pc, #296]	; (8001b20 <HAL_TIM_Encoder_MspInit+0x154>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6453      	str	r3, [r2, #68]	; 0x44
 80019fe:	4b48      	ldr	r3, [pc, #288]	; (8001b20 <HAL_TIM_Encoder_MspInit+0x154>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	623b      	str	r3, [r7, #32]
 8001a08:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
 8001a0e:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <HAL_TIM_Encoder_MspInit+0x154>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a43      	ldr	r2, [pc, #268]	; (8001b20 <HAL_TIM_Encoder_MspInit+0x154>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b41      	ldr	r3, [pc, #260]	; (8001b20 <HAL_TIM_Encoder_MspInit+0x154>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	61fb      	str	r3, [r7, #28]
 8001a24:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER0_M_Pin|ENCODER0_P_Pin;
 8001a26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a40:	4619      	mov	r1, r3
 8001a42:	4838      	ldr	r0, [pc, #224]	; (8001b24 <HAL_TIM_Encoder_MspInit+0x158>)
 8001a44:	f002 f92a 	bl	8003c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a48:	e063      	b.n	8001b12 <HAL_TIM_Encoder_MspInit+0x146>
  else if(htim_encoder->Instance==TIM3)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a36      	ldr	r2, [pc, #216]	; (8001b28 <HAL_TIM_Encoder_MspInit+0x15c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d12c      	bne.n	8001aae <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a54:	2300      	movs	r3, #0
 8001a56:	61bb      	str	r3, [r7, #24]
 8001a58:	4b31      	ldr	r3, [pc, #196]	; (8001b20 <HAL_TIM_Encoder_MspInit+0x154>)
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	4a30      	ldr	r2, [pc, #192]	; (8001b20 <HAL_TIM_Encoder_MspInit+0x154>)
 8001a5e:	f043 0302 	orr.w	r3, r3, #2
 8001a62:	6413      	str	r3, [r2, #64]	; 0x40
 8001a64:	4b2e      	ldr	r3, [pc, #184]	; (8001b20 <HAL_TIM_Encoder_MspInit+0x154>)
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <HAL_TIM_Encoder_MspInit+0x154>)
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a78:	4a29      	ldr	r2, [pc, #164]	; (8001b20 <HAL_TIM_Encoder_MspInit+0x154>)
 8001a7a:	f043 0302 	orr.w	r3, r3, #2
 8001a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a80:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <HAL_TIM_Encoder_MspInit+0x154>)
 8001a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENCODER1_M_Pin|ENCODER1_P_Pin;
 8001a8c:	2330      	movs	r3, #48	; 0x30
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	2302      	movs	r3, #2
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4821      	ldr	r0, [pc, #132]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x160>)
 8001aa8:	f002 f8f8 	bl	8003c9c <HAL_GPIO_Init>
}
 8001aac:	e031      	b.n	8001b12 <HAL_TIM_Encoder_MspInit+0x146>
  else if(htim_encoder->Instance==TIM4)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a1f      	ldr	r2, [pc, #124]	; (8001b30 <HAL_TIM_Encoder_MspInit+0x164>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d12c      	bne.n	8001b12 <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ab8:	2300      	movs	r3, #0
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <HAL_TIM_Encoder_MspInit+0x154>)
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	4a17      	ldr	r2, [pc, #92]	; (8001b20 <HAL_TIM_Encoder_MspInit+0x154>)
 8001ac2:	f043 0304 	orr.w	r3, r3, #4
 8001ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac8:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_TIM_Encoder_MspInit+0x154>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_TIM_Encoder_MspInit+0x154>)
 8001ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001adc:	4a10      	ldr	r2, [pc, #64]	; (8001b20 <HAL_TIM_Encoder_MspInit+0x154>)
 8001ade:	f043 0308 	orr.w	r3, r3, #8
 8001ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <HAL_TIM_Encoder_MspInit+0x154>)
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER2_M_Pin|ENCODER2_P_Pin;
 8001af0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b02:	2302      	movs	r3, #2
 8001b04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4809      	ldr	r0, [pc, #36]	; (8001b34 <HAL_TIM_Encoder_MspInit+0x168>)
 8001b0e:	f002 f8c5 	bl	8003c9c <HAL_GPIO_Init>
}
 8001b12:	bf00      	nop
 8001b14:	3738      	adds	r7, #56	; 0x38
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40010000 	.word	0x40010000
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40020000 	.word	0x40020000
 8001b28:	40000400 	.word	0x40000400
 8001b2c:	40020400 	.word	0x40020400
 8001b30:	40000800 	.word	0x40000800
 8001b34:	40020c00 	.word	0x40020c00

08001b38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a28      	ldr	r2, [pc, #160]	; (8001bf8 <HAL_UART_MspInit+0xc0>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d14a      	bne.n	8001bf0 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <HAL_UART_MspInit+0xc4>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	4a26      	ldr	r2, [pc, #152]	; (8001bfc <HAL_UART_MspInit+0xc4>)
 8001b64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b68:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6a:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <HAL_UART_MspInit+0xc4>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <HAL_UART_MspInit+0xc4>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a1f      	ldr	r2, [pc, #124]	; (8001bfc <HAL_UART_MspInit+0xc4>)
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <HAL_UART_MspInit+0xc4>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <HAL_UART_MspInit+0xc4>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a18      	ldr	r2, [pc, #96]	; (8001bfc <HAL_UART_MspInit+0xc4>)
 8001b9c:	f043 0308 	orr.w	r3, r3, #8
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <HAL_UART_MspInit+0xc4>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001bc0:	2308      	movs	r3, #8
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	4619      	mov	r1, r3
 8001bca:	480d      	ldr	r0, [pc, #52]	; (8001c00 <HAL_UART_MspInit+0xc8>)
 8001bcc:	f002 f866 	bl	8003c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001be0:	2308      	movs	r3, #8
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	4806      	ldr	r0, [pc, #24]	; (8001c04 <HAL_UART_MspInit+0xcc>)
 8001bec:	f002 f856 	bl	8003c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001bf0:	bf00      	nop
 8001bf2:	3728      	adds	r7, #40	; 0x28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40005000 	.word	0x40005000
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020800 	.word	0x40020800
 8001c04:	40020c00 	.word	0x40020c00

08001c08 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001c1c:	4b1c      	ldr	r3, [pc, #112]	; (8001c90 <HAL_FSMC_MspInit+0x88>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d131      	bne.n	8001c88 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001c24:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <HAL_FSMC_MspInit+0x88>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	603b      	str	r3, [r7, #0]
 8001c2e:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <HAL_FSMC_MspInit+0x8c>)
 8001c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c32:	4a18      	ldr	r2, [pc, #96]	; (8001c94 <HAL_FSMC_MspInit+0x8c>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6393      	str	r3, [r2, #56]	; 0x38
 8001c3a:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <HAL_FSMC_MspInit+0x8c>)
 8001c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001c46:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001c4a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c54:	2303      	movs	r3, #3
 8001c56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001c58:	230c      	movs	r3, #12
 8001c5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	4619      	mov	r1, r3
 8001c60:	480d      	ldr	r0, [pc, #52]	; (8001c98 <HAL_FSMC_MspInit+0x90>)
 8001c62:	f002 f81b 	bl	8003c9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001c66:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001c6a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c74:	2303      	movs	r3, #3
 8001c76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001c78:	230c      	movs	r3, #12
 8001c7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4806      	ldr	r0, [pc, #24]	; (8001c9c <HAL_FSMC_MspInit+0x94>)
 8001c82:	f002 f80b 	bl	8003c9c <HAL_GPIO_Init>
 8001c86:	e000      	b.n	8001c8a <HAL_FSMC_MspInit+0x82>
    return;
 8001c88:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	200003b8 	.word	0x200003b8
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40020c00 	.word	0x40020c00

08001ca0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001ca8:	f7ff ffae 	bl	8001c08 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08c      	sub	sp, #48	; 0x30
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	201c      	movs	r0, #28
 8001cca:	f000 ff69 	bl	8002ba0 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cce:	201c      	movs	r0, #28
 8001cd0:	f000 ff82 	bl	8002bd8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <HAL_InitTick+0xa8>)
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	4a1f      	ldr	r2, [pc, #124]	; (8001d5c <HAL_InitTick+0xa8>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <HAL_InitTick+0xa8>)
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cf0:	f107 0210 	add.w	r2, r7, #16
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f003 fa68 	bl	80051d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001d00:	f003 fa3e 	bl	8005180 <HAL_RCC_GetPCLK1Freq>
 8001d04:	4603      	mov	r3, r0
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0c:	4a14      	ldr	r2, [pc, #80]	; (8001d60 <HAL_InitTick+0xac>)
 8001d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d12:	0c9b      	lsrs	r3, r3, #18
 8001d14:	3b01      	subs	r3, #1
 8001d16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_InitTick+0xb0>)
 8001d1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d1e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001d20:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <HAL_InitTick+0xb0>)
 8001d22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d26:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001d28:	4a0e      	ldr	r2, [pc, #56]	; (8001d64 <HAL_InitTick+0xb0>)
 8001d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d2c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <HAL_InitTick+0xb0>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <HAL_InitTick+0xb0>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001d3a:	480a      	ldr	r0, [pc, #40]	; (8001d64 <HAL_InitTick+0xb0>)
 8001d3c:	f003 fd27 	bl	800578e <HAL_TIM_Base_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d104      	bne.n	8001d50 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001d46:	4807      	ldr	r0, [pc, #28]	; (8001d64 <HAL_InitTick+0xb0>)
 8001d48:	f003 fd7a 	bl	8005840 <HAL_TIM_Base_Start_IT>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	e000      	b.n	8001d52 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3730      	adds	r7, #48	; 0x30
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	431bde83 	.word	0x431bde83
 8001d64:	200003bc 	.word	0x200003bc

08001d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <NMI_Handler+0x4>

08001d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <HardFault_Handler+0x4>

08001d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <MemManage_Handler+0x4>

08001d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d7e:	e7fe      	b.n	8001d7e <BusFault_Handler+0x4>

08001d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <UsageFault_Handler+0x4>

08001d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dc4:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <TIM2_IRQHandler+0x10>)
 8001dc6:	f003 fe51 	bl	8005a6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200003bc 	.word	0x200003bc

08001dd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
	return 1;
 8001dd8:	2301      	movs	r3, #1
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <_kill>:

int _kill(int pid, int sig)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dee:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <_kill+0x20>)
 8001df0:	2216      	movs	r2, #22
 8001df2:	601a      	str	r2, [r3, #0]
	return -1;
 8001df4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	200080a8 	.word	0x200080a8

08001e08 <_exit>:

void _exit (int status)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e10:	f04f 31ff 	mov.w	r1, #4294967295
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff ffe5 	bl	8001de4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e1a:	e7fe      	b.n	8001e1a <_exit+0x12>

08001e1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	e00a      	b.n	8001e44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e2e:	f3af 8000 	nop.w
 8001e32:	4601      	mov	r1, r0
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	60ba      	str	r2, [r7, #8]
 8001e3a:	b2ca      	uxtb	r2, r1
 8001e3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3301      	adds	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	dbf0      	blt.n	8001e2e <_read+0x12>
	}

return len;
 8001e4c:	687b      	ldr	r3, [r7, #4]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b086      	sub	sp, #24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	60f8      	str	r0, [r7, #12]
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	e009      	b.n	8001e7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	60ba      	str	r2, [r7, #8]
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	dbf1      	blt.n	8001e68 <_write+0x12>
	}
	return len;
 8001e84:	687b      	ldr	r3, [r7, #4]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <_close>:

int _close(int file)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
	return -1;
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eb6:	605a      	str	r2, [r3, #4]
	return 0;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <_isatty>:

int _isatty(int file)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
	return 1;
 8001ece:	2301      	movs	r3, #1
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
	return 0;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f00:	4a14      	ldr	r2, [pc, #80]	; (8001f54 <_sbrk+0x5c>)
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <_sbrk+0x60>)
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f0c:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <_sbrk+0x64>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d102      	bne.n	8001f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <_sbrk+0x64>)
 8001f16:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <_sbrk+0x68>)
 8001f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <_sbrk+0x64>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4413      	add	r3, r2
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d205      	bcs.n	8001f34 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001f28:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <_sbrk+0x6c>)
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f32:	e009      	b.n	8001f48 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <_sbrk+0x64>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <_sbrk+0x64>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	4a06      	ldr	r2, [pc, #24]	; (8001f5c <_sbrk+0x64>)
 8001f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f46:	68fb      	ldr	r3, [r7, #12]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	371c      	adds	r7, #28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	20020000 	.word	0x20020000
 8001f58:	00000400 	.word	0x00000400
 8001f5c:	20000404 	.word	0x20000404
 8001f60:	200080b8 	.word	0x200080b8
 8001f64:	200080a8 	.word	0x200080a8

08001f68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <SystemInit+0x28>)
 8001f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f72:	4a07      	ldr	r2, [pc, #28]	; (8001f90 <SystemInit+0x28>)
 8001f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <SystemInit+0x28>)
 8001f7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f82:	609a      	str	r2, [r3, #8]
#endif
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fcc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f9a:	e003      	b.n	8001fa4 <LoopCopyDataInit>

08001f9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001fa0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001fa2:	3104      	adds	r1, #4

08001fa4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fa4:	480b      	ldr	r0, [pc, #44]	; (8001fd4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001fa8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001faa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001fac:	d3f6      	bcc.n	8001f9c <CopyDataInit>
  ldr  r2, =_sbss
 8001fae:	4a0b      	ldr	r2, [pc, #44]	; (8001fdc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001fb0:	e002      	b.n	8001fb8 <LoopFillZerobss>

08001fb2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001fb2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001fb4:	f842 3b04 	str.w	r3, [r2], #4

08001fb8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fb8:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001fba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001fbc:	d3f9      	bcc.n	8001fb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fbe:	f7ff ffd3 	bl	8001f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fc2:	f00e fe33 	bl	8010c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fc6:	f7fe fdc3 	bl	8000b50 <main>
  bx  lr    
 8001fca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fcc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001fd0:	08014aa8 	.word	0x08014aa8
  ldr  r0, =_sdata
 8001fd4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fd8:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001fdc:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001fe0:	200080b8 	.word	0x200080b8

08001fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fe4:	e7fe      	b.n	8001fe4 <ADC_IRQHandler>

08001fe6 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00b      	beq.n	800200e <DP83848_RegisterBusIO+0x28>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d007      	beq.n	800200e <DP83848_RegisterBusIO+0x28>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <DP83848_RegisterBusIO+0x28>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d102      	bne.n	8002014 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 800200e:	f04f 33ff 	mov.w	r3, #4294967295
 8002012:	e014      	b.n	800203e <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d17c      	bne.n	8002164 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2220      	movs	r2, #32
 800207c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	e01c      	b.n	80020be <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	f107 0208 	add.w	r2, r7, #8
 800208c:	2119      	movs	r1, #25
 800208e:	6978      	ldr	r0, [r7, #20]
 8002090:	4798      	blx	r3
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	da03      	bge.n	80020a0 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8002098:	f06f 0304 	mvn.w	r3, #4
 800209c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800209e:	e00b      	b.n	80020b8 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	f003 031f 	and.w	r3, r3, #31
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d105      	bne.n	80020b8 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
         break;
 80020b6:	e005      	b.n	80020c4 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	3301      	adds	r3, #1
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2b1f      	cmp	r3, #31
 80020c2:	d9df      	bls.n	8002084 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b1f      	cmp	r3, #31
 80020ca:	d902      	bls.n	80020d2 <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 80020cc:	f06f 0302 	mvn.w	r3, #2
 80020d0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d145      	bne.n	8002164 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6810      	ldr	r0, [r2, #0]
 80020e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020e4:	2100      	movs	r1, #0
 80020e6:	4798      	blx	r3
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	db37      	blt.n	800215e <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6810      	ldr	r0, [r2, #0]
 80020f6:	f107 0208 	add.w	r2, r7, #8
 80020fa:	2100      	movs	r1, #0
 80020fc:	4798      	blx	r3
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	db28      	blt.n	8002156 <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	4798      	blx	r3
 800210a:	4603      	mov	r3, r0
 800210c:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 800210e:	e01c      	b.n	800214a <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	4798      	blx	r3
 8002116:	4603      	mov	r3, r0
 8002118:	461a      	mov	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002122:	d80e      	bhi.n	8002142 <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6810      	ldr	r0, [r2, #0]
 800212c:	f107 0208 	add.w	r2, r7, #8
 8002130:	2100      	movs	r1, #0
 8002132:	4798      	blx	r3
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	da07      	bge.n	800214a <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 800213a:	f06f 0304 	mvn.w	r3, #4
 800213e:	613b      	str	r3, [r7, #16]
                 break;
 8002140:	e010      	b.n	8002164 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 8002142:	f06f 0301 	mvn.w	r3, #1
 8002146:	613b      	str	r3, [r7, #16]
               break;
 8002148:	e00c      	b.n	8002164 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1dd      	bne.n	8002110 <DP83848_Init+0xc6>
 8002154:	e006      	b.n	8002164 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8002156:	f06f 0304 	mvn.w	r3, #4
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	e002      	b.n	8002164 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 800215e:	f06f 0303 	mvn.w	r3, #3
 8002162:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d112      	bne.n	8002190 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	4798      	blx	r3
 8002170:	4603      	mov	r3, r0
 8002172:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8002174:	bf00      	nop
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	4798      	blx	r3
 800217c:	4603      	mov	r3, r0
 800217e:	461a      	mov	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002188:	d9f5      	bls.n	8002176 <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	605a      	str	r2, [r3, #4]
   }

   return status;
 8002190:	693b      	ldr	r3, [r7, #16]
 }
 8002192:	4618      	mov	r0, r3
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b084      	sub	sp, #16
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6810      	ldr	r0, [r2, #0]
 80021ae:	f107 020c 	add.w	r2, r7, #12
 80021b2:	2101      	movs	r1, #1
 80021b4:	4798      	blx	r3
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	da02      	bge.n	80021c2 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 80021bc:	f06f 0304 	mvn.w	r3, #4
 80021c0:	e06e      	b.n	80022a0 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6810      	ldr	r0, [r2, #0]
 80021ca:	f107 020c 	add.w	r2, r7, #12
 80021ce:	2101      	movs	r1, #1
 80021d0:	4798      	blx	r3
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	da02      	bge.n	80021de <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 80021d8:	f06f 0304 	mvn.w	r3, #4
 80021dc:	e060      	b.n	80022a0 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e059      	b.n	80022a0 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6810      	ldr	r0, [r2, #0]
 80021f4:	f107 020c 	add.w	r2, r7, #12
 80021f8:	2100      	movs	r1, #0
 80021fa:	4798      	blx	r3
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	da02      	bge.n	8002208 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8002202:	f06f 0304 	mvn.w	r3, #4
 8002206:	e04b      	b.n	80022a0 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d11b      	bne.n	800224a <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d006      	beq.n	800222a <DP83848_GetLinkState+0x90>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8002226:	2302      	movs	r3, #2
 8002228:	e03a      	b.n	80022a0 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8002234:	2303      	movs	r3, #3
 8002236:	e033      	b.n	80022a0 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8002242:	2304      	movs	r3, #4
 8002244:	e02c      	b.n	80022a0 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8002246:	2305      	movs	r3, #5
 8002248:	e02a      	b.n	80022a0 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6810      	ldr	r0, [r2, #0]
 8002252:	f107 020c 	add.w	r2, r7, #12
 8002256:	2110      	movs	r1, #16
 8002258:	4798      	blx	r3
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	da02      	bge.n	8002266 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8002260:	f06f 0304 	mvn.w	r3, #4
 8002264:	e01c      	b.n	80022a0 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8002270:	2306      	movs	r3, #6
 8002272:	e015      	b.n	80022a0 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f003 0306 	and.w	r3, r3, #6
 800227a:	2b04      	cmp	r3, #4
 800227c:	d101      	bne.n	8002282 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 800227e:	2302      	movs	r3, #2
 8002280:	e00e      	b.n	80022a0 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f003 0306 	and.w	r3, r3, #6
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 800228c:	2303      	movs	r3, #3
 800228e:	e007      	b.n	80022a0 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 0306 	and.w	r3, r3, #6
 8002296:	2b06      	cmp	r3, #6
 8002298:	d101      	bne.n	800229e <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 800229a:	2304      	movs	r3, #4
 800229c:	e000      	b.n	80022a0 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 800229e:	2305      	movs	r3, #5
    }
  }
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022ac:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <HAL_Init+0x40>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0d      	ldr	r2, [pc, #52]	; (80022e8 <HAL_Init+0x40>)
 80022b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_Init+0x40>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <HAL_Init+0x40>)
 80022be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022c4:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <HAL_Init+0x40>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a07      	ldr	r2, [pc, #28]	; (80022e8 <HAL_Init+0x40>)
 80022ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d0:	2003      	movs	r0, #3
 80022d2:	f000 fc5a 	bl	8002b8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022d6:	200f      	movs	r0, #15
 80022d8:	f7ff fcec 	bl	8001cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022dc:	f7ff f922 	bl	8001524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40023c00 	.word	0x40023c00

080022ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_IncTick+0x20>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_IncTick+0x24>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4413      	add	r3, r2
 80022fc:	4a04      	ldr	r2, [pc, #16]	; (8002310 <HAL_IncTick+0x24>)
 80022fe:	6013      	str	r3, [r2, #0]
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	20000008 	.word	0x20000008
 8002310:	20000408 	.word	0x20000408

08002314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return uwTick;
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <HAL_GetTick+0x14>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20000408 	.word	0x20000408

0800232c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002334:	f7ff ffee 	bl	8002314 <HAL_GetTick>
 8002338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002344:	d005      	beq.n	8002352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002346:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <HAL_Delay+0x44>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4413      	add	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002352:	bf00      	nop
 8002354:	f7ff ffde 	bl	8002314 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	429a      	cmp	r2, r3
 8002362:	d8f7      	bhi.n	8002354 <HAL_Delay+0x28>
  {
  }
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000008 	.word	0x20000008

08002374 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800237c:	2300      	movs	r3, #0
 800237e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e033      	b.n	80023f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	2b00      	cmp	r3, #0
 8002390:	d109      	bne.n	80023a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff f8ee 	bl	8001574 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d118      	bne.n	80023e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023ba:	f023 0302 	bic.w	r3, r3, #2
 80023be:	f043 0202 	orr.w	r2, r3, #2
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f93a 	bl	8002640 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f023 0303 	bic.w	r3, r3, #3
 80023da:	f043 0201 	orr.w	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	641a      	str	r2, [r3, #64]	; 0x40
 80023e2:	e001      	b.n	80023e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x1c>
 8002414:	2302      	movs	r3, #2
 8002416:	e105      	b.n	8002624 <HAL_ADC_ConfigChannel+0x228>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b09      	cmp	r3, #9
 8002426:	d925      	bls.n	8002474 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68d9      	ldr	r1, [r3, #12]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	4613      	mov	r3, r2
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4413      	add	r3, r2
 800243c:	3b1e      	subs	r3, #30
 800243e:	2207      	movs	r2, #7
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43da      	mvns	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	400a      	ands	r2, r1
 800244c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68d9      	ldr	r1, [r3, #12]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	b29b      	uxth	r3, r3
 800245e:	4618      	mov	r0, r3
 8002460:	4603      	mov	r3, r0
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4403      	add	r3, r0
 8002466:	3b1e      	subs	r3, #30
 8002468:	409a      	lsls	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	e022      	b.n	80024ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6919      	ldr	r1, [r3, #16]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	b29b      	uxth	r3, r3
 8002480:	461a      	mov	r2, r3
 8002482:	4613      	mov	r3, r2
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4413      	add	r3, r2
 8002488:	2207      	movs	r2, #7
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43da      	mvns	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	400a      	ands	r2, r1
 8002496:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6919      	ldr	r1, [r3, #16]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	4618      	mov	r0, r3
 80024aa:	4603      	mov	r3, r0
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	4403      	add	r3, r0
 80024b0:	409a      	lsls	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b06      	cmp	r3, #6
 80024c0:	d824      	bhi.n	800250c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	3b05      	subs	r3, #5
 80024d4:	221f      	movs	r2, #31
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43da      	mvns	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	400a      	ands	r2, r1
 80024e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	4618      	mov	r0, r3
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	3b05      	subs	r3, #5
 80024fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	635a      	str	r2, [r3, #52]	; 0x34
 800250a:	e04c      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b0c      	cmp	r3, #12
 8002512:	d824      	bhi.n	800255e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	3b23      	subs	r3, #35	; 0x23
 8002526:	221f      	movs	r2, #31
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43da      	mvns	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	400a      	ands	r2, r1
 8002534:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	b29b      	uxth	r3, r3
 8002542:	4618      	mov	r0, r3
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	3b23      	subs	r3, #35	; 0x23
 8002550:	fa00 f203 	lsl.w	r2, r0, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
 800255c:	e023      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	3b41      	subs	r3, #65	; 0x41
 8002570:	221f      	movs	r2, #31
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43da      	mvns	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	400a      	ands	r2, r1
 800257e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	b29b      	uxth	r3, r3
 800258c:	4618      	mov	r0, r3
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	3b41      	subs	r3, #65	; 0x41
 800259a:	fa00 f203 	lsl.w	r2, r0, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025a6:	4b22      	ldr	r3, [pc, #136]	; (8002630 <HAL_ADC_ConfigChannel+0x234>)
 80025a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a21      	ldr	r2, [pc, #132]	; (8002634 <HAL_ADC_ConfigChannel+0x238>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d109      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x1cc>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b12      	cmp	r3, #18
 80025ba:	d105      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a19      	ldr	r2, [pc, #100]	; (8002634 <HAL_ADC_ConfigChannel+0x238>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d123      	bne.n	800261a <HAL_ADC_ConfigChannel+0x21e>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b10      	cmp	r3, #16
 80025d8:	d003      	beq.n	80025e2 <HAL_ADC_ConfigChannel+0x1e6>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b11      	cmp	r3, #17
 80025e0:	d11b      	bne.n	800261a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b10      	cmp	r3, #16
 80025f4:	d111      	bne.n	800261a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <HAL_ADC_ConfigChannel+0x23c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a10      	ldr	r2, [pc, #64]	; (800263c <HAL_ADC_ConfigChannel+0x240>)
 80025fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002600:	0c9a      	lsrs	r2, r3, #18
 8002602:	4613      	mov	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800260c:	e002      	b.n	8002614 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	3b01      	subs	r3, #1
 8002612:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f9      	bne.n	800260e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	40012300 	.word	0x40012300
 8002634:	40012000 	.word	0x40012000
 8002638:	20000000 	.word	0x20000000
 800263c:	431bde83 	.word	0x431bde83

08002640 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002648:	4b79      	ldr	r3, [pc, #484]	; (8002830 <ADC_Init+0x1f0>)
 800264a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	431a      	orrs	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002674:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6859      	ldr	r1, [r3, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	021a      	lsls	r2, r3, #8
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002698:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6859      	ldr	r1, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6899      	ldr	r1, [r3, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d2:	4a58      	ldr	r2, [pc, #352]	; (8002834 <ADC_Init+0x1f4>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d022      	beq.n	800271e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6899      	ldr	r1, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002708:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6899      	ldr	r1, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	e00f      	b.n	800273e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800272c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800273c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0202 	bic.w	r2, r2, #2
 800274c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6899      	ldr	r1, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	7e1b      	ldrb	r3, [r3, #24]
 8002758:	005a      	lsls	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d01b      	beq.n	80027a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800277a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800278a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6859      	ldr	r1, [r3, #4]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	3b01      	subs	r3, #1
 8002798:	035a      	lsls	r2, r3, #13
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	e007      	b.n	80027b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	051a      	lsls	r2, r3, #20
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6899      	ldr	r1, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027f6:	025a      	lsls	r2, r3, #9
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800280e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6899      	ldr	r1, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	029a      	lsls	r2, r3, #10
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	609a      	str	r2, [r3, #8]
}
 8002824:	bf00      	nop
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	40012300 	.word	0x40012300
 8002834:	0f000001 	.word	0x0f000001

08002838 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e0ed      	b.n	8002a26 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d102      	bne.n	800285c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7fe feec 	bl	8001634 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0201 	orr.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800286c:	f7ff fd52 	bl	8002314 <HAL_GetTick>
 8002870:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002872:	e012      	b.n	800289a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002874:	f7ff fd4e 	bl	8002314 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b0a      	cmp	r3, #10
 8002880:	d90b      	bls.n	800289a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2205      	movs	r2, #5
 8002892:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e0c5      	b.n	8002a26 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0e5      	beq.n	8002874 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0202 	bic.w	r2, r2, #2
 80028b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028b8:	f7ff fd2c 	bl	8002314 <HAL_GetTick>
 80028bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028be:	e012      	b.n	80028e6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028c0:	f7ff fd28 	bl	8002314 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b0a      	cmp	r3, #10
 80028cc:	d90b      	bls.n	80028e6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2205      	movs	r2, #5
 80028de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e09f      	b.n	8002a26 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1e5      	bne.n	80028c0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	7e1b      	ldrb	r3, [r3, #24]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d108      	bne.n	800290e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	e007      	b.n	800291e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800291c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	7e5b      	ldrb	r3, [r3, #25]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d108      	bne.n	8002938 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	e007      	b.n	8002948 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002946:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	7e9b      	ldrb	r3, [r3, #26]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d108      	bne.n	8002962 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0220 	orr.w	r2, r2, #32
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	e007      	b.n	8002972 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0220 	bic.w	r2, r2, #32
 8002970:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	7edb      	ldrb	r3, [r3, #27]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d108      	bne.n	800298c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0210 	bic.w	r2, r2, #16
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	e007      	b.n	800299c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0210 	orr.w	r2, r2, #16
 800299a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	7f1b      	ldrb	r3, [r3, #28]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d108      	bne.n	80029b6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0208 	orr.w	r2, r2, #8
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	e007      	b.n	80029c6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0208 	bic.w	r2, r2, #8
 80029c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	7f5b      	ldrb	r3, [r3, #29]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d108      	bne.n	80029e0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 0204 	orr.w	r2, r2, #4
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	e007      	b.n	80029f0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0204 	bic.w	r2, r2, #4
 80029ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	ea42 0103 	orr.w	r1, r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	1e5a      	subs	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a62:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	60d3      	str	r3, [r2, #12]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a7c:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <__NVIC_GetPriorityGrouping+0x18>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	0a1b      	lsrs	r3, r3, #8
 8002a82:	f003 0307 	and.w	r3, r3, #7
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	db0b      	blt.n	8002abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	f003 021f 	and.w	r2, r3, #31
 8002aac:	4907      	ldr	r1, [pc, #28]	; (8002acc <__NVIC_EnableIRQ+0x38>)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000e100 	.word	0xe000e100

08002ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6039      	str	r1, [r7, #0]
 8002ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	db0a      	blt.n	8002afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	490c      	ldr	r1, [pc, #48]	; (8002b1c <__NVIC_SetPriority+0x4c>)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	0112      	lsls	r2, r2, #4
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	440b      	add	r3, r1
 8002af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af8:	e00a      	b.n	8002b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	4908      	ldr	r1, [pc, #32]	; (8002b20 <__NVIC_SetPriority+0x50>)
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	3b04      	subs	r3, #4
 8002b08:	0112      	lsls	r2, r2, #4
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	761a      	strb	r2, [r3, #24]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000e100 	.word	0xe000e100
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b089      	sub	sp, #36	; 0x24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f1c3 0307 	rsb	r3, r3, #7
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	bf28      	it	cs
 8002b42:	2304      	movcs	r3, #4
 8002b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	d902      	bls.n	8002b54 <NVIC_EncodePriority+0x30>
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3b03      	subs	r3, #3
 8002b52:	e000      	b.n	8002b56 <NVIC_EncodePriority+0x32>
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b58:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43da      	mvns	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	401a      	ands	r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	43d9      	mvns	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b7c:	4313      	orrs	r3, r2
         );
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3724      	adds	r7, #36	; 0x24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff ff4c 	bl	8002a30 <__NVIC_SetPriorityGrouping>
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb2:	f7ff ff61 	bl	8002a78 <__NVIC_GetPriorityGrouping>
 8002bb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	68b9      	ldr	r1, [r7, #8]
 8002bbc:	6978      	ldr	r0, [r7, #20]
 8002bbe:	f7ff ffb1 	bl	8002b24 <NVIC_EncodePriority>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc8:	4611      	mov	r1, r2
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff ff80 	bl	8002ad0 <__NVIC_SetPriority>
}
 8002bd0:	bf00      	nop
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff ff54 	bl	8002a94 <__NVIC_EnableIRQ>
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e05f      	b.n	8002cc6 <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d109      	bne.n	8002c26 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fe fd52 	bl	80016c4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7fe fd4f 	bl	80016c4 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002c3c:	f023 0308 	bic.w	r3, r3, #8
 8002c40:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6819      	ldr	r1, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002c56:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002c62:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002c6e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d112      	bne.n	8002ca6 <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	7f1b      	ldrb	r3, [r3, #28]
 8002c84:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	7f5b      	ldrb	r3, [r3, #29]
 8002c8a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002c8c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	7f9b      	ldrb	r3, [r3, #30]
 8002c92:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002c94:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	7fdb      	ldrb	r3, [r3, #31]
 8002c9c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002ca2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002ca4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f042 021e 	orr.w	r2, r2, #30
 8002cb4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e06c      	b.n	8002dbc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d106      	bne.n	8002cfa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2223      	movs	r2, #35	; 0x23
 8002cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f003 ff5d 	bl	8006bb4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	4b31      	ldr	r3, [pc, #196]	; (8002dc4 <HAL_ETH_Init+0xf4>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	4a30      	ldr	r2, [pc, #192]	; (8002dc4 <HAL_ETH_Init+0xf4>)
 8002d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d08:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0a:	4b2e      	ldr	r3, [pc, #184]	; (8002dc4 <HAL_ETH_Init+0xf4>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002d16:	4b2c      	ldr	r3, [pc, #176]	; (8002dc8 <HAL_ETH_Init+0xf8>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4a2b      	ldr	r2, [pc, #172]	; (8002dc8 <HAL_ETH_Init+0xf8>)
 8002d1c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d20:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002d22:	4b29      	ldr	r3, [pc, #164]	; (8002dc8 <HAL_ETH_Init+0xf8>)
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	4927      	ldr	r1, [pc, #156]	; (8002dc8 <HAL_ETH_Init+0xf8>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002d30:	4b25      	ldr	r3, [pc, #148]	; (8002dc8 <HAL_ETH_Init+0xf8>)
 8002d32:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d4c:	f7ff fae2 	bl	8002314 <HAL_GetTick>
 8002d50:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002d52:	e011      	b.n	8002d78 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002d54:	f7ff fade 	bl	8002314 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d62:	d909      	bls.n	8002d78 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2204      	movs	r2, #4
 8002d68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	22e0      	movs	r2, #224	; 0xe0
 8002d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e021      	b.n	8002dbc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1e4      	bne.n	8002d54 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fce0 	bl	8003750 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 fd87 	bl	80038a4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fddd 	bl	8003956 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	461a      	mov	r2, r3
 8002da2:	2100      	movs	r1, #0
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fd45 	bl	8003834 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2210      	movs	r2, #16
 8002db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40013800 	.word	0x40013800

08002dcc <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dda:	2b10      	cmp	r3, #16
 8002ddc:	d13a      	bne.n	8002e54 <HAL_ETH_Start+0x88>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2223      	movs	r2, #35	; 0x23
 8002de2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2204      	movs	r2, #4
 8002dea:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f909 	bl	8003004 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0208 	orr.w	r2, r2, #8
 8002e00:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0204 	orr.w	r2, r2, #4
 8002e10:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fb50 	bl	80034b8 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e2e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6812      	ldr	r2, [r2, #0]
 8002e3e:	f043 0302 	orr.w	r3, r3, #2
 8002e42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e46:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2223      	movs	r2, #35	; 0x23
 8002e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	e000      	b.n	8002e56 <HAL_ETH_Start+0x8a>
  }
  else
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
  }
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b082      	sub	sp, #8
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e6c:	2b23      	cmp	r3, #35	; 0x23
 8002e6e:	d130      	bne.n	8002ed2 <HAL_ETH_Stop+0x74>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2223      	movs	r2, #35	; 0x23
 8002e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0208 	bic.w	r2, r2, #8
 8002e86:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6812      	ldr	r2, [r2, #0]
 8002e96:	f023 0302 	bic.w	r3, r3, #2
 8002e9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e9e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0204 	bic.w	r2, r2, #4
 8002eae:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fb01 	bl	80034b8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0208 	bic.w	r2, r2, #8
 8002ec4:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2210      	movs	r2, #16
 8002eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	e000      	b.n	8002ed4 <HAL_ETH_Stop+0x76>
  }
  else
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
  }
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d109      	bne.n	8002f02 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef4:	f043 0201 	orr.w	r2, r3, #1
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e07c      	b.n	8002ffc <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f08:	2b23      	cmp	r3, #35	; 0x23
 8002f0a:	d176      	bne.n	8002ffa <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	68b9      	ldr	r1, [r7, #8]
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 fd8d 	bl	8003a30 <ETH_Prepare_Tx_Descriptors>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d009      	beq.n	8002f30 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f22:	f043 0202 	orr.w	r2, r3, #2
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e065      	b.n	8002ffc <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002f30:	f3bf 8f4f 	dsb	sy
}
 8002f34:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	3206      	adds	r2, #6
 8002f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f42:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	629a      	str	r2, [r3, #40]	; 0x28
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d904      	bls.n	8002f60 <HAL_ETH_Transmit+0x84>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	1f1a      	subs	r2, r3, #4
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3106      	adds	r1, #6
 8002f6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002f70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f74:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8002f76:	f7ff f9cd 	bl	8002314 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002f7c:	e037      	b.n	8002fee <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d011      	beq.n	8002fb4 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f96:	f043 0208 	orr.w	r2, r3, #8
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e023      	b.n	8002ffc <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fba:	d018      	beq.n	8002fee <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fbc:	f7ff f9aa 	bl	8002314 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d302      	bcc.n	8002fd2 <HAL_ETH_Transmit+0xf6>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10d      	bne.n	8002fee <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd8:	f043 0204 	orr.w	r2, r3, #4
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002fe8:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e006      	b.n	8002ffc <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	dbc3      	blt.n	8002f7e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e000      	b.n	8002ffc <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
  }
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800300c:	2300      	movs	r3, #0
 800300e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8003010:	2301      	movs	r3, #1
 8003012:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003018:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69fa      	ldr	r2, [r7, #28]
 800301e:	3212      	adds	r2, #18
 8003020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003024:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800302a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800302c:	e03e      	b.n	80030ac <ETH_UpdateDescriptor+0xa8>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d112      	bne.n	800305c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003036:	f107 030c 	add.w	r3, r7, #12
 800303a:	4618      	mov	r0, r3
 800303c:	f003 ff4a 	bl	8006ed4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d102      	bne.n	800304c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	74fb      	strb	r3, [r7, #19]
 800304a:	e007      	b.n	800305c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	461a      	mov	r2, r3
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	461a      	mov	r2, r3
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800305c:	7cfb      	ldrb	r3, [r7, #19]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d024      	beq.n	80030ac <ETH_UpdateDescriptor+0xa8>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003062:	f3bf 8f5f 	dmb	sy
}
 8003066:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      WRITE_REG(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800306e:	601a      	str	r2, [r3, #0]

      if (heth->RxDescList.ItMode == 0U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003074:	2b00      	cmp	r3, #0
 8003076:	d103      	bne.n	8003080 <ETH_UpdateDescriptor+0x7c>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | 1000U | ETH_DMARXDESC_RCH);
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	4a1a      	ldr	r2, [pc, #104]	; (80030e4 <ETH_UpdateDescriptor+0xe0>)
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	e003      	b.n	8003088 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, 1000U | ETH_DMARXDESC_RCH);
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f244 32e8 	movw	r2, #17384	; 0x43e8
 8003086:	605a      	str	r2, [r3, #4]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	3301      	adds	r3, #1
 800308c:	61fb      	str	r3, [r7, #28]
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	2b03      	cmp	r3, #3
 8003092:	d902      	bls.n	800309a <ETH_UpdateDescriptor+0x96>
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	3b04      	subs	r3, #4
 8003098:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69fa      	ldr	r2, [r7, #28]
 800309e:	3212      	adds	r2, #18
 80030a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030a4:	617b      	str	r3, [r7, #20]
      desccount--;
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	3b01      	subs	r3, #1
 80030aa:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <ETH_UpdateDescriptor+0xb4>
 80030b2:	7cfb      	ldrb	r3, [r7, #19]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1ba      	bne.n	800302e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d00c      	beq.n	80030dc <ETH_UpdateDescriptor+0xd8>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030ca:	461a      	mov	r2, r3
 80030cc:	2300      	movs	r3, #0
 80030ce:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69fa      	ldr	r2, [r7, #28]
 80030d4:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80030dc:	bf00      	nop
 80030de:	3720      	adds	r7, #32
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	800043e8 	.word	0x800043e8

080030e8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f003 031c 	and.w	r3, r3, #28
 8003104:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	02db      	lsls	r3, r3, #11
 800310a:	b29b      	uxth	r3, r3
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	019b      	lsls	r3, r3, #6
 8003116:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f023 0302 	bic.w	r3, r3, #2
 8003126:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003138:	f7ff f8ec 	bl	8002314 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800313e:	e00d      	b.n	800315c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003140:	f7ff f8e8 	bl	8002314 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800314e:	d301      	bcc.n	8003154 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e010      	b.n	8003176 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1ec      	bne.n	8003140 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	b29b      	uxth	r3, r3
 800316e:	461a      	mov	r2, r3
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b086      	sub	sp, #24
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f003 031c 	and.w	r3, r3, #28
 800319a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	02db      	lsls	r3, r3, #11
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	019b      	lsls	r3, r3, #6
 80031ac:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f043 0302 	orr.w	r3, r3, #2
 80031bc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031d8:	f7ff f89c 	bl	8002314 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80031de:	e00d      	b.n	80031fc <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80031e0:	f7ff f898 	bl	8002314 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ee:	d301      	bcc.n	80031f4 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e009      	b.n	8003208 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1ec      	bne.n	80031e0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0d2      	b.n	80033ca <HAL_ETH_GetMACConfig+0x1ba>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b00      	cmp	r3, #0
 8003230:	bf14      	ite	ne
 8003232:	2301      	movne	r3, #1
 8003234:	2300      	moveq	r3, #0
 8003236:	b2db      	uxtb	r3, r3
 8003238:	461a      	mov	r2, r3
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf0c      	ite	eq
 800325c:	2301      	moveq	r3, #1
 800325e:	2300      	movne	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	461a      	mov	r2, r3
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8003274:	2b00      	cmp	r3, #0
 8003276:	bf14      	ite	ne
 8003278:	2301      	movne	r3, #1
 800327a:	2300      	moveq	r3, #0
 800327c:	b2db      	uxtb	r3, r3
 800327e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800328e:	2b00      	cmp	r3, #0
 8003290:	bf0c      	ite	eq
 8003292:	2301      	moveq	r3, #1
 8003294:	2300      	movne	r3, #0
 8003296:	b2db      	uxtb	r3, r3
 8003298:	461a      	mov	r2, r3
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	bf14      	ite	ne
 80032ac:	2301      	movne	r3, #1
 80032ae:	2300      	moveq	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	461a      	mov	r2, r3
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	bf0c      	ite	eq
 80032e2:	2301      	moveq	r3, #1
 80032e4:	2300      	movne	r3, #0
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	461a      	mov	r2, r3
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bf0c      	ite	eq
 80032fc:	2301      	moveq	r3, #1
 80032fe:	2300      	movne	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	461a      	mov	r2, r3
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003312:	2b00      	cmp	r3, #0
 8003314:	bf14      	ite	ne
 8003316:	2301      	movne	r3, #1
 8003318:	2300      	moveq	r3, #0
 800331a:	b2db      	uxtb	r3, r3
 800331c:	461a      	mov	r2, r3
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 27) > 0U) ? ENABLE : DISABLE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2200      	movs	r2, #0
 800333a:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	bf14      	ite	ne
 800334a:	2301      	movne	r3, #1
 800334c:	2300      	moveq	r3, #0
 800334e:	b2db      	uxtb	r3, r3
 8003350:	461a      	mov	r2, r3
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003362:	2b00      	cmp	r3, #0
 8003364:	bf0c      	ite	eq
 8003366:	2301      	moveq	r3, #1
 8003368:	2300      	movne	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	0c1b      	lsrs	r3, r3, #16
 800338a:	b29a      	uxth	r2, r3
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) > 0U) ? ENABLE : DISABLE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b00      	cmp	r3, #0
 800339c:	bf14      	ite	ne
 800339e:	2301      	movne	r3, #1
 80033a0:	2300      	moveq	r3, #0
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 1) > 0U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	bf14      	ite	ne
 80033ba:	2301      	movne	r3, #1
 80033bc:	2300      	moveq	r3, #0
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 1) > 0U)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e00b      	b.n	8003402 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033f0:	2b10      	cmp	r3, #16
 80033f2:	d105      	bne.n	8003400 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80033f4:	6839      	ldr	r1, [r7, #0]
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f884 	bl	8003504 <ETH_SetMACConfig>

    return HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	e000      	b.n	8003402 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
  }
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f023 031c 	bic.w	r3, r3, #28
 8003422:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003424:	f001 fea0 	bl	8005168 <HAL_RCC_GetHCLKFreq>
 8003428:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	4a1d      	ldr	r2, [pc, #116]	; (80034a4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d908      	bls.n	8003444 <HAL_ETH_SetMDIOClockRange+0x38>
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	4a1c      	ldr	r2, [pc, #112]	; (80034a8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d804      	bhi.n	8003444 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f043 0308 	orr.w	r3, r3, #8
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	e027      	b.n	8003494 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4a18      	ldr	r2, [pc, #96]	; (80034a8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d908      	bls.n	800345e <HAL_ETH_SetMDIOClockRange+0x52>
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4a17      	ldr	r2, [pc, #92]	; (80034ac <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d204      	bcs.n	800345e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f043 030c 	orr.w	r3, r3, #12
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	e01a      	b.n	8003494 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	4a12      	ldr	r2, [pc, #72]	; (80034ac <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d303      	bcc.n	800346e <HAL_ETH_SetMDIOClockRange+0x62>
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	4a11      	ldr	r2, [pc, #68]	; (80034b0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d911      	bls.n	8003492 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	4a0f      	ldr	r2, [pc, #60]	; (80034b0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d908      	bls.n	8003488 <HAL_ETH_SetMDIOClockRange+0x7c>
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4a0e      	ldr	r2, [pc, #56]	; (80034b4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d804      	bhi.n	8003488 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f043 0304 	orr.w	r3, r3, #4
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	e005      	b.n	8003494 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f043 0310 	orr.w	r3, r3, #16
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	e000      	b.n	8003494 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003492:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	611a      	str	r2, [r3, #16]
}
 800349c:	bf00      	nop
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	01312cff 	.word	0x01312cff
 80034a8:	02160ebf 	.word	0x02160ebf
 80034ac:	03938700 	.word	0x03938700
 80034b0:	05f5e0ff 	.word	0x05f5e0ff
 80034b4:	08f0d17f 	.word	0x08f0d17f

080034b8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6812      	ldr	r2, [r2, #0]
 80034d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80034da:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034e8:	2001      	movs	r0, #1
 80034ea:	f7fe ff1f 	bl	800232c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80034f8:	6193      	str	r3, [r2, #24]
}
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4b47      	ldr	r3, [pc, #284]	; (8003638 <ETH_SetMACConfig+0x134>)
 800351a:	4013      	ands	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	7c1b      	ldrb	r3, [r3, #16]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d102      	bne.n	800352c <ETH_SetMACConfig+0x28>
 8003526:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800352a:	e000      	b.n	800352e <ETH_SetMACConfig+0x2a>
 800352c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	7c5b      	ldrb	r3, [r3, #17]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d102      	bne.n	800353c <ETH_SetMACConfig+0x38>
 8003536:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800353a:	e000      	b.n	800353e <ETH_SetMACConfig+0x3a>
 800353c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800353e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003544:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	7fdb      	ldrb	r3, [r3, #31]
 800354a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800354c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003552:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	7f92      	ldrb	r2, [r2, #30]
 8003558:	2a00      	cmp	r2, #0
 800355a:	d102      	bne.n	8003562 <ETH_SetMACConfig+0x5e>
 800355c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003560:	e000      	b.n	8003564 <ETH_SetMACConfig+0x60>
 8003562:	2200      	movs	r2, #0
                        macconf->Speed |
 8003564:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	7f1b      	ldrb	r3, [r3, #28]
 800356a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800356c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003572:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	791b      	ldrb	r3, [r3, #4]
 8003578:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800357a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003582:	2a00      	cmp	r2, #0
 8003584:	d102      	bne.n	800358c <ETH_SetMACConfig+0x88>
 8003586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800358a:	e000      	b.n	800358e <ETH_SetMACConfig+0x8a>
 800358c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800358e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	7bdb      	ldrb	r3, [r3, #15]
 8003594:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003596:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800359c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035a4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80035a6:	4313      	orrs	r3, r2
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80035be:	2001      	movs	r0, #1
 80035c0:	f7fe feb4 	bl	800232c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80035da:	4013      	ands	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035e2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80035ea:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 80035f0:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 80035f8:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8003600:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003608:	4313      	orrs	r3, r2
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4313      	orrs	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003620:	2001      	movs	r0, #1
 8003622:	f7fe fe83 	bl	800232c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	619a      	str	r2, [r3, #24]
}
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	ff20810f 	.word	0xff20810f

0800363c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	4b3d      	ldr	r3, [pc, #244]	; (800374c <ETH_SetDMAConfig+0x110>)
 8003656:	4013      	ands	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	7b1b      	ldrb	r3, [r3, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d102      	bne.n	8003668 <ETH_SetDMAConfig+0x2c>
 8003662:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003666:	e000      	b.n	800366a <ETH_SetDMAConfig+0x2e>
 8003668:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	7b5b      	ldrb	r3, [r3, #13]
 800366e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003670:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	7f52      	ldrb	r2, [r2, #29]
 8003676:	2a00      	cmp	r2, #0
 8003678:	d102      	bne.n	8003680 <ETH_SetDMAConfig+0x44>
 800367a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800367e:	e000      	b.n	8003682 <ETH_SetDMAConfig+0x46>
 8003680:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003682:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	7b9b      	ldrb	r3, [r3, #14]
 8003688:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800368a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003690:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	7f1b      	ldrb	r3, [r3, #28]
 8003696:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003698:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	7f9b      	ldrb	r3, [r3, #30]
 800369e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80036a0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80036a6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036ae:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80036b0:	4313      	orrs	r3, r2
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036c0:	461a      	mov	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80036d2:	2001      	movs	r0, #1
 80036d4:	f7fe fe2a 	bl	800232c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036e0:	461a      	mov	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	791b      	ldrb	r3, [r3, #4]
 80036ea:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80036f0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80036f6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80036fc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003704:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003706:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800370e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003714:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6812      	ldr	r2, [r2, #0]
 800371a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800371e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003722:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003730:	2001      	movs	r0, #1
 8003732:	f7fe fdfb 	bl	800232c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800373e:	461a      	mov	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6013      	str	r3, [r2, #0]
}
 8003744:	bf00      	nop
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	f8de3f23 	.word	0xf8de3f23

08003750 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b0a6      	sub	sp, #152	; 0x98
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003758:	2301      	movs	r3, #1
 800375a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800375e:	2301      	movs	r3, #1
 8003760:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003764:	2300      	movs	r3, #0
 8003766:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003768:	2300      	movs	r3, #0
 800376a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800376e:	2301      	movs	r3, #1
 8003770:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003774:	2300      	movs	r3, #0
 8003776:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800377a:	2301      	movs	r3, #1
 800377c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003780:	2300      	movs	r3, #0
 8003782:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003786:	2300      	movs	r3, #0
 8003788:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800378c:	2300      	movs	r3, #0
 800378e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003790:	2300      	movs	r3, #0
 8003792:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003796:	2300      	movs	r3, #0
 8003798:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800379a:	2300      	movs	r3, #0
 800379c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80037a0:	2300      	movs	r3, #0
 80037a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80037a6:	2300      	movs	r3, #0
 80037a8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80037ac:	2300      	movs	r3, #0
 80037ae:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80037b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037b6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80037b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80037be:	2300      	movs	r3, #0
 80037c0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80037c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037c8:	4619      	mov	r1, r3
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7ff fe9a 	bl	8003504 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80037d0:	2301      	movs	r3, #1
 80037d2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80037d4:	2301      	movs	r3, #1
 80037d6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80037de:	2301      	movs	r3, #1
 80037e0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80037e6:	2300      	movs	r3, #0
 80037e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80037ec:	2300      	movs	r3, #0
 80037ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80037f2:	2300      	movs	r3, #0
 80037f4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80037fc:	2301      	movs	r3, #1
 80037fe:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003800:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003804:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003806:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800380a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800380c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003810:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003812:	2301      	movs	r3, #1
 8003814:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003818:	2300      	movs	r3, #0
 800381a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800381c:	2300      	movs	r3, #0
 800381e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003820:	f107 0308 	add.w	r3, r7, #8
 8003824:	4619      	mov	r1, r3
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7ff ff08 	bl	800363c <ETH_SetDMAConfig>
}
 800382c:	bf00      	nop
 800382e:	3798      	adds	r7, #152	; 0x98
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3305      	adds	r3, #5
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	021b      	lsls	r3, r3, #8
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	3204      	adds	r2, #4
 800384c:	7812      	ldrb	r2, [r2, #0]
 800384e:	4313      	orrs	r3, r2
 8003850:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	4b11      	ldr	r3, [pc, #68]	; (800389c <ETH_MACAddressConfig+0x68>)
 8003856:	4413      	add	r3, r2
 8003858:	461a      	mov	r2, r3
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3303      	adds	r3, #3
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	061a      	lsls	r2, r3, #24
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3302      	adds	r3, #2
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	041b      	lsls	r3, r3, #16
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3301      	adds	r3, #1
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	4313      	orrs	r3, r2
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	7812      	ldrb	r2, [r2, #0]
 800387e:	4313      	orrs	r3, r2
 8003880:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <ETH_MACAddressConfig+0x6c>)
 8003886:	4413      	add	r3, r2
 8003888:	461a      	mov	r2, r3
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	6013      	str	r3, [r2, #0]
}
 800388e:	bf00      	nop
 8003890:	371c      	adds	r7, #28
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40028040 	.word	0x40028040
 80038a0:	40028044 	.word	0x40028044

080038a4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	e03e      	b.n	8003930 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68d9      	ldr	r1, [r3, #12]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	440b      	add	r3, r1
 80038c2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2200      	movs	r2, #0
 80038ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2200      	movs	r2, #0
 80038d4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2200      	movs	r2, #0
 80038da:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	3206      	adds	r2, #6
 80038e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d80c      	bhi.n	8003914 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68d9      	ldr	r1, [r3, #12]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	440b      	add	r3, r1
 800390c:	461a      	mov	r2, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	60da      	str	r2, [r3, #12]
 8003912:	e004      	b.n	800391e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	461a      	mov	r2, r3
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	3301      	adds	r3, #1
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2b03      	cmp	r3, #3
 8003934:	d9bd      	bls.n	80038b2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68da      	ldr	r2, [r3, #12]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003948:	611a      	str	r2, [r3, #16]
}
 800394a:	bf00      	nop
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003956:	b480      	push	{r7}
 8003958:	b085      	sub	sp, #20
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	e046      	b.n	80039f2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6919      	ldr	r1, [r3, #16]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	440b      	add	r3, r1
 8003974:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2200      	movs	r2, #0
 8003980:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2200      	movs	r2, #0
 8003986:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2200      	movs	r2, #0
 800398c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2200      	movs	r2, #0
 8003992:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2200      	movs	r2, #0
 8003998:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80039a0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80039a8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80039b6:	68b9      	ldr	r1, [r7, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	3212      	adds	r2, #18
 80039be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d80c      	bhi.n	80039e2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6919      	ldr	r1, [r3, #16]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	440b      	add	r3, r1
 80039da:	461a      	mov	r2, r3
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	60da      	str	r2, [r3, #12]
 80039e0:	e004      	b.n	80039ec <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	461a      	mov	r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	3301      	adds	r3, #1
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d9b5      	bls.n	8003964 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691a      	ldr	r2, [r3, #16]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a22:	60da      	str	r2, [r3, #12]
}
 8003a24:	bf00      	nop
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b08d      	sub	sp, #52	; 0x34
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	3318      	adds	r3, #24
 8003a40:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a5a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a72:	d007      	beq.n	8003a84 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a78:	3304      	adds	r3, #4
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003a84:	2302      	movs	r3, #2
 8003a86:	e103      	b.n	8003c90 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003aa0:	f023 031f 	bic.w	r3, r3, #31
 8003aa4:	69fa      	ldr	r2, [r7, #28]
 8003aa6:	6852      	ldr	r2, [r2, #4]
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d008      	beq.n	8003acc <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0320 	and.w	r3, r3, #32
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d005      	beq.n	8003b02 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8003b0e:	f3bf 8f5f 	dmb	sy
}
 8003b12:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003b20:	e084      	b.n	8003c2c <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d006      	beq.n	8003b42 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	e005      	b.n	8003b4e <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b50:	3301      	adds	r3, #1
 8003b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d902      	bls.n	8003b60 <ETH_Prepare_Tx_Descriptors+0x130>
 8003b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5c:	3b04      	subs	r3, #4
 8003b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b68:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b82:	d007      	beq.n	8003b94 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b88:	3304      	adds	r3, #4
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d029      	beq.n	8003be8 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ba0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ba6:	e019      	b.n	8003bdc <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8003ba8:	f3bf 8f5f 	dmb	sy
}
 8003bac:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d902      	bls.n	8003bcc <ETH_Prepare_Tx_Descriptors+0x19c>
 8003bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc8:	3b04      	subs	r3, #4
 8003bca:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bd4:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8003bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd8:	3301      	adds	r3, #1
 8003bda:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d3e1      	bcc.n	8003ba8 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8003be4:	2302      	movs	r3, #2
 8003be6:	e053      	b.n	8003c90 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	3301      	adds	r3, #1
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003c06:	f023 031f 	bic.w	r3, r3, #31
 8003c0a:	69fa      	ldr	r2, [r7, #28]
 8003c0c:	6852      	ldr	r2, [r2, #4]
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	3301      	adds	r3, #1
 8003c18:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8003c1a:	f3bf 8f5f 	dmb	sy
}
 8003c1e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f47f af76 	bne.w	8003b22 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d006      	beq.n	8003c4a <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	e005      	b.n	8003c56 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c66:	6979      	ldr	r1, [r7, #20]
 8003c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c76:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c78:	b672      	cpsid	i
}
 8003c7a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	4413      	add	r3, r2
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003c8a:	b662      	cpsie	i
}
 8003c8c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3734      	adds	r7, #52	; 0x34
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b089      	sub	sp, #36	; 0x24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
 8003cb6:	e16b      	b.n	8003f90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cb8:	2201      	movs	r2, #1
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	f040 815a 	bne.w	8003f8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 0303 	and.w	r3, r3, #3
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d005      	beq.n	8003cee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d130      	bne.n	8003d50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4013      	ands	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d24:	2201      	movs	r2, #1
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	091b      	lsrs	r3, r3, #4
 8003d3a:	f003 0201 	and.w	r2, r3, #1
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 0303 	and.w	r3, r3, #3
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d017      	beq.n	8003d8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	2203      	movs	r2, #3
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4013      	ands	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d123      	bne.n	8003de0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	08da      	lsrs	r2, r3, #3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3208      	adds	r2, #8
 8003da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	220f      	movs	r2, #15
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43db      	mvns	r3, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4013      	ands	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	691a      	ldr	r2, [r3, #16]
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	08da      	lsrs	r2, r3, #3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3208      	adds	r2, #8
 8003dda:	69b9      	ldr	r1, [r7, #24]
 8003ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	2203      	movs	r2, #3
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	43db      	mvns	r3, r3
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4013      	ands	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 0203 	and.w	r2, r3, #3
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80b4 	beq.w	8003f8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	4b60      	ldr	r3, [pc, #384]	; (8003fa8 <HAL_GPIO_Init+0x30c>)
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	4a5f      	ldr	r2, [pc, #380]	; (8003fa8 <HAL_GPIO_Init+0x30c>)
 8003e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e30:	6453      	str	r3, [r2, #68]	; 0x44
 8003e32:	4b5d      	ldr	r3, [pc, #372]	; (8003fa8 <HAL_GPIO_Init+0x30c>)
 8003e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e3e:	4a5b      	ldr	r2, [pc, #364]	; (8003fac <HAL_GPIO_Init+0x310>)
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	089b      	lsrs	r3, r3, #2
 8003e44:	3302      	adds	r3, #2
 8003e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	220f      	movs	r2, #15
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a52      	ldr	r2, [pc, #328]	; (8003fb0 <HAL_GPIO_Init+0x314>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d02b      	beq.n	8003ec2 <HAL_GPIO_Init+0x226>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a51      	ldr	r2, [pc, #324]	; (8003fb4 <HAL_GPIO_Init+0x318>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d025      	beq.n	8003ebe <HAL_GPIO_Init+0x222>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a50      	ldr	r2, [pc, #320]	; (8003fb8 <HAL_GPIO_Init+0x31c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d01f      	beq.n	8003eba <HAL_GPIO_Init+0x21e>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a4f      	ldr	r2, [pc, #316]	; (8003fbc <HAL_GPIO_Init+0x320>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d019      	beq.n	8003eb6 <HAL_GPIO_Init+0x21a>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a4e      	ldr	r2, [pc, #312]	; (8003fc0 <HAL_GPIO_Init+0x324>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d013      	beq.n	8003eb2 <HAL_GPIO_Init+0x216>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a4d      	ldr	r2, [pc, #308]	; (8003fc4 <HAL_GPIO_Init+0x328>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d00d      	beq.n	8003eae <HAL_GPIO_Init+0x212>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a4c      	ldr	r2, [pc, #304]	; (8003fc8 <HAL_GPIO_Init+0x32c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d007      	beq.n	8003eaa <HAL_GPIO_Init+0x20e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a4b      	ldr	r2, [pc, #300]	; (8003fcc <HAL_GPIO_Init+0x330>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d101      	bne.n	8003ea6 <HAL_GPIO_Init+0x20a>
 8003ea2:	2307      	movs	r3, #7
 8003ea4:	e00e      	b.n	8003ec4 <HAL_GPIO_Init+0x228>
 8003ea6:	2308      	movs	r3, #8
 8003ea8:	e00c      	b.n	8003ec4 <HAL_GPIO_Init+0x228>
 8003eaa:	2306      	movs	r3, #6
 8003eac:	e00a      	b.n	8003ec4 <HAL_GPIO_Init+0x228>
 8003eae:	2305      	movs	r3, #5
 8003eb0:	e008      	b.n	8003ec4 <HAL_GPIO_Init+0x228>
 8003eb2:	2304      	movs	r3, #4
 8003eb4:	e006      	b.n	8003ec4 <HAL_GPIO_Init+0x228>
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e004      	b.n	8003ec4 <HAL_GPIO_Init+0x228>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e002      	b.n	8003ec4 <HAL_GPIO_Init+0x228>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <HAL_GPIO_Init+0x228>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	f002 0203 	and.w	r2, r2, #3
 8003eca:	0092      	lsls	r2, r2, #2
 8003ecc:	4093      	lsls	r3, r2
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ed4:	4935      	ldr	r1, [pc, #212]	; (8003fac <HAL_GPIO_Init+0x310>)
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	089b      	lsrs	r3, r3, #2
 8003eda:	3302      	adds	r3, #2
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ee2:	4b3b      	ldr	r3, [pc, #236]	; (8003fd0 <HAL_GPIO_Init+0x334>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	43db      	mvns	r3, r3
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f06:	4a32      	ldr	r2, [pc, #200]	; (8003fd0 <HAL_GPIO_Init+0x334>)
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f0c:	4b30      	ldr	r3, [pc, #192]	; (8003fd0 <HAL_GPIO_Init+0x334>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	43db      	mvns	r3, r3
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f30:	4a27      	ldr	r2, [pc, #156]	; (8003fd0 <HAL_GPIO_Init+0x334>)
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f36:	4b26      	ldr	r3, [pc, #152]	; (8003fd0 <HAL_GPIO_Init+0x334>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4013      	ands	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f5a:	4a1d      	ldr	r2, [pc, #116]	; (8003fd0 <HAL_GPIO_Init+0x334>)
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f60:	4b1b      	ldr	r3, [pc, #108]	; (8003fd0 <HAL_GPIO_Init+0x334>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f84:	4a12      	ldr	r2, [pc, #72]	; (8003fd0 <HAL_GPIO_Init+0x334>)
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	61fb      	str	r3, [r7, #28]
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	2b0f      	cmp	r3, #15
 8003f94:	f67f ae90 	bls.w	8003cb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f98:	bf00      	nop
 8003f9a:	bf00      	nop
 8003f9c:	3724      	adds	r7, #36	; 0x24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	40013800 	.word	0x40013800
 8003fb0:	40020000 	.word	0x40020000
 8003fb4:	40020400 	.word	0x40020400
 8003fb8:	40020800 	.word	0x40020800
 8003fbc:	40020c00 	.word	0x40020c00
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	40021400 	.word	0x40021400
 8003fc8:	40021800 	.word	0x40021800
 8003fcc:	40021c00 	.word	0x40021c00
 8003fd0:	40013c00 	.word	0x40013c00

08003fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	807b      	strh	r3, [r7, #2]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fe4:	787b      	ldrb	r3, [r7, #1]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fea:	887a      	ldrh	r2, [r7, #2]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ff0:	e003      	b.n	8003ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ff2:	887b      	ldrh	r3, [r7, #2]
 8003ff4:	041a      	lsls	r2, r3, #16
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	619a      	str	r2, [r3, #24]
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
	...

08004008 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e12b      	b.n	8004272 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d106      	bne.n	8004034 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7fd fbf2 	bl	8001818 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2224      	movs	r2, #36	; 0x24
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0201 	bic.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800405a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800406a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800406c:	f001 f888 	bl	8005180 <HAL_RCC_GetPCLK1Freq>
 8004070:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	4a81      	ldr	r2, [pc, #516]	; (800427c <HAL_I2C_Init+0x274>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d807      	bhi.n	800408c <HAL_I2C_Init+0x84>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4a80      	ldr	r2, [pc, #512]	; (8004280 <HAL_I2C_Init+0x278>)
 8004080:	4293      	cmp	r3, r2
 8004082:	bf94      	ite	ls
 8004084:	2301      	movls	r3, #1
 8004086:	2300      	movhi	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	e006      	b.n	800409a <HAL_I2C_Init+0x92>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4a7d      	ldr	r2, [pc, #500]	; (8004284 <HAL_I2C_Init+0x27c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	bf94      	ite	ls
 8004094:	2301      	movls	r3, #1
 8004096:	2300      	movhi	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e0e7      	b.n	8004272 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	4a78      	ldr	r2, [pc, #480]	; (8004288 <HAL_I2C_Init+0x280>)
 80040a6:	fba2 2303 	umull	r2, r3, r2, r3
 80040aa:	0c9b      	lsrs	r3, r3, #18
 80040ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	430a      	orrs	r2, r1
 80040c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	4a6a      	ldr	r2, [pc, #424]	; (800427c <HAL_I2C_Init+0x274>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d802      	bhi.n	80040dc <HAL_I2C_Init+0xd4>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	3301      	adds	r3, #1
 80040da:	e009      	b.n	80040f0 <HAL_I2C_Init+0xe8>
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040e2:	fb02 f303 	mul.w	r3, r2, r3
 80040e6:	4a69      	ldr	r2, [pc, #420]	; (800428c <HAL_I2C_Init+0x284>)
 80040e8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ec:	099b      	lsrs	r3, r3, #6
 80040ee:	3301      	adds	r3, #1
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	430b      	orrs	r3, r1
 80040f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004102:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	495c      	ldr	r1, [pc, #368]	; (800427c <HAL_I2C_Init+0x274>)
 800410c:	428b      	cmp	r3, r1
 800410e:	d819      	bhi.n	8004144 <HAL_I2C_Init+0x13c>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	1e59      	subs	r1, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	fbb1 f3f3 	udiv	r3, r1, r3
 800411e:	1c59      	adds	r1, r3, #1
 8004120:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004124:	400b      	ands	r3, r1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <HAL_I2C_Init+0x138>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1e59      	subs	r1, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	fbb1 f3f3 	udiv	r3, r1, r3
 8004138:	3301      	adds	r3, #1
 800413a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800413e:	e051      	b.n	80041e4 <HAL_I2C_Init+0x1dc>
 8004140:	2304      	movs	r3, #4
 8004142:	e04f      	b.n	80041e4 <HAL_I2C_Init+0x1dc>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d111      	bne.n	8004170 <HAL_I2C_Init+0x168>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	1e58      	subs	r0, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	440b      	add	r3, r1
 800415a:	fbb0 f3f3 	udiv	r3, r0, r3
 800415e:	3301      	adds	r3, #1
 8004160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004164:	2b00      	cmp	r3, #0
 8004166:	bf0c      	ite	eq
 8004168:	2301      	moveq	r3, #1
 800416a:	2300      	movne	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	e012      	b.n	8004196 <HAL_I2C_Init+0x18e>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	1e58      	subs	r0, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6859      	ldr	r1, [r3, #4]
 8004178:	460b      	mov	r3, r1
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	0099      	lsls	r1, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	fbb0 f3f3 	udiv	r3, r0, r3
 8004186:	3301      	adds	r3, #1
 8004188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800418c:	2b00      	cmp	r3, #0
 800418e:	bf0c      	ite	eq
 8004190:	2301      	moveq	r3, #1
 8004192:	2300      	movne	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_I2C_Init+0x196>
 800419a:	2301      	movs	r3, #1
 800419c:	e022      	b.n	80041e4 <HAL_I2C_Init+0x1dc>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10e      	bne.n	80041c4 <HAL_I2C_Init+0x1bc>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1e58      	subs	r0, r3, #1
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6859      	ldr	r1, [r3, #4]
 80041ae:	460b      	mov	r3, r1
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	440b      	add	r3, r1
 80041b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80041b8:	3301      	adds	r3, #1
 80041ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041c2:	e00f      	b.n	80041e4 <HAL_I2C_Init+0x1dc>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	1e58      	subs	r0, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6859      	ldr	r1, [r3, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	0099      	lsls	r1, r3, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041da:	3301      	adds	r3, #1
 80041dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	6809      	ldr	r1, [r1, #0]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69da      	ldr	r2, [r3, #28]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004212:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6911      	ldr	r1, [r2, #16]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	68d2      	ldr	r2, [r2, #12]
 800421e:	4311      	orrs	r1, r2
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	430b      	orrs	r3, r1
 8004226:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695a      	ldr	r2, [r3, #20]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2220      	movs	r2, #32
 800425e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	000186a0 	.word	0x000186a0
 8004280:	001e847f 	.word	0x001e847f
 8004284:	003d08ff 	.word	0x003d08ff
 8004288:	431bde83 	.word	0x431bde83
 800428c:	10624dd3 	.word	0x10624dd3

08004290 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af02      	add	r7, sp, #8
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	607a      	str	r2, [r7, #4]
 800429a:	461a      	mov	r2, r3
 800429c:	460b      	mov	r3, r1
 800429e:	817b      	strh	r3, [r7, #10]
 80042a0:	4613      	mov	r3, r2
 80042a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042a4:	f7fe f836 	bl	8002314 <HAL_GetTick>
 80042a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b20      	cmp	r3, #32
 80042b4:	f040 80e0 	bne.w	8004478 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	2319      	movs	r3, #25
 80042be:	2201      	movs	r2, #1
 80042c0:	4970      	ldr	r1, [pc, #448]	; (8004484 <HAL_I2C_Master_Transmit+0x1f4>)
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 f964 	bl	8004590 <I2C_WaitOnFlagUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80042ce:	2302      	movs	r3, #2
 80042d0:	e0d3      	b.n	800447a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_I2C_Master_Transmit+0x50>
 80042dc:	2302      	movs	r3, #2
 80042de:	e0cc      	b.n	800447a <HAL_I2C_Master_Transmit+0x1ea>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d007      	beq.n	8004306 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0201 	orr.w	r2, r2, #1
 8004304:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004314:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2221      	movs	r2, #33	; 0x21
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2210      	movs	r2, #16
 8004322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	893a      	ldrh	r2, [r7, #8]
 8004336:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4a50      	ldr	r2, [pc, #320]	; (8004488 <HAL_I2C_Master_Transmit+0x1f8>)
 8004346:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004348:	8979      	ldrh	r1, [r7, #10]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	6a3a      	ldr	r2, [r7, #32]
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f89c 	bl	800448c <I2C_MasterRequestWrite>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e08d      	b.n	800447a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800435e:	2300      	movs	r3, #0
 8004360:	613b      	str	r3, [r7, #16]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004374:	e066      	b.n	8004444 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	6a39      	ldr	r1, [r7, #32]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 f9de 	bl	800473c <I2C_WaitOnTXEFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00d      	beq.n	80043a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	2b04      	cmp	r3, #4
 800438c:	d107      	bne.n	800439e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800439c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e06b      	b.n	800447a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	781a      	ldrb	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	3b01      	subs	r3, #1
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d11b      	bne.n	8004418 <HAL_I2C_Master_Transmit+0x188>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d017      	beq.n	8004418 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	781a      	ldrb	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	1c5a      	adds	r2, r3, #1
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004402:	b29b      	uxth	r3, r3
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	6a39      	ldr	r1, [r7, #32]
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 f9ce 	bl	80047be <I2C_WaitOnBTFFlagUntilTimeout>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00d      	beq.n	8004444 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	2b04      	cmp	r3, #4
 800442e:	d107      	bne.n	8004440 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800443e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e01a      	b.n	800447a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004448:	2b00      	cmp	r3, #0
 800444a:	d194      	bne.n	8004376 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800445a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	e000      	b.n	800447a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004478:	2302      	movs	r3, #2
  }
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	00100002 	.word	0x00100002
 8004488:	ffff0000 	.word	0xffff0000

0800448c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b088      	sub	sp, #32
 8004490:	af02      	add	r7, sp, #8
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	607a      	str	r2, [r7, #4]
 8004496:	603b      	str	r3, [r7, #0]
 8004498:	460b      	mov	r3, r1
 800449a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d006      	beq.n	80044b6 <I2C_MasterRequestWrite+0x2a>
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d003      	beq.n	80044b6 <I2C_MasterRequestWrite+0x2a>
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044b4:	d108      	bne.n	80044c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	e00b      	b.n	80044e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044cc:	2b12      	cmp	r3, #18
 80044ce:	d107      	bne.n	80044e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f84f 	bl	8004590 <I2C_WaitOnFlagUntilTimeout>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00d      	beq.n	8004514 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004506:	d103      	bne.n	8004510 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800450e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e035      	b.n	8004580 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800451c:	d108      	bne.n	8004530 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800451e:	897b      	ldrh	r3, [r7, #10]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	461a      	mov	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800452c:	611a      	str	r2, [r3, #16]
 800452e:	e01b      	b.n	8004568 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004530:	897b      	ldrh	r3, [r7, #10]
 8004532:	11db      	asrs	r3, r3, #7
 8004534:	b2db      	uxtb	r3, r3
 8004536:	f003 0306 	and.w	r3, r3, #6
 800453a:	b2db      	uxtb	r3, r3
 800453c:	f063 030f 	orn	r3, r3, #15
 8004540:	b2da      	uxtb	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	490e      	ldr	r1, [pc, #56]	; (8004588 <I2C_MasterRequestWrite+0xfc>)
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f875 	bl	800463e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e010      	b.n	8004580 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800455e:	897b      	ldrh	r3, [r7, #10]
 8004560:	b2da      	uxtb	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	4907      	ldr	r1, [pc, #28]	; (800458c <I2C_MasterRequestWrite+0x100>)
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 f865 	bl	800463e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e000      	b.n	8004580 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	00010008 	.word	0x00010008
 800458c:	00010002 	.word	0x00010002

08004590 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	4613      	mov	r3, r2
 800459e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045a0:	e025      	b.n	80045ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a8:	d021      	beq.n	80045ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045aa:	f7fd feb3 	bl	8002314 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d302      	bcc.n	80045c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d116      	bne.n	80045ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	f043 0220 	orr.w	r2, r3, #32
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e023      	b.n	8004636 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	0c1b      	lsrs	r3, r3, #16
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d10d      	bne.n	8004614 <I2C_WaitOnFlagUntilTimeout+0x84>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	43da      	mvns	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4013      	ands	r3, r2
 8004604:	b29b      	uxth	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	bf0c      	ite	eq
 800460a:	2301      	moveq	r3, #1
 800460c:	2300      	movne	r3, #0
 800460e:	b2db      	uxtb	r3, r3
 8004610:	461a      	mov	r2, r3
 8004612:	e00c      	b.n	800462e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	43da      	mvns	r2, r3
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	4013      	ands	r3, r2
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	bf0c      	ite	eq
 8004626:	2301      	moveq	r3, #1
 8004628:	2300      	movne	r3, #0
 800462a:	b2db      	uxtb	r3, r3
 800462c:	461a      	mov	r2, r3
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	429a      	cmp	r2, r3
 8004632:	d0b6      	beq.n	80045a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b084      	sub	sp, #16
 8004642:	af00      	add	r7, sp, #0
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	607a      	str	r2, [r7, #4]
 800464a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800464c:	e051      	b.n	80046f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800465c:	d123      	bne.n	80046a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800466c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004676:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2220      	movs	r2, #32
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f043 0204 	orr.w	r2, r3, #4
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e046      	b.n	8004734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ac:	d021      	beq.n	80046f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ae:	f7fd fe31 	bl	8002314 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d302      	bcc.n	80046c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d116      	bne.n	80046f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	f043 0220 	orr.w	r2, r3, #32
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e020      	b.n	8004734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	0c1b      	lsrs	r3, r3, #16
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d10c      	bne.n	8004716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	43da      	mvns	r2, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	4013      	ands	r3, r2
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	bf14      	ite	ne
 800470e:	2301      	movne	r3, #1
 8004710:	2300      	moveq	r3, #0
 8004712:	b2db      	uxtb	r3, r3
 8004714:	e00b      	b.n	800472e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	43da      	mvns	r2, r3
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	4013      	ands	r3, r2
 8004722:	b29b      	uxth	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	bf14      	ite	ne
 8004728:	2301      	movne	r3, #1
 800472a:	2300      	moveq	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d18d      	bne.n	800464e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004748:	e02d      	b.n	80047a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 f878 	bl	8004840 <I2C_IsAcknowledgeFailed>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e02d      	b.n	80047b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004760:	d021      	beq.n	80047a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004762:	f7fd fdd7 	bl	8002314 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	429a      	cmp	r2, r3
 8004770:	d302      	bcc.n	8004778 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d116      	bne.n	80047a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2220      	movs	r2, #32
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	f043 0220 	orr.w	r2, r3, #32
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e007      	b.n	80047b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b0:	2b80      	cmp	r3, #128	; 0x80
 80047b2:	d1ca      	bne.n	800474a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b084      	sub	sp, #16
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	60f8      	str	r0, [r7, #12]
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047ca:	e02d      	b.n	8004828 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 f837 	bl	8004840 <I2C_IsAcknowledgeFailed>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e02d      	b.n	8004838 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e2:	d021      	beq.n	8004828 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e4:	f7fd fd96 	bl	8002314 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d302      	bcc.n	80047fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d116      	bne.n	8004828 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	f043 0220 	orr.w	r2, r3, #32
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e007      	b.n	8004838 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	f003 0304 	and.w	r3, r3, #4
 8004832:	2b04      	cmp	r3, #4
 8004834:	d1ca      	bne.n	80047cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004856:	d11b      	bne.n	8004890 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004860:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2220      	movs	r2, #32
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487c:	f043 0204 	orr.w	r2, r3, #4
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e000      	b.n	8004892 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
	...

080048a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e267      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d075      	beq.n	80049aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048be:	4b88      	ldr	r3, [pc, #544]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 030c 	and.w	r3, r3, #12
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d00c      	beq.n	80048e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ca:	4b85      	ldr	r3, [pc, #532]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d112      	bne.n	80048fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048d6:	4b82      	ldr	r3, [pc, #520]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048e2:	d10b      	bne.n	80048fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e4:	4b7e      	ldr	r3, [pc, #504]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d05b      	beq.n	80049a8 <HAL_RCC_OscConfig+0x108>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d157      	bne.n	80049a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e242      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004904:	d106      	bne.n	8004914 <HAL_RCC_OscConfig+0x74>
 8004906:	4b76      	ldr	r3, [pc, #472]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a75      	ldr	r2, [pc, #468]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 800490c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	e01d      	b.n	8004950 <HAL_RCC_OscConfig+0xb0>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800491c:	d10c      	bne.n	8004938 <HAL_RCC_OscConfig+0x98>
 800491e:	4b70      	ldr	r3, [pc, #448]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a6f      	ldr	r2, [pc, #444]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 8004924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004928:	6013      	str	r3, [r2, #0]
 800492a:	4b6d      	ldr	r3, [pc, #436]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a6c      	ldr	r2, [pc, #432]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 8004930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004934:	6013      	str	r3, [r2, #0]
 8004936:	e00b      	b.n	8004950 <HAL_RCC_OscConfig+0xb0>
 8004938:	4b69      	ldr	r3, [pc, #420]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a68      	ldr	r2, [pc, #416]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 800493e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004942:	6013      	str	r3, [r2, #0]
 8004944:	4b66      	ldr	r3, [pc, #408]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a65      	ldr	r2, [pc, #404]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 800494a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800494e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d013      	beq.n	8004980 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004958:	f7fd fcdc 	bl	8002314 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004960:	f7fd fcd8 	bl	8002314 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b64      	cmp	r3, #100	; 0x64
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e207      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004972:	4b5b      	ldr	r3, [pc, #364]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0f0      	beq.n	8004960 <HAL_RCC_OscConfig+0xc0>
 800497e:	e014      	b.n	80049aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004980:	f7fd fcc8 	bl	8002314 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004988:	f7fd fcc4 	bl	8002314 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b64      	cmp	r3, #100	; 0x64
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e1f3      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800499a:	4b51      	ldr	r3, [pc, #324]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f0      	bne.n	8004988 <HAL_RCC_OscConfig+0xe8>
 80049a6:	e000      	b.n	80049aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d063      	beq.n	8004a7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049b6:	4b4a      	ldr	r3, [pc, #296]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 030c 	and.w	r3, r3, #12
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00b      	beq.n	80049da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049c2:	4b47      	ldr	r3, [pc, #284]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d11c      	bne.n	8004a08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ce:	4b44      	ldr	r3, [pc, #272]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d116      	bne.n	8004a08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049da:	4b41      	ldr	r3, [pc, #260]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d005      	beq.n	80049f2 <HAL_RCC_OscConfig+0x152>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d001      	beq.n	80049f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e1c7      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049f2:	4b3b      	ldr	r3, [pc, #236]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	4937      	ldr	r1, [pc, #220]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a06:	e03a      	b.n	8004a7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d020      	beq.n	8004a52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a10:	4b34      	ldr	r3, [pc, #208]	; (8004ae4 <HAL_RCC_OscConfig+0x244>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a16:	f7fd fc7d 	bl	8002314 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a1e:	f7fd fc79 	bl	8002314 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e1a8      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a30:	4b2b      	ldr	r3, [pc, #172]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0f0      	beq.n	8004a1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a3c:	4b28      	ldr	r3, [pc, #160]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	4925      	ldr	r1, [pc, #148]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	600b      	str	r3, [r1, #0]
 8004a50:	e015      	b.n	8004a7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a52:	4b24      	ldr	r3, [pc, #144]	; (8004ae4 <HAL_RCC_OscConfig+0x244>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a58:	f7fd fc5c 	bl	8002314 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a60:	f7fd fc58 	bl	8002314 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e187      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a72:	4b1b      	ldr	r3, [pc, #108]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f0      	bne.n	8004a60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0308 	and.w	r3, r3, #8
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d036      	beq.n	8004af8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d016      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a92:	4b15      	ldr	r3, [pc, #84]	; (8004ae8 <HAL_RCC_OscConfig+0x248>)
 8004a94:	2201      	movs	r2, #1
 8004a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a98:	f7fd fc3c 	bl	8002314 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aa0:	f7fd fc38 	bl	8002314 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e167      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ab2:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <HAL_RCC_OscConfig+0x240>)
 8004ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x200>
 8004abe:	e01b      	b.n	8004af8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ac0:	4b09      	ldr	r3, [pc, #36]	; (8004ae8 <HAL_RCC_OscConfig+0x248>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ac6:	f7fd fc25 	bl	8002314 <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004acc:	e00e      	b.n	8004aec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ace:	f7fd fc21 	bl	8002314 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d907      	bls.n	8004aec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e150      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	42470000 	.word	0x42470000
 8004ae8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aec:	4b88      	ldr	r3, [pc, #544]	; (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1ea      	bne.n	8004ace <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 8097 	beq.w	8004c34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b06:	2300      	movs	r3, #0
 8004b08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b0a:	4b81      	ldr	r3, [pc, #516]	; (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10f      	bne.n	8004b36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b16:	2300      	movs	r3, #0
 8004b18:	60bb      	str	r3, [r7, #8]
 8004b1a:	4b7d      	ldr	r3, [pc, #500]	; (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	4a7c      	ldr	r2, [pc, #496]	; (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b24:	6413      	str	r3, [r2, #64]	; 0x40
 8004b26:	4b7a      	ldr	r3, [pc, #488]	; (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	60bb      	str	r3, [r7, #8]
 8004b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b32:	2301      	movs	r3, #1
 8004b34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b36:	4b77      	ldr	r3, [pc, #476]	; (8004d14 <HAL_RCC_OscConfig+0x474>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d118      	bne.n	8004b74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b42:	4b74      	ldr	r3, [pc, #464]	; (8004d14 <HAL_RCC_OscConfig+0x474>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a73      	ldr	r2, [pc, #460]	; (8004d14 <HAL_RCC_OscConfig+0x474>)
 8004b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b4e:	f7fd fbe1 	bl	8002314 <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b54:	e008      	b.n	8004b68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b56:	f7fd fbdd 	bl	8002314 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e10c      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b68:	4b6a      	ldr	r3, [pc, #424]	; (8004d14 <HAL_RCC_OscConfig+0x474>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0f0      	beq.n	8004b56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d106      	bne.n	8004b8a <HAL_RCC_OscConfig+0x2ea>
 8004b7c:	4b64      	ldr	r3, [pc, #400]	; (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b80:	4a63      	ldr	r2, [pc, #396]	; (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004b82:	f043 0301 	orr.w	r3, r3, #1
 8004b86:	6713      	str	r3, [r2, #112]	; 0x70
 8004b88:	e01c      	b.n	8004bc4 <HAL_RCC_OscConfig+0x324>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	2b05      	cmp	r3, #5
 8004b90:	d10c      	bne.n	8004bac <HAL_RCC_OscConfig+0x30c>
 8004b92:	4b5f      	ldr	r3, [pc, #380]	; (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b96:	4a5e      	ldr	r2, [pc, #376]	; (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004b98:	f043 0304 	orr.w	r3, r3, #4
 8004b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b9e:	4b5c      	ldr	r3, [pc, #368]	; (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba2:	4a5b      	ldr	r2, [pc, #364]	; (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004ba4:	f043 0301 	orr.w	r3, r3, #1
 8004ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8004baa:	e00b      	b.n	8004bc4 <HAL_RCC_OscConfig+0x324>
 8004bac:	4b58      	ldr	r3, [pc, #352]	; (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb0:	4a57      	ldr	r2, [pc, #348]	; (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004bb2:	f023 0301 	bic.w	r3, r3, #1
 8004bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb8:	4b55      	ldr	r3, [pc, #340]	; (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbc:	4a54      	ldr	r2, [pc, #336]	; (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004bbe:	f023 0304 	bic.w	r3, r3, #4
 8004bc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d015      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bcc:	f7fd fba2 	bl	8002314 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd2:	e00a      	b.n	8004bea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bd4:	f7fd fb9e 	bl	8002314 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e0cb      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bea:	4b49      	ldr	r3, [pc, #292]	; (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0ee      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x334>
 8004bf6:	e014      	b.n	8004c22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf8:	f7fd fb8c 	bl	8002314 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bfe:	e00a      	b.n	8004c16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c00:	f7fd fb88 	bl	8002314 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e0b5      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c16:	4b3e      	ldr	r3, [pc, #248]	; (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1ee      	bne.n	8004c00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c22:	7dfb      	ldrb	r3, [r7, #23]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d105      	bne.n	8004c34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c28:	4b39      	ldr	r3, [pc, #228]	; (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	4a38      	ldr	r2, [pc, #224]	; (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004c2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 80a1 	beq.w	8004d80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c3e:	4b34      	ldr	r3, [pc, #208]	; (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 030c 	and.w	r3, r3, #12
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d05c      	beq.n	8004d04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d141      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c52:	4b31      	ldr	r3, [pc, #196]	; (8004d18 <HAL_RCC_OscConfig+0x478>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c58:	f7fd fb5c 	bl	8002314 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c60:	f7fd fb58 	bl	8002314 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e087      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c72:	4b27      	ldr	r3, [pc, #156]	; (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1f0      	bne.n	8004c60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69da      	ldr	r2, [r3, #28]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	019b      	lsls	r3, r3, #6
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c94:	085b      	lsrs	r3, r3, #1
 8004c96:	3b01      	subs	r3, #1
 8004c98:	041b      	lsls	r3, r3, #16
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	061b      	lsls	r3, r3, #24
 8004ca2:	491b      	ldr	r1, [pc, #108]	; (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ca8:	4b1b      	ldr	r3, [pc, #108]	; (8004d18 <HAL_RCC_OscConfig+0x478>)
 8004caa:	2201      	movs	r2, #1
 8004cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cae:	f7fd fb31 	bl	8002314 <HAL_GetTick>
 8004cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cb6:	f7fd fb2d 	bl	8002314 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e05c      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc8:	4b11      	ldr	r3, [pc, #68]	; (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0f0      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x416>
 8004cd4:	e054      	b.n	8004d80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd6:	4b10      	ldr	r3, [pc, #64]	; (8004d18 <HAL_RCC_OscConfig+0x478>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cdc:	f7fd fb1a 	bl	8002314 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce4:	f7fd fb16 	bl	8002314 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e045      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf6:	4b06      	ldr	r3, [pc, #24]	; (8004d10 <HAL_RCC_OscConfig+0x470>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f0      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x444>
 8004d02:	e03d      	b.n	8004d80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d107      	bne.n	8004d1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e038      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
 8004d10:	40023800 	.word	0x40023800
 8004d14:	40007000 	.word	0x40007000
 8004d18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d1c:	4b1b      	ldr	r3, [pc, #108]	; (8004d8c <HAL_RCC_OscConfig+0x4ec>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d028      	beq.n	8004d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d121      	bne.n	8004d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d11a      	bne.n	8004d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d111      	bne.n	8004d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d62:	085b      	lsrs	r3, r3, #1
 8004d64:	3b01      	subs	r3, #1
 8004d66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d107      	bne.n	8004d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d001      	beq.n	8004d80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e000      	b.n	8004d82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	40023800 	.word	0x40023800

08004d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e0cc      	b.n	8004f3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004da4:	4b68      	ldr	r3, [pc, #416]	; (8004f48 <HAL_RCC_ClockConfig+0x1b8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d90c      	bls.n	8004dcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004db2:	4b65      	ldr	r3, [pc, #404]	; (8004f48 <HAL_RCC_ClockConfig+0x1b8>)
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dba:	4b63      	ldr	r3, [pc, #396]	; (8004f48 <HAL_RCC_ClockConfig+0x1b8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d001      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e0b8      	b.n	8004f3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d020      	beq.n	8004e1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d005      	beq.n	8004df0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004de4:	4b59      	ldr	r3, [pc, #356]	; (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	4a58      	ldr	r2, [pc, #352]	; (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004dea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0308 	and.w	r3, r3, #8
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d005      	beq.n	8004e08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dfc:	4b53      	ldr	r3, [pc, #332]	; (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	4a52      	ldr	r2, [pc, #328]	; (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004e02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e08:	4b50      	ldr	r3, [pc, #320]	; (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	494d      	ldr	r1, [pc, #308]	; (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d044      	beq.n	8004eb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d107      	bne.n	8004e3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e2e:	4b47      	ldr	r3, [pc, #284]	; (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d119      	bne.n	8004e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e07f      	b.n	8004f3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d003      	beq.n	8004e4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e4a:	2b03      	cmp	r3, #3
 8004e4c:	d107      	bne.n	8004e5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e4e:	4b3f      	ldr	r3, [pc, #252]	; (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d109      	bne.n	8004e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e06f      	b.n	8004f3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e5e:	4b3b      	ldr	r3, [pc, #236]	; (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e067      	b.n	8004f3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e6e:	4b37      	ldr	r3, [pc, #220]	; (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f023 0203 	bic.w	r2, r3, #3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	4934      	ldr	r1, [pc, #208]	; (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e80:	f7fd fa48 	bl	8002314 <HAL_GetTick>
 8004e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e86:	e00a      	b.n	8004e9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e88:	f7fd fa44 	bl	8002314 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e04f      	b.n	8004f3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9e:	4b2b      	ldr	r3, [pc, #172]	; (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 020c 	and.w	r2, r3, #12
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d1eb      	bne.n	8004e88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004eb0:	4b25      	ldr	r3, [pc, #148]	; (8004f48 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d20c      	bcs.n	8004ed8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ebe:	4b22      	ldr	r3, [pc, #136]	; (8004f48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec6:	4b20      	ldr	r3, [pc, #128]	; (8004f48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d001      	beq.n	8004ed8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e032      	b.n	8004f3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ee4:	4b19      	ldr	r3, [pc, #100]	; (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	4916      	ldr	r1, [pc, #88]	; (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d009      	beq.n	8004f16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f02:	4b12      	ldr	r3, [pc, #72]	; (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	490e      	ldr	r1, [pc, #56]	; (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f16:	f000 f821 	bl	8004f5c <HAL_RCC_GetSysClockFreq>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	4b0b      	ldr	r3, [pc, #44]	; (8004f4c <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	091b      	lsrs	r3, r3, #4
 8004f22:	f003 030f 	and.w	r3, r3, #15
 8004f26:	490a      	ldr	r1, [pc, #40]	; (8004f50 <HAL_RCC_ClockConfig+0x1c0>)
 8004f28:	5ccb      	ldrb	r3, [r1, r3]
 8004f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f2e:	4a09      	ldr	r2, [pc, #36]	; (8004f54 <HAL_RCC_ClockConfig+0x1c4>)
 8004f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f32:	4b09      	ldr	r3, [pc, #36]	; (8004f58 <HAL_RCC_ClockConfig+0x1c8>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fc febc 	bl	8001cb4 <HAL_InitTick>

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	40023c00 	.word	0x40023c00
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	08014848 	.word	0x08014848
 8004f54:	20000000 	.word	0x20000000
 8004f58:	20000004 	.word	0x20000004

08004f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f60:	b094      	sub	sp, #80	; 0x50
 8004f62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	647b      	str	r3, [r7, #68]	; 0x44
 8004f68:	2300      	movs	r3, #0
 8004f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f74:	4b79      	ldr	r3, [pc, #484]	; (800515c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f003 030c 	and.w	r3, r3, #12
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d00d      	beq.n	8004f9c <HAL_RCC_GetSysClockFreq+0x40>
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	f200 80e1 	bhi.w	8005148 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <HAL_RCC_GetSysClockFreq+0x34>
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	d003      	beq.n	8004f96 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f8e:	e0db      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f90:	4b73      	ldr	r3, [pc, #460]	; (8005160 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f92:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004f94:	e0db      	b.n	800514e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f96:	4b73      	ldr	r3, [pc, #460]	; (8005164 <HAL_RCC_GetSysClockFreq+0x208>)
 8004f98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f9a:	e0d8      	b.n	800514e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f9c:	4b6f      	ldr	r3, [pc, #444]	; (800515c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fa4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fa6:	4b6d      	ldr	r3, [pc, #436]	; (800515c <HAL_RCC_GetSysClockFreq+0x200>)
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d063      	beq.n	800507a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fb2:	4b6a      	ldr	r3, [pc, #424]	; (800515c <HAL_RCC_GetSysClockFreq+0x200>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	099b      	lsrs	r3, r3, #6
 8004fb8:	2200      	movs	r2, #0
 8004fba:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc4:	633b      	str	r3, [r7, #48]	; 0x30
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	637b      	str	r3, [r7, #52]	; 0x34
 8004fca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004fce:	4622      	mov	r2, r4
 8004fd0:	462b      	mov	r3, r5
 8004fd2:	f04f 0000 	mov.w	r0, #0
 8004fd6:	f04f 0100 	mov.w	r1, #0
 8004fda:	0159      	lsls	r1, r3, #5
 8004fdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fe0:	0150      	lsls	r0, r2, #5
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	1a51      	subs	r1, r2, r1
 8004fea:	6139      	str	r1, [r7, #16]
 8004fec:	4629      	mov	r1, r5
 8004fee:	eb63 0301 	sbc.w	r3, r3, r1
 8004ff2:	617b      	str	r3, [r7, #20]
 8004ff4:	f04f 0200 	mov.w	r2, #0
 8004ff8:	f04f 0300 	mov.w	r3, #0
 8004ffc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005000:	4659      	mov	r1, fp
 8005002:	018b      	lsls	r3, r1, #6
 8005004:	4651      	mov	r1, sl
 8005006:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800500a:	4651      	mov	r1, sl
 800500c:	018a      	lsls	r2, r1, #6
 800500e:	4651      	mov	r1, sl
 8005010:	ebb2 0801 	subs.w	r8, r2, r1
 8005014:	4659      	mov	r1, fp
 8005016:	eb63 0901 	sbc.w	r9, r3, r1
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005026:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800502a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800502e:	4690      	mov	r8, r2
 8005030:	4699      	mov	r9, r3
 8005032:	4623      	mov	r3, r4
 8005034:	eb18 0303 	adds.w	r3, r8, r3
 8005038:	60bb      	str	r3, [r7, #8]
 800503a:	462b      	mov	r3, r5
 800503c:	eb49 0303 	adc.w	r3, r9, r3
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	f04f 0200 	mov.w	r2, #0
 8005046:	f04f 0300 	mov.w	r3, #0
 800504a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800504e:	4629      	mov	r1, r5
 8005050:	020b      	lsls	r3, r1, #8
 8005052:	4621      	mov	r1, r4
 8005054:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8005058:	4621      	mov	r1, r4
 800505a:	020a      	lsls	r2, r1, #8
 800505c:	4610      	mov	r0, r2
 800505e:	4619      	mov	r1, r3
 8005060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005062:	2200      	movs	r2, #0
 8005064:	62bb      	str	r3, [r7, #40]	; 0x28
 8005066:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005068:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800506c:	f7fb f900 	bl	8000270 <__aeabi_uldivmod>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4613      	mov	r3, r2
 8005076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005078:	e058      	b.n	800512c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800507a:	4b38      	ldr	r3, [pc, #224]	; (800515c <HAL_RCC_GetSysClockFreq+0x200>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	099b      	lsrs	r3, r3, #6
 8005080:	2200      	movs	r2, #0
 8005082:	4618      	mov	r0, r3
 8005084:	4611      	mov	r1, r2
 8005086:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800508a:	623b      	str	r3, [r7, #32]
 800508c:	2300      	movs	r3, #0
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
 8005090:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005094:	4642      	mov	r2, r8
 8005096:	464b      	mov	r3, r9
 8005098:	f04f 0000 	mov.w	r0, #0
 800509c:	f04f 0100 	mov.w	r1, #0
 80050a0:	0159      	lsls	r1, r3, #5
 80050a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050a6:	0150      	lsls	r0, r2, #5
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4641      	mov	r1, r8
 80050ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80050b2:	4649      	mov	r1, r9
 80050b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050cc:	ebb2 040a 	subs.w	r4, r2, sl
 80050d0:	eb63 050b 	sbc.w	r5, r3, fp
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	00eb      	lsls	r3, r5, #3
 80050de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050e2:	00e2      	lsls	r2, r4, #3
 80050e4:	4614      	mov	r4, r2
 80050e6:	461d      	mov	r5, r3
 80050e8:	4643      	mov	r3, r8
 80050ea:	18e3      	adds	r3, r4, r3
 80050ec:	603b      	str	r3, [r7, #0]
 80050ee:	464b      	mov	r3, r9
 80050f0:	eb45 0303 	adc.w	r3, r5, r3
 80050f4:	607b      	str	r3, [r7, #4]
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	f04f 0300 	mov.w	r3, #0
 80050fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005102:	4629      	mov	r1, r5
 8005104:	028b      	lsls	r3, r1, #10
 8005106:	4621      	mov	r1, r4
 8005108:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800510c:	4621      	mov	r1, r4
 800510e:	028a      	lsls	r2, r1, #10
 8005110:	4610      	mov	r0, r2
 8005112:	4619      	mov	r1, r3
 8005114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005116:	2200      	movs	r2, #0
 8005118:	61bb      	str	r3, [r7, #24]
 800511a:	61fa      	str	r2, [r7, #28]
 800511c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005120:	f7fb f8a6 	bl	8000270 <__aeabi_uldivmod>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4613      	mov	r3, r2
 800512a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800512c:	4b0b      	ldr	r3, [pc, #44]	; (800515c <HAL_RCC_GetSysClockFreq+0x200>)
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	0c1b      	lsrs	r3, r3, #16
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	3301      	adds	r3, #1
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800513c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800513e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005140:	fbb2 f3f3 	udiv	r3, r2, r3
 8005144:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005146:	e002      	b.n	800514e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005148:	4b05      	ldr	r3, [pc, #20]	; (8005160 <HAL_RCC_GetSysClockFreq+0x204>)
 800514a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800514c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800514e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005150:	4618      	mov	r0, r3
 8005152:	3750      	adds	r7, #80	; 0x50
 8005154:	46bd      	mov	sp, r7
 8005156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800515a:	bf00      	nop
 800515c:	40023800 	.word	0x40023800
 8005160:	00f42400 	.word	0x00f42400
 8005164:	003d0900 	.word	0x003d0900

08005168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800516c:	4b03      	ldr	r3, [pc, #12]	; (800517c <HAL_RCC_GetHCLKFreq+0x14>)
 800516e:	681b      	ldr	r3, [r3, #0]
}
 8005170:	4618      	mov	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	20000000 	.word	0x20000000

08005180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005184:	f7ff fff0 	bl	8005168 <HAL_RCC_GetHCLKFreq>
 8005188:	4602      	mov	r2, r0
 800518a:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	0a9b      	lsrs	r3, r3, #10
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	4903      	ldr	r1, [pc, #12]	; (80051a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005196:	5ccb      	ldrb	r3, [r1, r3]
 8005198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800519c:	4618      	mov	r0, r3
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40023800 	.word	0x40023800
 80051a4:	08014858 	.word	0x08014858

080051a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051ac:	f7ff ffdc 	bl	8005168 <HAL_RCC_GetHCLKFreq>
 80051b0:	4602      	mov	r2, r0
 80051b2:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	0b5b      	lsrs	r3, r3, #13
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	4903      	ldr	r1, [pc, #12]	; (80051cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80051be:	5ccb      	ldrb	r3, [r1, r3]
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40023800 	.word	0x40023800
 80051cc:	08014858 	.word	0x08014858

080051d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	220f      	movs	r2, #15
 80051de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80051e0:	4b12      	ldr	r3, [pc, #72]	; (800522c <HAL_RCC_GetClockConfig+0x5c>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f003 0203 	and.w	r2, r3, #3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80051ec:	4b0f      	ldr	r3, [pc, #60]	; (800522c <HAL_RCC_GetClockConfig+0x5c>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80051f8:	4b0c      	ldr	r3, [pc, #48]	; (800522c <HAL_RCC_GetClockConfig+0x5c>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005204:	4b09      	ldr	r3, [pc, #36]	; (800522c <HAL_RCC_GetClockConfig+0x5c>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	08db      	lsrs	r3, r3, #3
 800520a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005212:	4b07      	ldr	r3, [pc, #28]	; (8005230 <HAL_RCC_GetClockConfig+0x60>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0207 	and.w	r2, r3, #7
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	601a      	str	r2, [r3, #0]
}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	40023800 	.word	0x40023800
 8005230:	40023c00 	.word	0x40023c00

08005234 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800523c:	2300      	movs	r3, #0
 800523e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b00      	cmp	r3, #0
 800524e:	d105      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005258:	2b00      	cmp	r3, #0
 800525a:	d035      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800525c:	4b62      	ldr	r3, [pc, #392]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005262:	f7fd f857 	bl	8002314 <HAL_GetTick>
 8005266:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005268:	e008      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800526a:	f7fd f853 	bl	8002314 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d901      	bls.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e0b0      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800527c:	4b5b      	ldr	r3, [pc, #364]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1f0      	bne.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	019a      	lsls	r2, r3, #6
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	071b      	lsls	r3, r3, #28
 8005294:	4955      	ldr	r1, [pc, #340]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005296:	4313      	orrs	r3, r2
 8005298:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800529c:	4b52      	ldr	r3, [pc, #328]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800529e:	2201      	movs	r2, #1
 80052a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052a2:	f7fd f837 	bl	8002314 <HAL_GetTick>
 80052a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052a8:	e008      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80052aa:	f7fd f833 	bl	8002314 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e090      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052bc:	4b4b      	ldr	r3, [pc, #300]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0f0      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 8083 	beq.w	80053dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	4b44      	ldr	r3, [pc, #272]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	4a43      	ldr	r2, [pc, #268]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052e4:	6413      	str	r3, [r2, #64]	; 0x40
 80052e6:	4b41      	ldr	r3, [pc, #260]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80052f2:	4b3f      	ldr	r3, [pc, #252]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a3e      	ldr	r2, [pc, #248]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052fe:	f7fd f809 	bl	8002314 <HAL_GetTick>
 8005302:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005304:	e008      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005306:	f7fd f805 	bl	8002314 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d901      	bls.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e062      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005318:	4b35      	ldr	r3, [pc, #212]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0f0      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005324:	4b31      	ldr	r3, [pc, #196]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005328:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800532c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d02f      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	429a      	cmp	r2, r3
 8005340:	d028      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005342:	4b2a      	ldr	r3, [pc, #168]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800534c:	4b29      	ldr	r3, [pc, #164]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800534e:	2201      	movs	r2, #1
 8005350:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005352:	4b28      	ldr	r3, [pc, #160]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005358:	4a24      	ldr	r2, [pc, #144]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800535e:	4b23      	ldr	r3, [pc, #140]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b01      	cmp	r3, #1
 8005368:	d114      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800536a:	f7fc ffd3 	bl	8002314 <HAL_GetTick>
 800536e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005370:	e00a      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005372:	f7fc ffcf 	bl	8002314 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8005380:	4293      	cmp	r3, r2
 8005382:	d901      	bls.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e02a      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005388:	4b18      	ldr	r3, [pc, #96]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800538a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0ee      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800539c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053a0:	d10d      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80053a2:	4b12      	ldr	r3, [pc, #72]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80053b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b6:	490d      	ldr	r1, [pc, #52]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	608b      	str	r3, [r1, #8]
 80053bc:	e005      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 80053be:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	4a0a      	ldr	r2, [pc, #40]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053c4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80053c8:	6093      	str	r3, [r2, #8]
 80053ca:	4b08      	ldr	r3, [pc, #32]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053d6:	4905      	ldr	r1, [pc, #20]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	42470068 	.word	0x42470068
 80053ec:	40023800 	.word	0x40023800
 80053f0:	40007000 	.word	0x40007000
 80053f4:	42470e40 	.word	0x42470e40

080053f8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e066      	b.n	80054dc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	7f5b      	ldrb	r3, [r3, #29]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d105      	bne.n	8005424 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7fc fa42 	bl	80018a8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	22ca      	movs	r2, #202	; 0xca
 8005430:	625a      	str	r2, [r3, #36]	; 0x24
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2253      	movs	r2, #83	; 0x53
 8005438:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f87a 	bl	8005534 <RTC_EnterInitMode>
 8005440:	4603      	mov	r3, r0
 8005442:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005444:	7bfb      	ldrb	r3, [r7, #15]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d12c      	bne.n	80054a4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	6812      	ldr	r2, [r2, #0]
 8005454:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800545c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6899      	ldr	r1, [r3, #8]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	431a      	orrs	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	68d2      	ldr	r2, [r2, #12]
 8005484:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6919      	ldr	r1, [r3, #16]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	041a      	lsls	r2, r3, #16
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f881 	bl	80055a2 <RTC_ExitInitMode>
 80054a0:	4603      	mov	r3, r0
 80054a2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d113      	bne.n	80054d2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054b8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	699a      	ldr	r2, [r3, #24]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	22ff      	movs	r2, #255	; 0xff
 80054d8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80054da:	7bfb      	ldrb	r3, [r7, #15]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68da      	ldr	r2, [r3, #12]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80054fe:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005500:	f7fc ff08 	bl	8002314 <HAL_GetTick>
 8005504:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005506:	e009      	b.n	800551c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005508:	f7fc ff04 	bl	8002314 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005516:	d901      	bls.n	800551c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e007      	b.n	800552c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f003 0320 	and.w	r3, r3, #32
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0ee      	beq.n	8005508 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800553c:	2300      	movs	r3, #0
 800553e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005540:	2300      	movs	r3, #0
 8005542:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554e:	2b00      	cmp	r3, #0
 8005550:	d122      	bne.n	8005598 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005560:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005562:	f7fc fed7 	bl	8002314 <HAL_GetTick>
 8005566:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005568:	e00c      	b.n	8005584 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800556a:	f7fc fed3 	bl	8002314 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005578:	d904      	bls.n	8005584 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2204      	movs	r2, #4
 800557e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558e:	2b00      	cmp	r3, #0
 8005590:	d102      	bne.n	8005598 <RTC_EnterInitMode+0x64>
 8005592:	7bfb      	ldrb	r3, [r7, #15]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d1e8      	bne.n	800556a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005598:	7bfb      	ldrb	r3, [r7, #15]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b084      	sub	sp, #16
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055bc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10a      	bne.n	80055e2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7ff ff89 	bl	80054e4 <HAL_RTC_WaitForSynchro>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d004      	beq.n	80055e2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2204      	movs	r2, #4
 80055dc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80055e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e07b      	b.n	80056f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	2b00      	cmp	r3, #0
 8005604:	d108      	bne.n	8005618 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800560e:	d009      	beq.n	8005624 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	61da      	str	r2, [r3, #28]
 8005616:	e005      	b.n	8005624 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d106      	bne.n	8005644 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7fc f95c 	bl	80018fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800565a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800566c:	431a      	orrs	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	431a      	orrs	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	431a      	orrs	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a8:	ea42 0103 	orr.w	r1, r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	0c1b      	lsrs	r3, r3, #16
 80056c2:	f003 0104 	and.w	r1, r3, #4
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	f003 0210 	and.w	r2, r3, #16
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69da      	ldr	r2, [r3, #28]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b084      	sub	sp, #16
 8005702:	af00      	add	r7, sp, #0
 8005704:	60f8      	str	r0, [r7, #12]
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e038      	b.n	8005786 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	d106      	bne.n	800572e <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f7fc fab9 	bl	8001ca0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	3308      	adds	r3, #8
 8005736:	4619      	mov	r1, r3
 8005738:	4610      	mov	r0, r2
 800573a:	f000 feb9 	bl	80064b0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6818      	ldr	r0, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	461a      	mov	r2, r3
 8005748:	68b9      	ldr	r1, [r7, #8]
 800574a:	f000 ff1b 	bl	8006584 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6858      	ldr	r0, [r3, #4]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	689a      	ldr	r2, [r3, #8]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575a:	6879      	ldr	r1, [r7, #4]
 800575c:	f000 ff48 	bl	80065f0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	6892      	ldr	r2, [r2, #8]
 8005768:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	6892      	ldr	r2, [r2, #8]
 8005774:	f041 0101 	orr.w	r1, r1, #1
 8005778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b082      	sub	sp, #8
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e041      	b.n	8005824 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d106      	bne.n	80057ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f839 	bl	800582c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2202      	movs	r2, #2
 80057be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	3304      	adds	r3, #4
 80057ca:	4619      	mov	r1, r3
 80057cc:	4610      	mov	r0, r2
 80057ce:	f000 fa7d 	bl	8005ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b01      	cmp	r3, #1
 8005852:	d001      	beq.n	8005858 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e04e      	b.n	80058f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0201 	orr.w	r2, r2, #1
 800586e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a23      	ldr	r2, [pc, #140]	; (8005904 <HAL_TIM_Base_Start_IT+0xc4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d022      	beq.n	80058c0 <HAL_TIM_Base_Start_IT+0x80>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005882:	d01d      	beq.n	80058c0 <HAL_TIM_Base_Start_IT+0x80>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a1f      	ldr	r2, [pc, #124]	; (8005908 <HAL_TIM_Base_Start_IT+0xc8>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d018      	beq.n	80058c0 <HAL_TIM_Base_Start_IT+0x80>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a1e      	ldr	r2, [pc, #120]	; (800590c <HAL_TIM_Base_Start_IT+0xcc>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d013      	beq.n	80058c0 <HAL_TIM_Base_Start_IT+0x80>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a1c      	ldr	r2, [pc, #112]	; (8005910 <HAL_TIM_Base_Start_IT+0xd0>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d00e      	beq.n	80058c0 <HAL_TIM_Base_Start_IT+0x80>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a1b      	ldr	r2, [pc, #108]	; (8005914 <HAL_TIM_Base_Start_IT+0xd4>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d009      	beq.n	80058c0 <HAL_TIM_Base_Start_IT+0x80>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a19      	ldr	r2, [pc, #100]	; (8005918 <HAL_TIM_Base_Start_IT+0xd8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d004      	beq.n	80058c0 <HAL_TIM_Base_Start_IT+0x80>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a18      	ldr	r2, [pc, #96]	; (800591c <HAL_TIM_Base_Start_IT+0xdc>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d111      	bne.n	80058e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 0307 	and.w	r3, r3, #7
 80058ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2b06      	cmp	r3, #6
 80058d0:	d010      	beq.n	80058f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f042 0201 	orr.w	r2, r2, #1
 80058e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e2:	e007      	b.n	80058f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0201 	orr.w	r2, r2, #1
 80058f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	40010000 	.word	0x40010000
 8005908:	40000400 	.word	0x40000400
 800590c:	40000800 	.word	0x40000800
 8005910:	40000c00 	.word	0x40000c00
 8005914:	40010400 	.word	0x40010400
 8005918:	40014000 	.word	0x40014000
 800591c:	40001800 	.word	0x40001800

08005920 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e097      	b.n	8005a64 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d106      	bne.n	800594e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f7fc f83f 	bl	80019cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2202      	movs	r2, #2
 8005952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6812      	ldr	r2, [r2, #0]
 8005960:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005964:	f023 0307 	bic.w	r3, r3, #7
 8005968:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	3304      	adds	r3, #4
 8005972:	4619      	mov	r1, r3
 8005974:	4610      	mov	r0, r2
 8005976:	f000 f9a9 	bl	8005ccc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	4313      	orrs	r3, r2
 800599a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059a2:	f023 0303 	bic.w	r3, r3, #3
 80059a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	021b      	lsls	r3, r3, #8
 80059b2:	4313      	orrs	r3, r2
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80059c0:	f023 030c 	bic.w	r3, r3, #12
 80059c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68da      	ldr	r2, [r3, #12]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	021b      	lsls	r3, r3, #8
 80059dc:	4313      	orrs	r3, r2
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	011a      	lsls	r2, r3, #4
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	031b      	lsls	r3, r3, #12
 80059f0:	4313      	orrs	r3, r2
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80059fe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005a06:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	011b      	lsls	r3, r3, #4
 8005a12:	4313      	orrs	r3, r2
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3718      	adds	r7, #24
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d122      	bne.n	8005ac8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d11b      	bne.n	8005ac8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f06f 0202 	mvn.w	r2, #2
 8005a98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f8ee 	bl	8005c90 <HAL_TIM_IC_CaptureCallback>
 8005ab4:	e005      	b.n	8005ac2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f8e0 	bl	8005c7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f8f1 	bl	8005ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	f003 0304 	and.w	r3, r3, #4
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d122      	bne.n	8005b1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f003 0304 	and.w	r3, r3, #4
 8005ae0:	2b04      	cmp	r3, #4
 8005ae2:	d11b      	bne.n	8005b1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f06f 0204 	mvn.w	r2, #4
 8005aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2202      	movs	r2, #2
 8005af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f8c4 	bl	8005c90 <HAL_TIM_IC_CaptureCallback>
 8005b08:	e005      	b.n	8005b16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f8b6 	bl	8005c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f8c7 	bl	8005ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d122      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f003 0308 	and.w	r3, r3, #8
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d11b      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f06f 0208 	mvn.w	r2, #8
 8005b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2204      	movs	r2, #4
 8005b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	f003 0303 	and.w	r3, r3, #3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f89a 	bl	8005c90 <HAL_TIM_IC_CaptureCallback>
 8005b5c:	e005      	b.n	8005b6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f88c 	bl	8005c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f89d 	bl	8005ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	f003 0310 	and.w	r3, r3, #16
 8005b7a:	2b10      	cmp	r3, #16
 8005b7c:	d122      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f003 0310 	and.w	r3, r3, #16
 8005b88:	2b10      	cmp	r3, #16
 8005b8a:	d11b      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f06f 0210 	mvn.w	r2, #16
 8005b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2208      	movs	r2, #8
 8005b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f870 	bl	8005c90 <HAL_TIM_IC_CaptureCallback>
 8005bb0:	e005      	b.n	8005bbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f862 	bl	8005c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f873 	bl	8005ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d10e      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d107      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f06f 0201 	mvn.w	r2, #1
 8005be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7fb fc86 	bl	80014fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bfa:	2b80      	cmp	r3, #128	; 0x80
 8005bfc:	d10e      	bne.n	8005c1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c08:	2b80      	cmp	r3, #128	; 0x80
 8005c0a:	d107      	bne.n	8005c1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f97e 	bl	8005f18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c26:	2b40      	cmp	r3, #64	; 0x40
 8005c28:	d10e      	bne.n	8005c48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c34:	2b40      	cmp	r3, #64	; 0x40
 8005c36:	d107      	bne.n	8005c48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f838 	bl	8005cb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f003 0320 	and.w	r3, r3, #32
 8005c52:	2b20      	cmp	r3, #32
 8005c54:	d10e      	bne.n	8005c74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f003 0320 	and.w	r3, r3, #32
 8005c60:	2b20      	cmp	r3, #32
 8005c62:	d107      	bne.n	8005c74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f06f 0220 	mvn.w	r2, #32
 8005c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f948 	bl	8005f04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c74:	bf00      	nop
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a40      	ldr	r2, [pc, #256]	; (8005de0 <TIM_Base_SetConfig+0x114>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d013      	beq.n	8005d0c <TIM_Base_SetConfig+0x40>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cea:	d00f      	beq.n	8005d0c <TIM_Base_SetConfig+0x40>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a3d      	ldr	r2, [pc, #244]	; (8005de4 <TIM_Base_SetConfig+0x118>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d00b      	beq.n	8005d0c <TIM_Base_SetConfig+0x40>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a3c      	ldr	r2, [pc, #240]	; (8005de8 <TIM_Base_SetConfig+0x11c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d007      	beq.n	8005d0c <TIM_Base_SetConfig+0x40>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a3b      	ldr	r2, [pc, #236]	; (8005dec <TIM_Base_SetConfig+0x120>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d003      	beq.n	8005d0c <TIM_Base_SetConfig+0x40>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a3a      	ldr	r2, [pc, #232]	; (8005df0 <TIM_Base_SetConfig+0x124>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d108      	bne.n	8005d1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a2f      	ldr	r2, [pc, #188]	; (8005de0 <TIM_Base_SetConfig+0x114>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d02b      	beq.n	8005d7e <TIM_Base_SetConfig+0xb2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d2c:	d027      	beq.n	8005d7e <TIM_Base_SetConfig+0xb2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a2c      	ldr	r2, [pc, #176]	; (8005de4 <TIM_Base_SetConfig+0x118>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d023      	beq.n	8005d7e <TIM_Base_SetConfig+0xb2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a2b      	ldr	r2, [pc, #172]	; (8005de8 <TIM_Base_SetConfig+0x11c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d01f      	beq.n	8005d7e <TIM_Base_SetConfig+0xb2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a2a      	ldr	r2, [pc, #168]	; (8005dec <TIM_Base_SetConfig+0x120>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d01b      	beq.n	8005d7e <TIM_Base_SetConfig+0xb2>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a29      	ldr	r2, [pc, #164]	; (8005df0 <TIM_Base_SetConfig+0x124>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d017      	beq.n	8005d7e <TIM_Base_SetConfig+0xb2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a28      	ldr	r2, [pc, #160]	; (8005df4 <TIM_Base_SetConfig+0x128>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d013      	beq.n	8005d7e <TIM_Base_SetConfig+0xb2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a27      	ldr	r2, [pc, #156]	; (8005df8 <TIM_Base_SetConfig+0x12c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00f      	beq.n	8005d7e <TIM_Base_SetConfig+0xb2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a26      	ldr	r2, [pc, #152]	; (8005dfc <TIM_Base_SetConfig+0x130>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00b      	beq.n	8005d7e <TIM_Base_SetConfig+0xb2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a25      	ldr	r2, [pc, #148]	; (8005e00 <TIM_Base_SetConfig+0x134>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d007      	beq.n	8005d7e <TIM_Base_SetConfig+0xb2>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a24      	ldr	r2, [pc, #144]	; (8005e04 <TIM_Base_SetConfig+0x138>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d003      	beq.n	8005d7e <TIM_Base_SetConfig+0xb2>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a23      	ldr	r2, [pc, #140]	; (8005e08 <TIM_Base_SetConfig+0x13c>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d108      	bne.n	8005d90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a0a      	ldr	r2, [pc, #40]	; (8005de0 <TIM_Base_SetConfig+0x114>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d003      	beq.n	8005dc4 <TIM_Base_SetConfig+0xf8>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a0c      	ldr	r2, [pc, #48]	; (8005df0 <TIM_Base_SetConfig+0x124>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d103      	bne.n	8005dcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	691a      	ldr	r2, [r3, #16]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	615a      	str	r2, [r3, #20]
}
 8005dd2:	bf00      	nop
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	40010000 	.word	0x40010000
 8005de4:	40000400 	.word	0x40000400
 8005de8:	40000800 	.word	0x40000800
 8005dec:	40000c00 	.word	0x40000c00
 8005df0:	40010400 	.word	0x40010400
 8005df4:	40014000 	.word	0x40014000
 8005df8:	40014400 	.word	0x40014400
 8005dfc:	40014800 	.word	0x40014800
 8005e00:	40001800 	.word	0x40001800
 8005e04:	40001c00 	.word	0x40001c00
 8005e08:	40002000 	.word	0x40002000

08005e0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d101      	bne.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e20:	2302      	movs	r3, #2
 8005e22:	e05a      	b.n	8005eda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a21      	ldr	r2, [pc, #132]	; (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d022      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e70:	d01d      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a1d      	ldr	r2, [pc, #116]	; (8005eec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d018      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a1b      	ldr	r2, [pc, #108]	; (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d013      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a1a      	ldr	r2, [pc, #104]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d00e      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a18      	ldr	r2, [pc, #96]	; (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d009      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a17      	ldr	r2, [pc, #92]	; (8005efc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d004      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a15      	ldr	r2, [pc, #84]	; (8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d10c      	bne.n	8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	40010000 	.word	0x40010000
 8005eec:	40000400 	.word	0x40000400
 8005ef0:	40000800 	.word	0x40000800
 8005ef4:	40000c00 	.word	0x40000c00
 8005ef8:	40010400 	.word	0x40010400
 8005efc:	40014000 	.word	0x40014000
 8005f00:	40001800 	.word	0x40001800

08005f04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e03f      	b.n	8005fbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d106      	bne.n	8005f58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7fb fdf0 	bl	8001b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2224      	movs	r2, #36	; 0x24
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68da      	ldr	r2, [r3, #12]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f829 	bl	8005fc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	691a      	ldr	r2, [r3, #16]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	695a      	ldr	r2, [r3, #20]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68da      	ldr	r2, [r3, #12]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3708      	adds	r7, #8
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
	...

08005fc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fcc:	b0c0      	sub	sp, #256	; 0x100
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe4:	68d9      	ldr	r1, [r3, #12]
 8005fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	ea40 0301 	orr.w	r3, r0, r1
 8005ff0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	431a      	orrs	r2, r3
 8006000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	431a      	orrs	r2, r3
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	4313      	orrs	r3, r2
 8006010:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006020:	f021 010c 	bic.w	r1, r1, #12
 8006024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800602e:	430b      	orrs	r3, r1
 8006030:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800603e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006042:	6999      	ldr	r1, [r3, #24]
 8006044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	ea40 0301 	orr.w	r3, r0, r1
 800604e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	4b8f      	ldr	r3, [pc, #572]	; (8006294 <UART_SetConfig+0x2cc>)
 8006058:	429a      	cmp	r2, r3
 800605a:	d005      	beq.n	8006068 <UART_SetConfig+0xa0>
 800605c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	4b8d      	ldr	r3, [pc, #564]	; (8006298 <UART_SetConfig+0x2d0>)
 8006064:	429a      	cmp	r2, r3
 8006066:	d104      	bne.n	8006072 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006068:	f7ff f89e 	bl	80051a8 <HAL_RCC_GetPCLK2Freq>
 800606c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006070:	e003      	b.n	800607a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006072:	f7ff f885 	bl	8005180 <HAL_RCC_GetPCLK1Freq>
 8006076:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800607a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006084:	f040 810c 	bne.w	80062a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800608c:	2200      	movs	r2, #0
 800608e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006092:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006096:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800609a:	4622      	mov	r2, r4
 800609c:	462b      	mov	r3, r5
 800609e:	1891      	adds	r1, r2, r2
 80060a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80060a2:	415b      	adcs	r3, r3
 80060a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80060aa:	4621      	mov	r1, r4
 80060ac:	eb12 0801 	adds.w	r8, r2, r1
 80060b0:	4629      	mov	r1, r5
 80060b2:	eb43 0901 	adc.w	r9, r3, r1
 80060b6:	f04f 0200 	mov.w	r2, #0
 80060ba:	f04f 0300 	mov.w	r3, #0
 80060be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060ca:	4690      	mov	r8, r2
 80060cc:	4699      	mov	r9, r3
 80060ce:	4623      	mov	r3, r4
 80060d0:	eb18 0303 	adds.w	r3, r8, r3
 80060d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060d8:	462b      	mov	r3, r5
 80060da:	eb49 0303 	adc.w	r3, r9, r3
 80060de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80060f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060f6:	460b      	mov	r3, r1
 80060f8:	18db      	adds	r3, r3, r3
 80060fa:	653b      	str	r3, [r7, #80]	; 0x50
 80060fc:	4613      	mov	r3, r2
 80060fe:	eb42 0303 	adc.w	r3, r2, r3
 8006102:	657b      	str	r3, [r7, #84]	; 0x54
 8006104:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006108:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800610c:	f7fa f8b0 	bl	8000270 <__aeabi_uldivmod>
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	4b61      	ldr	r3, [pc, #388]	; (800629c <UART_SetConfig+0x2d4>)
 8006116:	fba3 2302 	umull	r2, r3, r3, r2
 800611a:	095b      	lsrs	r3, r3, #5
 800611c:	011c      	lsls	r4, r3, #4
 800611e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006122:	2200      	movs	r2, #0
 8006124:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006128:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800612c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006130:	4642      	mov	r2, r8
 8006132:	464b      	mov	r3, r9
 8006134:	1891      	adds	r1, r2, r2
 8006136:	64b9      	str	r1, [r7, #72]	; 0x48
 8006138:	415b      	adcs	r3, r3
 800613a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800613c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006140:	4641      	mov	r1, r8
 8006142:	eb12 0a01 	adds.w	sl, r2, r1
 8006146:	4649      	mov	r1, r9
 8006148:	eb43 0b01 	adc.w	fp, r3, r1
 800614c:	f04f 0200 	mov.w	r2, #0
 8006150:	f04f 0300 	mov.w	r3, #0
 8006154:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006158:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800615c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006160:	4692      	mov	sl, r2
 8006162:	469b      	mov	fp, r3
 8006164:	4643      	mov	r3, r8
 8006166:	eb1a 0303 	adds.w	r3, sl, r3
 800616a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800616e:	464b      	mov	r3, r9
 8006170:	eb4b 0303 	adc.w	r3, fp, r3
 8006174:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006184:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006188:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800618c:	460b      	mov	r3, r1
 800618e:	18db      	adds	r3, r3, r3
 8006190:	643b      	str	r3, [r7, #64]	; 0x40
 8006192:	4613      	mov	r3, r2
 8006194:	eb42 0303 	adc.w	r3, r2, r3
 8006198:	647b      	str	r3, [r7, #68]	; 0x44
 800619a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800619e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80061a2:	f7fa f865 	bl	8000270 <__aeabi_uldivmod>
 80061a6:	4602      	mov	r2, r0
 80061a8:	460b      	mov	r3, r1
 80061aa:	4611      	mov	r1, r2
 80061ac:	4b3b      	ldr	r3, [pc, #236]	; (800629c <UART_SetConfig+0x2d4>)
 80061ae:	fba3 2301 	umull	r2, r3, r3, r1
 80061b2:	095b      	lsrs	r3, r3, #5
 80061b4:	2264      	movs	r2, #100	; 0x64
 80061b6:	fb02 f303 	mul.w	r3, r2, r3
 80061ba:	1acb      	subs	r3, r1, r3
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80061c2:	4b36      	ldr	r3, [pc, #216]	; (800629c <UART_SetConfig+0x2d4>)
 80061c4:	fba3 2302 	umull	r2, r3, r3, r2
 80061c8:	095b      	lsrs	r3, r3, #5
 80061ca:	005b      	lsls	r3, r3, #1
 80061cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061d0:	441c      	add	r4, r3
 80061d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061d6:	2200      	movs	r2, #0
 80061d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80061e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80061e4:	4642      	mov	r2, r8
 80061e6:	464b      	mov	r3, r9
 80061e8:	1891      	adds	r1, r2, r2
 80061ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80061ec:	415b      	adcs	r3, r3
 80061ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061f4:	4641      	mov	r1, r8
 80061f6:	1851      	adds	r1, r2, r1
 80061f8:	6339      	str	r1, [r7, #48]	; 0x30
 80061fa:	4649      	mov	r1, r9
 80061fc:	414b      	adcs	r3, r1
 80061fe:	637b      	str	r3, [r7, #52]	; 0x34
 8006200:	f04f 0200 	mov.w	r2, #0
 8006204:	f04f 0300 	mov.w	r3, #0
 8006208:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800620c:	4659      	mov	r1, fp
 800620e:	00cb      	lsls	r3, r1, #3
 8006210:	4651      	mov	r1, sl
 8006212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006216:	4651      	mov	r1, sl
 8006218:	00ca      	lsls	r2, r1, #3
 800621a:	4610      	mov	r0, r2
 800621c:	4619      	mov	r1, r3
 800621e:	4603      	mov	r3, r0
 8006220:	4642      	mov	r2, r8
 8006222:	189b      	adds	r3, r3, r2
 8006224:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006228:	464b      	mov	r3, r9
 800622a:	460a      	mov	r2, r1
 800622c:	eb42 0303 	adc.w	r3, r2, r3
 8006230:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006240:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006244:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006248:	460b      	mov	r3, r1
 800624a:	18db      	adds	r3, r3, r3
 800624c:	62bb      	str	r3, [r7, #40]	; 0x28
 800624e:	4613      	mov	r3, r2
 8006250:	eb42 0303 	adc.w	r3, r2, r3
 8006254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006256:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800625a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800625e:	f7fa f807 	bl	8000270 <__aeabi_uldivmod>
 8006262:	4602      	mov	r2, r0
 8006264:	460b      	mov	r3, r1
 8006266:	4b0d      	ldr	r3, [pc, #52]	; (800629c <UART_SetConfig+0x2d4>)
 8006268:	fba3 1302 	umull	r1, r3, r3, r2
 800626c:	095b      	lsrs	r3, r3, #5
 800626e:	2164      	movs	r1, #100	; 0x64
 8006270:	fb01 f303 	mul.w	r3, r1, r3
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	00db      	lsls	r3, r3, #3
 8006278:	3332      	adds	r3, #50	; 0x32
 800627a:	4a08      	ldr	r2, [pc, #32]	; (800629c <UART_SetConfig+0x2d4>)
 800627c:	fba2 2303 	umull	r2, r3, r2, r3
 8006280:	095b      	lsrs	r3, r3, #5
 8006282:	f003 0207 	and.w	r2, r3, #7
 8006286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4422      	add	r2, r4
 800628e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006290:	e105      	b.n	800649e <UART_SetConfig+0x4d6>
 8006292:	bf00      	nop
 8006294:	40011000 	.word	0x40011000
 8006298:	40011400 	.word	0x40011400
 800629c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062a4:	2200      	movs	r2, #0
 80062a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80062ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80062b2:	4642      	mov	r2, r8
 80062b4:	464b      	mov	r3, r9
 80062b6:	1891      	adds	r1, r2, r2
 80062b8:	6239      	str	r1, [r7, #32]
 80062ba:	415b      	adcs	r3, r3
 80062bc:	627b      	str	r3, [r7, #36]	; 0x24
 80062be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062c2:	4641      	mov	r1, r8
 80062c4:	1854      	adds	r4, r2, r1
 80062c6:	4649      	mov	r1, r9
 80062c8:	eb43 0501 	adc.w	r5, r3, r1
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	00eb      	lsls	r3, r5, #3
 80062d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062da:	00e2      	lsls	r2, r4, #3
 80062dc:	4614      	mov	r4, r2
 80062de:	461d      	mov	r5, r3
 80062e0:	4643      	mov	r3, r8
 80062e2:	18e3      	adds	r3, r4, r3
 80062e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062e8:	464b      	mov	r3, r9
 80062ea:	eb45 0303 	adc.w	r3, r5, r3
 80062ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006302:	f04f 0200 	mov.w	r2, #0
 8006306:	f04f 0300 	mov.w	r3, #0
 800630a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800630e:	4629      	mov	r1, r5
 8006310:	008b      	lsls	r3, r1, #2
 8006312:	4621      	mov	r1, r4
 8006314:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006318:	4621      	mov	r1, r4
 800631a:	008a      	lsls	r2, r1, #2
 800631c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006320:	f7f9 ffa6 	bl	8000270 <__aeabi_uldivmod>
 8006324:	4602      	mov	r2, r0
 8006326:	460b      	mov	r3, r1
 8006328:	4b60      	ldr	r3, [pc, #384]	; (80064ac <UART_SetConfig+0x4e4>)
 800632a:	fba3 2302 	umull	r2, r3, r3, r2
 800632e:	095b      	lsrs	r3, r3, #5
 8006330:	011c      	lsls	r4, r3, #4
 8006332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006336:	2200      	movs	r2, #0
 8006338:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800633c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006340:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006344:	4642      	mov	r2, r8
 8006346:	464b      	mov	r3, r9
 8006348:	1891      	adds	r1, r2, r2
 800634a:	61b9      	str	r1, [r7, #24]
 800634c:	415b      	adcs	r3, r3
 800634e:	61fb      	str	r3, [r7, #28]
 8006350:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006354:	4641      	mov	r1, r8
 8006356:	1851      	adds	r1, r2, r1
 8006358:	6139      	str	r1, [r7, #16]
 800635a:	4649      	mov	r1, r9
 800635c:	414b      	adcs	r3, r1
 800635e:	617b      	str	r3, [r7, #20]
 8006360:	f04f 0200 	mov.w	r2, #0
 8006364:	f04f 0300 	mov.w	r3, #0
 8006368:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800636c:	4659      	mov	r1, fp
 800636e:	00cb      	lsls	r3, r1, #3
 8006370:	4651      	mov	r1, sl
 8006372:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006376:	4651      	mov	r1, sl
 8006378:	00ca      	lsls	r2, r1, #3
 800637a:	4610      	mov	r0, r2
 800637c:	4619      	mov	r1, r3
 800637e:	4603      	mov	r3, r0
 8006380:	4642      	mov	r2, r8
 8006382:	189b      	adds	r3, r3, r2
 8006384:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006388:	464b      	mov	r3, r9
 800638a:	460a      	mov	r2, r1
 800638c:	eb42 0303 	adc.w	r3, r2, r3
 8006390:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	67bb      	str	r3, [r7, #120]	; 0x78
 800639e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80063a0:	f04f 0200 	mov.w	r2, #0
 80063a4:	f04f 0300 	mov.w	r3, #0
 80063a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80063ac:	4649      	mov	r1, r9
 80063ae:	008b      	lsls	r3, r1, #2
 80063b0:	4641      	mov	r1, r8
 80063b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063b6:	4641      	mov	r1, r8
 80063b8:	008a      	lsls	r2, r1, #2
 80063ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80063be:	f7f9 ff57 	bl	8000270 <__aeabi_uldivmod>
 80063c2:	4602      	mov	r2, r0
 80063c4:	460b      	mov	r3, r1
 80063c6:	4b39      	ldr	r3, [pc, #228]	; (80064ac <UART_SetConfig+0x4e4>)
 80063c8:	fba3 1302 	umull	r1, r3, r3, r2
 80063cc:	095b      	lsrs	r3, r3, #5
 80063ce:	2164      	movs	r1, #100	; 0x64
 80063d0:	fb01 f303 	mul.w	r3, r1, r3
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	011b      	lsls	r3, r3, #4
 80063d8:	3332      	adds	r3, #50	; 0x32
 80063da:	4a34      	ldr	r2, [pc, #208]	; (80064ac <UART_SetConfig+0x4e4>)
 80063dc:	fba2 2303 	umull	r2, r3, r2, r3
 80063e0:	095b      	lsrs	r3, r3, #5
 80063e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063e6:	441c      	add	r4, r3
 80063e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063ec:	2200      	movs	r2, #0
 80063ee:	673b      	str	r3, [r7, #112]	; 0x70
 80063f0:	677a      	str	r2, [r7, #116]	; 0x74
 80063f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80063f6:	4642      	mov	r2, r8
 80063f8:	464b      	mov	r3, r9
 80063fa:	1891      	adds	r1, r2, r2
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	415b      	adcs	r3, r3
 8006400:	60fb      	str	r3, [r7, #12]
 8006402:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006406:	4641      	mov	r1, r8
 8006408:	1851      	adds	r1, r2, r1
 800640a:	6039      	str	r1, [r7, #0]
 800640c:	4649      	mov	r1, r9
 800640e:	414b      	adcs	r3, r1
 8006410:	607b      	str	r3, [r7, #4]
 8006412:	f04f 0200 	mov.w	r2, #0
 8006416:	f04f 0300 	mov.w	r3, #0
 800641a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800641e:	4659      	mov	r1, fp
 8006420:	00cb      	lsls	r3, r1, #3
 8006422:	4651      	mov	r1, sl
 8006424:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006428:	4651      	mov	r1, sl
 800642a:	00ca      	lsls	r2, r1, #3
 800642c:	4610      	mov	r0, r2
 800642e:	4619      	mov	r1, r3
 8006430:	4603      	mov	r3, r0
 8006432:	4642      	mov	r2, r8
 8006434:	189b      	adds	r3, r3, r2
 8006436:	66bb      	str	r3, [r7, #104]	; 0x68
 8006438:	464b      	mov	r3, r9
 800643a:	460a      	mov	r2, r1
 800643c:	eb42 0303 	adc.w	r3, r2, r3
 8006440:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	663b      	str	r3, [r7, #96]	; 0x60
 800644c:	667a      	str	r2, [r7, #100]	; 0x64
 800644e:	f04f 0200 	mov.w	r2, #0
 8006452:	f04f 0300 	mov.w	r3, #0
 8006456:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800645a:	4649      	mov	r1, r9
 800645c:	008b      	lsls	r3, r1, #2
 800645e:	4641      	mov	r1, r8
 8006460:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006464:	4641      	mov	r1, r8
 8006466:	008a      	lsls	r2, r1, #2
 8006468:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800646c:	f7f9 ff00 	bl	8000270 <__aeabi_uldivmod>
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	4b0d      	ldr	r3, [pc, #52]	; (80064ac <UART_SetConfig+0x4e4>)
 8006476:	fba3 1302 	umull	r1, r3, r3, r2
 800647a:	095b      	lsrs	r3, r3, #5
 800647c:	2164      	movs	r1, #100	; 0x64
 800647e:	fb01 f303 	mul.w	r3, r1, r3
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	011b      	lsls	r3, r3, #4
 8006486:	3332      	adds	r3, #50	; 0x32
 8006488:	4a08      	ldr	r2, [pc, #32]	; (80064ac <UART_SetConfig+0x4e4>)
 800648a:	fba2 2303 	umull	r2, r3, r2, r3
 800648e:	095b      	lsrs	r3, r3, #5
 8006490:	f003 020f 	and.w	r2, r3, #15
 8006494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4422      	add	r2, r4
 800649c:	609a      	str	r2, [r3, #8]
}
 800649e:	bf00      	nop
 80064a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80064a4:	46bd      	mov	sp, r7
 80064a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064aa:	bf00      	nop
 80064ac:	51eb851f 	.word	0x51eb851f

080064b0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	6812      	ldr	r2, [r2, #0]
 80064c8:	f023 0101 	bic.w	r1, r3, #1
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	2b08      	cmp	r3, #8
 80064d8:	d102      	bne.n	80064e0 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80064da:	2340      	movs	r3, #64	; 0x40
 80064dc:	617b      	str	r3, [r7, #20]
 80064de:	e001      	b.n	80064e4 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80064e0:	2300      	movs	r3, #0
 80064e2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80064f0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80064f6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80064fc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006502:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8006508:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800650e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8006514:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800651a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8006520:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8006526:	4313      	orrs	r3, r2
 8006528:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	4313      	orrs	r3, r2
 8006532:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	4313      	orrs	r3, r2
 800653c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800653e:	4b10      	ldr	r3, [pc, #64]	; (8006580 <FSMC_NORSRAM_Init+0xd0>)
 8006540:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006548:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8006550:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	43db      	mvns	r3, r3
 8006560:	ea02 0103 	and.w	r1, r2, r3
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	4319      	orrs	r1, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	371c      	adds	r7, #28
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	0008fb7f 	.word	0x0008fb7f

08006584 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	1c5a      	adds	r2, r3, #1
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800659a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	011b      	lsls	r3, r3, #4
 80065a8:	431a      	orrs	r2, r3
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	021b      	lsls	r3, r3, #8
 80065b0:	431a      	orrs	r2, r3
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	041b      	lsls	r3, r3, #16
 80065b8:	431a      	orrs	r2, r3
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	3b01      	subs	r3, #1
 80065c0:	051b      	lsls	r3, r3, #20
 80065c2:	431a      	orrs	r2, r3
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	3b02      	subs	r3, #2
 80065ca:	061b      	lsls	r3, r3, #24
 80065cc:	431a      	orrs	r2, r3
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	3201      	adds	r2, #1
 80065d8:	4319      	orrs	r1, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3714      	adds	r7, #20
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
	...

080065f0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
 80065fc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006604:	d11d      	bne.n	8006642 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800660e:	4b13      	ldr	r3, [pc, #76]	; (800665c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006610:	4013      	ands	r3, r2
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	6811      	ldr	r1, [r2, #0]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	6852      	ldr	r2, [r2, #4]
 800661a:	0112      	lsls	r2, r2, #4
 800661c:	4311      	orrs	r1, r2
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	6892      	ldr	r2, [r2, #8]
 8006622:	0212      	lsls	r2, r2, #8
 8006624:	4311      	orrs	r1, r2
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	6992      	ldr	r2, [r2, #24]
 800662a:	4311      	orrs	r1, r2
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	68d2      	ldr	r2, [r2, #12]
 8006630:	0412      	lsls	r2, r2, #16
 8006632:	430a      	orrs	r2, r1
 8006634:	ea43 0102 	orr.w	r1, r3, r2
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006640:	e005      	b.n	800664e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800664a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3714      	adds	r7, #20
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr
 800665c:	cff00000 	.word	0xcff00000

08006660 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8006666:	4b90      	ldr	r3, [pc, #576]	; (80068a8 <MX_LWIP_Init+0x248>)
 8006668:	22c0      	movs	r2, #192	; 0xc0
 800666a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800666c:	4b8e      	ldr	r3, [pc, #568]	; (80068a8 <MX_LWIP_Init+0x248>)
 800666e:	22a8      	movs	r2, #168	; 0xa8
 8006670:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8006672:	4b8d      	ldr	r3, [pc, #564]	; (80068a8 <MX_LWIP_Init+0x248>)
 8006674:	2201      	movs	r2, #1
 8006676:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 15;
 8006678:	4b8b      	ldr	r3, [pc, #556]	; (80068a8 <MX_LWIP_Init+0x248>)
 800667a:	220f      	movs	r2, #15
 800667c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800667e:	4b8b      	ldr	r3, [pc, #556]	; (80068ac <MX_LWIP_Init+0x24c>)
 8006680:	22ff      	movs	r2, #255	; 0xff
 8006682:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006684:	4b89      	ldr	r3, [pc, #548]	; (80068ac <MX_LWIP_Init+0x24c>)
 8006686:	22ff      	movs	r2, #255	; 0xff
 8006688:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800668a:	4b88      	ldr	r3, [pc, #544]	; (80068ac <MX_LWIP_Init+0x24c>)
 800668c:	22ff      	movs	r2, #255	; 0xff
 800668e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006690:	4b86      	ldr	r3, [pc, #536]	; (80068ac <MX_LWIP_Init+0x24c>)
 8006692:	2200      	movs	r2, #0
 8006694:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8006696:	4b86      	ldr	r3, [pc, #536]	; (80068b0 <MX_LWIP_Init+0x250>)
 8006698:	22c0      	movs	r2, #192	; 0xc0
 800669a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800669c:	4b84      	ldr	r3, [pc, #528]	; (80068b0 <MX_LWIP_Init+0x250>)
 800669e:	22a8      	movs	r2, #168	; 0xa8
 80066a0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80066a2:	4b83      	ldr	r3, [pc, #524]	; (80068b0 <MX_LWIP_Init+0x250>)
 80066a4:	2201      	movs	r2, #1
 80066a6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80066a8:	4b81      	ldr	r3, [pc, #516]	; (80068b0 <MX_LWIP_Init+0x250>)
 80066aa:	2201      	movs	r2, #1
 80066ac:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
  /* Activate the Ethernet PHY */
  HAL_GPIO_WritePin(ETH_RESET_GPIO_Port, ETH_RESET_Pin, GPIO_PIN_SET);
 80066ae:	2201      	movs	r2, #1
 80066b0:	2101      	movs	r1, #1
 80066b2:	4880      	ldr	r0, [pc, #512]	; (80068b4 <MX_LWIP_Init+0x254>)
 80066b4:	f7fd fc8e 	bl	8003fd4 <HAL_GPIO_WritePin>
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80066b8:	f000 fd26 	bl	8007108 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80066bc:	4b7a      	ldr	r3, [pc, #488]	; (80068a8 <MX_LWIP_Init+0x248>)
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	061a      	lsls	r2, r3, #24
 80066c2:	4b79      	ldr	r3, [pc, #484]	; (80068a8 <MX_LWIP_Init+0x248>)
 80066c4:	785b      	ldrb	r3, [r3, #1]
 80066c6:	041b      	lsls	r3, r3, #16
 80066c8:	431a      	orrs	r2, r3
 80066ca:	4b77      	ldr	r3, [pc, #476]	; (80068a8 <MX_LWIP_Init+0x248>)
 80066cc:	789b      	ldrb	r3, [r3, #2]
 80066ce:	021b      	lsls	r3, r3, #8
 80066d0:	4313      	orrs	r3, r2
 80066d2:	4a75      	ldr	r2, [pc, #468]	; (80068a8 <MX_LWIP_Init+0x248>)
 80066d4:	78d2      	ldrb	r2, [r2, #3]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	061a      	lsls	r2, r3, #24
 80066da:	4b73      	ldr	r3, [pc, #460]	; (80068a8 <MX_LWIP_Init+0x248>)
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	0619      	lsls	r1, r3, #24
 80066e0:	4b71      	ldr	r3, [pc, #452]	; (80068a8 <MX_LWIP_Init+0x248>)
 80066e2:	785b      	ldrb	r3, [r3, #1]
 80066e4:	041b      	lsls	r3, r3, #16
 80066e6:	4319      	orrs	r1, r3
 80066e8:	4b6f      	ldr	r3, [pc, #444]	; (80068a8 <MX_LWIP_Init+0x248>)
 80066ea:	789b      	ldrb	r3, [r3, #2]
 80066ec:	021b      	lsls	r3, r3, #8
 80066ee:	430b      	orrs	r3, r1
 80066f0:	496d      	ldr	r1, [pc, #436]	; (80068a8 <MX_LWIP_Init+0x248>)
 80066f2:	78c9      	ldrb	r1, [r1, #3]
 80066f4:	430b      	orrs	r3, r1
 80066f6:	021b      	lsls	r3, r3, #8
 80066f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066fc:	431a      	orrs	r2, r3
 80066fe:	4b6a      	ldr	r3, [pc, #424]	; (80068a8 <MX_LWIP_Init+0x248>)
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	0619      	lsls	r1, r3, #24
 8006704:	4b68      	ldr	r3, [pc, #416]	; (80068a8 <MX_LWIP_Init+0x248>)
 8006706:	785b      	ldrb	r3, [r3, #1]
 8006708:	041b      	lsls	r3, r3, #16
 800670a:	4319      	orrs	r1, r3
 800670c:	4b66      	ldr	r3, [pc, #408]	; (80068a8 <MX_LWIP_Init+0x248>)
 800670e:	789b      	ldrb	r3, [r3, #2]
 8006710:	021b      	lsls	r3, r3, #8
 8006712:	430b      	orrs	r3, r1
 8006714:	4964      	ldr	r1, [pc, #400]	; (80068a8 <MX_LWIP_Init+0x248>)
 8006716:	78c9      	ldrb	r1, [r1, #3]
 8006718:	430b      	orrs	r3, r1
 800671a:	0a1b      	lsrs	r3, r3, #8
 800671c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006720:	431a      	orrs	r2, r3
 8006722:	4b61      	ldr	r3, [pc, #388]	; (80068a8 <MX_LWIP_Init+0x248>)
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	0619      	lsls	r1, r3, #24
 8006728:	4b5f      	ldr	r3, [pc, #380]	; (80068a8 <MX_LWIP_Init+0x248>)
 800672a:	785b      	ldrb	r3, [r3, #1]
 800672c:	041b      	lsls	r3, r3, #16
 800672e:	4319      	orrs	r1, r3
 8006730:	4b5d      	ldr	r3, [pc, #372]	; (80068a8 <MX_LWIP_Init+0x248>)
 8006732:	789b      	ldrb	r3, [r3, #2]
 8006734:	021b      	lsls	r3, r3, #8
 8006736:	430b      	orrs	r3, r1
 8006738:	495b      	ldr	r1, [pc, #364]	; (80068a8 <MX_LWIP_Init+0x248>)
 800673a:	78c9      	ldrb	r1, [r1, #3]
 800673c:	430b      	orrs	r3, r1
 800673e:	0e1b      	lsrs	r3, r3, #24
 8006740:	4313      	orrs	r3, r2
 8006742:	4a5d      	ldr	r2, [pc, #372]	; (80068b8 <MX_LWIP_Init+0x258>)
 8006744:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006746:	4b59      	ldr	r3, [pc, #356]	; (80068ac <MX_LWIP_Init+0x24c>)
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	061a      	lsls	r2, r3, #24
 800674c:	4b57      	ldr	r3, [pc, #348]	; (80068ac <MX_LWIP_Init+0x24c>)
 800674e:	785b      	ldrb	r3, [r3, #1]
 8006750:	041b      	lsls	r3, r3, #16
 8006752:	431a      	orrs	r2, r3
 8006754:	4b55      	ldr	r3, [pc, #340]	; (80068ac <MX_LWIP_Init+0x24c>)
 8006756:	789b      	ldrb	r3, [r3, #2]
 8006758:	021b      	lsls	r3, r3, #8
 800675a:	4313      	orrs	r3, r2
 800675c:	4a53      	ldr	r2, [pc, #332]	; (80068ac <MX_LWIP_Init+0x24c>)
 800675e:	78d2      	ldrb	r2, [r2, #3]
 8006760:	4313      	orrs	r3, r2
 8006762:	061a      	lsls	r2, r3, #24
 8006764:	4b51      	ldr	r3, [pc, #324]	; (80068ac <MX_LWIP_Init+0x24c>)
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	0619      	lsls	r1, r3, #24
 800676a:	4b50      	ldr	r3, [pc, #320]	; (80068ac <MX_LWIP_Init+0x24c>)
 800676c:	785b      	ldrb	r3, [r3, #1]
 800676e:	041b      	lsls	r3, r3, #16
 8006770:	4319      	orrs	r1, r3
 8006772:	4b4e      	ldr	r3, [pc, #312]	; (80068ac <MX_LWIP_Init+0x24c>)
 8006774:	789b      	ldrb	r3, [r3, #2]
 8006776:	021b      	lsls	r3, r3, #8
 8006778:	430b      	orrs	r3, r1
 800677a:	494c      	ldr	r1, [pc, #304]	; (80068ac <MX_LWIP_Init+0x24c>)
 800677c:	78c9      	ldrb	r1, [r1, #3]
 800677e:	430b      	orrs	r3, r1
 8006780:	021b      	lsls	r3, r3, #8
 8006782:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006786:	431a      	orrs	r2, r3
 8006788:	4b48      	ldr	r3, [pc, #288]	; (80068ac <MX_LWIP_Init+0x24c>)
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	0619      	lsls	r1, r3, #24
 800678e:	4b47      	ldr	r3, [pc, #284]	; (80068ac <MX_LWIP_Init+0x24c>)
 8006790:	785b      	ldrb	r3, [r3, #1]
 8006792:	041b      	lsls	r3, r3, #16
 8006794:	4319      	orrs	r1, r3
 8006796:	4b45      	ldr	r3, [pc, #276]	; (80068ac <MX_LWIP_Init+0x24c>)
 8006798:	789b      	ldrb	r3, [r3, #2]
 800679a:	021b      	lsls	r3, r3, #8
 800679c:	430b      	orrs	r3, r1
 800679e:	4943      	ldr	r1, [pc, #268]	; (80068ac <MX_LWIP_Init+0x24c>)
 80067a0:	78c9      	ldrb	r1, [r1, #3]
 80067a2:	430b      	orrs	r3, r1
 80067a4:	0a1b      	lsrs	r3, r3, #8
 80067a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80067aa:	431a      	orrs	r2, r3
 80067ac:	4b3f      	ldr	r3, [pc, #252]	; (80068ac <MX_LWIP_Init+0x24c>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	0619      	lsls	r1, r3, #24
 80067b2:	4b3e      	ldr	r3, [pc, #248]	; (80068ac <MX_LWIP_Init+0x24c>)
 80067b4:	785b      	ldrb	r3, [r3, #1]
 80067b6:	041b      	lsls	r3, r3, #16
 80067b8:	4319      	orrs	r1, r3
 80067ba:	4b3c      	ldr	r3, [pc, #240]	; (80068ac <MX_LWIP_Init+0x24c>)
 80067bc:	789b      	ldrb	r3, [r3, #2]
 80067be:	021b      	lsls	r3, r3, #8
 80067c0:	430b      	orrs	r3, r1
 80067c2:	493a      	ldr	r1, [pc, #232]	; (80068ac <MX_LWIP_Init+0x24c>)
 80067c4:	78c9      	ldrb	r1, [r1, #3]
 80067c6:	430b      	orrs	r3, r1
 80067c8:	0e1b      	lsrs	r3, r3, #24
 80067ca:	4313      	orrs	r3, r2
 80067cc:	4a3b      	ldr	r2, [pc, #236]	; (80068bc <MX_LWIP_Init+0x25c>)
 80067ce:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80067d0:	4b37      	ldr	r3, [pc, #220]	; (80068b0 <MX_LWIP_Init+0x250>)
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	061a      	lsls	r2, r3, #24
 80067d6:	4b36      	ldr	r3, [pc, #216]	; (80068b0 <MX_LWIP_Init+0x250>)
 80067d8:	785b      	ldrb	r3, [r3, #1]
 80067da:	041b      	lsls	r3, r3, #16
 80067dc:	431a      	orrs	r2, r3
 80067de:	4b34      	ldr	r3, [pc, #208]	; (80068b0 <MX_LWIP_Init+0x250>)
 80067e0:	789b      	ldrb	r3, [r3, #2]
 80067e2:	021b      	lsls	r3, r3, #8
 80067e4:	4313      	orrs	r3, r2
 80067e6:	4a32      	ldr	r2, [pc, #200]	; (80068b0 <MX_LWIP_Init+0x250>)
 80067e8:	78d2      	ldrb	r2, [r2, #3]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	061a      	lsls	r2, r3, #24
 80067ee:	4b30      	ldr	r3, [pc, #192]	; (80068b0 <MX_LWIP_Init+0x250>)
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	0619      	lsls	r1, r3, #24
 80067f4:	4b2e      	ldr	r3, [pc, #184]	; (80068b0 <MX_LWIP_Init+0x250>)
 80067f6:	785b      	ldrb	r3, [r3, #1]
 80067f8:	041b      	lsls	r3, r3, #16
 80067fa:	4319      	orrs	r1, r3
 80067fc:	4b2c      	ldr	r3, [pc, #176]	; (80068b0 <MX_LWIP_Init+0x250>)
 80067fe:	789b      	ldrb	r3, [r3, #2]
 8006800:	021b      	lsls	r3, r3, #8
 8006802:	430b      	orrs	r3, r1
 8006804:	492a      	ldr	r1, [pc, #168]	; (80068b0 <MX_LWIP_Init+0x250>)
 8006806:	78c9      	ldrb	r1, [r1, #3]
 8006808:	430b      	orrs	r3, r1
 800680a:	021b      	lsls	r3, r3, #8
 800680c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006810:	431a      	orrs	r2, r3
 8006812:	4b27      	ldr	r3, [pc, #156]	; (80068b0 <MX_LWIP_Init+0x250>)
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	0619      	lsls	r1, r3, #24
 8006818:	4b25      	ldr	r3, [pc, #148]	; (80068b0 <MX_LWIP_Init+0x250>)
 800681a:	785b      	ldrb	r3, [r3, #1]
 800681c:	041b      	lsls	r3, r3, #16
 800681e:	4319      	orrs	r1, r3
 8006820:	4b23      	ldr	r3, [pc, #140]	; (80068b0 <MX_LWIP_Init+0x250>)
 8006822:	789b      	ldrb	r3, [r3, #2]
 8006824:	021b      	lsls	r3, r3, #8
 8006826:	430b      	orrs	r3, r1
 8006828:	4921      	ldr	r1, [pc, #132]	; (80068b0 <MX_LWIP_Init+0x250>)
 800682a:	78c9      	ldrb	r1, [r1, #3]
 800682c:	430b      	orrs	r3, r1
 800682e:	0a1b      	lsrs	r3, r3, #8
 8006830:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006834:	431a      	orrs	r2, r3
 8006836:	4b1e      	ldr	r3, [pc, #120]	; (80068b0 <MX_LWIP_Init+0x250>)
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	0619      	lsls	r1, r3, #24
 800683c:	4b1c      	ldr	r3, [pc, #112]	; (80068b0 <MX_LWIP_Init+0x250>)
 800683e:	785b      	ldrb	r3, [r3, #1]
 8006840:	041b      	lsls	r3, r3, #16
 8006842:	4319      	orrs	r1, r3
 8006844:	4b1a      	ldr	r3, [pc, #104]	; (80068b0 <MX_LWIP_Init+0x250>)
 8006846:	789b      	ldrb	r3, [r3, #2]
 8006848:	021b      	lsls	r3, r3, #8
 800684a:	430b      	orrs	r3, r1
 800684c:	4918      	ldr	r1, [pc, #96]	; (80068b0 <MX_LWIP_Init+0x250>)
 800684e:	78c9      	ldrb	r1, [r1, #3]
 8006850:	430b      	orrs	r3, r1
 8006852:	0e1b      	lsrs	r3, r3, #24
 8006854:	4313      	orrs	r3, r2
 8006856:	4a1a      	ldr	r2, [pc, #104]	; (80068c0 <MX_LWIP_Init+0x260>)
 8006858:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800685a:	4b1a      	ldr	r3, [pc, #104]	; (80068c4 <MX_LWIP_Init+0x264>)
 800685c:	9302      	str	r3, [sp, #8]
 800685e:	4b1a      	ldr	r3, [pc, #104]	; (80068c8 <MX_LWIP_Init+0x268>)
 8006860:	9301      	str	r3, [sp, #4]
 8006862:	2300      	movs	r3, #0
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	4b16      	ldr	r3, [pc, #88]	; (80068c0 <MX_LWIP_Init+0x260>)
 8006868:	4a14      	ldr	r2, [pc, #80]	; (80068bc <MX_LWIP_Init+0x25c>)
 800686a:	4913      	ldr	r1, [pc, #76]	; (80068b8 <MX_LWIP_Init+0x258>)
 800686c:	4817      	ldr	r0, [pc, #92]	; (80068cc <MX_LWIP_Init+0x26c>)
 800686e:	f001 f933 	bl	8007ad8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006872:	4816      	ldr	r0, [pc, #88]	; (80068cc <MX_LWIP_Init+0x26c>)
 8006874:	f001 fae2 	bl	8007e3c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006878:	4b14      	ldr	r3, [pc, #80]	; (80068cc <MX_LWIP_Init+0x26c>)
 800687a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800687e:	089b      	lsrs	r3, r3, #2
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d003      	beq.n	8006892 <MX_LWIP_Init+0x232>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800688a:	4810      	ldr	r0, [pc, #64]	; (80068cc <MX_LWIP_Init+0x26c>)
 800688c:	f001 fae6 	bl	8007e5c <netif_set_up>
 8006890:	e002      	b.n	8006898 <MX_LWIP_Init+0x238>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8006892:	480e      	ldr	r0, [pc, #56]	; (80068cc <MX_LWIP_Init+0x26c>)
 8006894:	f001 fb4e 	bl	8007f34 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006898:	490d      	ldr	r1, [pc, #52]	; (80068d0 <MX_LWIP_Init+0x270>)
 800689a:	480c      	ldr	r0, [pc, #48]	; (80068cc <MX_LWIP_Init+0x26c>)
 800689c:	f001 fbe0 	bl	8008060 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80068a0:	bf00      	nop
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	2000044c 	.word	0x2000044c
 80068ac:	20000450 	.word	0x20000450
 80068b0:	20000454 	.word	0x20000454
 80068b4:	40020400 	.word	0x40020400
 80068b8:	20000440 	.word	0x20000440
 80068bc:	20000444 	.word	0x20000444
 80068c0:	20000448 	.word	0x20000448
 80068c4:	08010a81 	.word	0x08010a81
 80068c8:	08006b0d 	.word	0x08006b0d
 80068cc:	2000040c 	.word	0x2000040c
 80068d0:	080068d5 	.word	0x080068d5

080068d4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80068f0:	2300      	movs	r3, #0
 80068f2:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80068f4:	4b40      	ldr	r3, [pc, #256]	; (80069f8 <low_level_init+0x110>)
 80068f6:	4a41      	ldr	r2, [pc, #260]	; (80069fc <low_level_init+0x114>)
 80068f8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x80;
 80068fa:	2380      	movs	r3, #128	; 0x80
 80068fc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80068fe:	2380      	movs	r3, #128	; 0x80
 8006900:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xA2;
 8006902:	23a2      	movs	r3, #162	; 0xa2
 8006904:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0xAE;
 8006906:	23ae      	movs	r3, #174	; 0xae
 8006908:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x13;
 800690a:	2313      	movs	r3, #19
 800690c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x41;
 800690e:	2341      	movs	r3, #65	; 0x41
 8006910:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8006912:	4a39      	ldr	r2, [pc, #228]	; (80069f8 <low_level_init+0x110>)
 8006914:	f107 0308 	add.w	r3, r7, #8
 8006918:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800691a:	4b37      	ldr	r3, [pc, #220]	; (80069f8 <low_level_init+0x110>)
 800691c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006920:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006922:	4b35      	ldr	r3, [pc, #212]	; (80069f8 <low_level_init+0x110>)
 8006924:	4a36      	ldr	r2, [pc, #216]	; (8006a00 <low_level_init+0x118>)
 8006926:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006928:	4b33      	ldr	r3, [pc, #204]	; (80069f8 <low_level_init+0x110>)
 800692a:	4a36      	ldr	r2, [pc, #216]	; (8006a04 <low_level_init+0x11c>)
 800692c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800692e:	4b32      	ldr	r3, [pc, #200]	; (80069f8 <low_level_init+0x110>)
 8006930:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006934:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006936:	4830      	ldr	r0, [pc, #192]	; (80069f8 <low_level_init+0x110>)
 8006938:	f7fc f9ca 	bl	8002cd0 <HAL_ETH_Init>
 800693c:	4603      	mov	r3, r0
 800693e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006940:	2238      	movs	r2, #56	; 0x38
 8006942:	2100      	movs	r1, #0
 8006944:	4830      	ldr	r0, [pc, #192]	; (8006a08 <low_level_init+0x120>)
 8006946:	f00a f9b3 	bl	8010cb0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800694a:	4b2f      	ldr	r3, [pc, #188]	; (8006a08 <low_level_init+0x120>)
 800694c:	2221      	movs	r2, #33	; 0x21
 800694e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006950:	4b2d      	ldr	r3, [pc, #180]	; (8006a08 <low_level_init+0x120>)
 8006952:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8006956:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006958:	4b2b      	ldr	r3, [pc, #172]	; (8006a08 <low_level_init+0x120>)
 800695a:	2200      	movs	r2, #0
 800695c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800695e:	482b      	ldr	r0, [pc, #172]	; (8006a0c <low_level_init+0x124>)
 8006960:	f000 ff82 	bl	8007868 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2206      	movs	r2, #6
 8006968:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800696c:	4b22      	ldr	r3, [pc, #136]	; (80069f8 <low_level_init+0x110>)
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	781a      	ldrb	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006978:	4b1f      	ldr	r3, [pc, #124]	; (80069f8 <low_level_init+0x110>)
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	785a      	ldrb	r2, [r3, #1]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006984:	4b1c      	ldr	r3, [pc, #112]	; (80069f8 <low_level_init+0x110>)
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	789a      	ldrb	r2, [r3, #2]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006990:	4b19      	ldr	r3, [pc, #100]	; (80069f8 <low_level_init+0x110>)
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	78da      	ldrb	r2, [r3, #3]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800699c:	4b16      	ldr	r3, [pc, #88]	; (80069f8 <low_level_init+0x110>)
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	791a      	ldrb	r2, [r3, #4]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80069a8:	4b13      	ldr	r3, [pc, #76]	; (80069f8 <low_level_init+0x110>)
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	795a      	ldrb	r2, [r3, #5]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80069ba:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80069c2:	f043 030a 	orr.w	r3, r3, #10
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 80069ce:	4910      	ldr	r1, [pc, #64]	; (8006a10 <low_level_init+0x128>)
 80069d0:	4810      	ldr	r0, [pc, #64]	; (8006a14 <low_level_init+0x12c>)
 80069d2:	f7fb fb08 	bl	8001fe6 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 80069d6:	480f      	ldr	r0, [pc, #60]	; (8006a14 <low_level_init+0x12c>)
 80069d8:	f7fb fb37 	bl	800204a <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d103      	bne.n	80069ea <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f9ea 	bl	8006dbc <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80069e8:	e001      	b.n	80069ee <low_level_init+0x106>
    Error_Handler();
 80069ea:	f7fa fd96 	bl	800151a <Error_Handler>
}
 80069ee:	bf00      	nop
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	20004f28 	.word	0x20004f28
 80069fc:	40028000 	.word	0x40028000
 8006a00:	20004e88 	.word	0x20004e88
 8006a04:	20004de8 	.word	0x20004de8
 8006a08:	20004fd8 	.word	0x20004fd8
 8006a0c:	08014860 	.word	0x08014860
 8006a10:	2000000c 	.word	0x2000000c
 8006a14:	20005010 	.word	0x20005010

08006a18 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b092      	sub	sp, #72	; 0x48
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8006a26:	2300      	movs	r3, #0
 8006a28:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006a30:	f107 030c 	add.w	r3, r7, #12
 8006a34:	2230      	movs	r2, #48	; 0x30
 8006a36:	2100      	movs	r1, #0
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f00a f939 	bl	8010cb0 <memset>

  for(q = p; q != NULL; q = q->next)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	643b      	str	r3, [r7, #64]	; 0x40
 8006a42:	e045      	b.n	8006ad0 <low_level_output+0xb8>
  {
    if(i >= ETH_TX_DESC_CNT)
 8006a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d902      	bls.n	8006a50 <low_level_output+0x38>
      return ERR_IF;
 8006a4a:	f06f 030b 	mvn.w	r3, #11
 8006a4e:	e055      	b.n	8006afc <low_level_output+0xe4>

    Txbuffer[i].buffer = q->payload;
 8006a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a52:	6859      	ldr	r1, [r3, #4]
 8006a54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a56:	4613      	mov	r3, r2
 8006a58:	005b      	lsls	r3, r3, #1
 8006a5a:	4413      	add	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	3348      	adds	r3, #72	; 0x48
 8006a60:	443b      	add	r3, r7
 8006a62:	3b3c      	subs	r3, #60	; 0x3c
 8006a64:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a68:	895b      	ldrh	r3, [r3, #10]
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a6e:	4613      	mov	r3, r2
 8006a70:	005b      	lsls	r3, r3, #1
 8006a72:	4413      	add	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	3348      	adds	r3, #72	; 0x48
 8006a78:	443b      	add	r3, r7
 8006a7a:	3b38      	subs	r3, #56	; 0x38
 8006a7c:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d011      	beq.n	8006aa8 <low_level_output+0x90>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a86:	1e5a      	subs	r2, r3, #1
 8006a88:	f107 000c 	add.w	r0, r7, #12
 8006a8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a8e:	460b      	mov	r3, r1
 8006a90:	005b      	lsls	r3, r3, #1
 8006a92:	440b      	add	r3, r1
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	18c1      	adds	r1, r0, r3
 8006a98:	4613      	mov	r3, r2
 8006a9a:	005b      	lsls	r3, r3, #1
 8006a9c:	4413      	add	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	3348      	adds	r3, #72	; 0x48
 8006aa2:	443b      	add	r3, r7
 8006aa4:	3b34      	subs	r3, #52	; 0x34
 8006aa6:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d109      	bne.n	8006ac4 <low_level_output+0xac>
    {
      Txbuffer[i].next = NULL;
 8006ab0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	4413      	add	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	3348      	adds	r3, #72	; 0x48
 8006abc:	443b      	add	r3, r7
 8006abe:	3b34      	subs	r3, #52	; 0x34
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8006aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	643b      	str	r3, [r7, #64]	; 0x40
 8006ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1b6      	bne.n	8006a44 <low_level_output+0x2c>
  }

  TxConfig.Length = p->tot_len;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	891b      	ldrh	r3, [r3, #8]
 8006ada:	461a      	mov	r2, r3
 8006adc:	4b09      	ldr	r3, [pc, #36]	; (8006b04 <low_level_output+0xec>)
 8006ade:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006ae0:	4a08      	ldr	r2, [pc, #32]	; (8006b04 <low_level_output+0xec>)
 8006ae2:	f107 030c 	add.w	r3, r7, #12
 8006ae6:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006ae8:	4a06      	ldr	r2, [pc, #24]	; (8006b04 <low_level_output+0xec>)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8006aee:	2214      	movs	r2, #20
 8006af0:	4904      	ldr	r1, [pc, #16]	; (8006b04 <low_level_output+0xec>)
 8006af2:	4805      	ldr	r0, [pc, #20]	; (8006b08 <low_level_output+0xf0>)
 8006af4:	f7fc f9f2 	bl	8002edc <HAL_ETH_Transmit>

  return errval;
 8006af8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3748      	adds	r7, #72	; 0x48
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	20004fd8 	.word	0x20004fd8
 8006b08:	20004f28 	.word	0x20004f28

08006b0c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d106      	bne.n	8006b28 <ethernetif_init+0x1c>
 8006b1a:	4b0e      	ldr	r3, [pc, #56]	; (8006b54 <ethernetif_init+0x48>)
 8006b1c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8006b20:	490d      	ldr	r1, [pc, #52]	; (8006b58 <ethernetif_init+0x4c>)
 8006b22:	480e      	ldr	r0, [pc, #56]	; (8006b5c <ethernetif_init+0x50>)
 8006b24:	f00a f8cc 	bl	8010cc0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2273      	movs	r2, #115	; 0x73
 8006b2c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2274      	movs	r2, #116	; 0x74
 8006b34:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a09      	ldr	r2, [pc, #36]	; (8006b60 <ethernetif_init+0x54>)
 8006b3c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a08      	ldr	r2, [pc, #32]	; (8006b64 <ethernetif_init+0x58>)
 8006b42:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f7ff fecf 	bl	80068e8 <low_level_init>

  return ERR_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	08011d78 	.word	0x08011d78
 8006b58:	08011d94 	.word	0x08011d94
 8006b5c:	08011da4 	.word	0x08011da4
 8006b60:	0800eec5 	.word	0x0800eec5
 8006b64:	08006a19 	.word	0x08006a19

08006b68 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006b74:	68f9      	ldr	r1, [r7, #12]
 8006b76:	4808      	ldr	r0, [pc, #32]	; (8006b98 <pbuf_free_custom+0x30>)
 8006b78:	f000 ff58 	bl	8007a2c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006b7c:	4b07      	ldr	r3, [pc, #28]	; (8006b9c <pbuf_free_custom+0x34>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d105      	bne.n	8006b90 <pbuf_free_custom+0x28>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006b84:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <pbuf_free_custom+0x34>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	701a      	strb	r2, [r3, #0]
    RxPkt = 1 ;
 8006b8a:	4b05      	ldr	r3, [pc, #20]	; (8006ba0 <pbuf_free_custom+0x38>)
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]
  }
}
 8006b90:	bf00      	nop
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	08014860 	.word	0x08014860
 8006b9c:	20004de0 	.word	0x20004de0
 8006ba0:	20004de4 	.word	0x20004de4

08006ba4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006ba8:	f7fb fbb4 	bl	8002314 <HAL_GetTick>
 8006bac:	4603      	mov	r3, r0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	bd80      	pop	{r7, pc}
	...

08006bb4 <HAL_ETH_MspInit>:

/* USER CODE END 6 */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b08e      	sub	sp, #56	; 0x38
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	605a      	str	r2, [r3, #4]
 8006bc6:	609a      	str	r2, [r3, #8]
 8006bc8:	60da      	str	r2, [r3, #12]
 8006bca:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a4e      	ldr	r2, [pc, #312]	; (8006d0c <HAL_ETH_MspInit+0x158>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	f040 8095 	bne.w	8006d02 <HAL_ETH_MspInit+0x14e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006bd8:	2300      	movs	r3, #0
 8006bda:	623b      	str	r3, [r7, #32]
 8006bdc:	4b4c      	ldr	r3, [pc, #304]	; (8006d10 <HAL_ETH_MspInit+0x15c>)
 8006bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be0:	4a4b      	ldr	r2, [pc, #300]	; (8006d10 <HAL_ETH_MspInit+0x15c>)
 8006be2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006be6:	6313      	str	r3, [r2, #48]	; 0x30
 8006be8:	4b49      	ldr	r3, [pc, #292]	; (8006d10 <HAL_ETH_MspInit+0x15c>)
 8006bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bf0:	623b      	str	r3, [r7, #32]
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	61fb      	str	r3, [r7, #28]
 8006bf8:	4b45      	ldr	r3, [pc, #276]	; (8006d10 <HAL_ETH_MspInit+0x15c>)
 8006bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfc:	4a44      	ldr	r2, [pc, #272]	; (8006d10 <HAL_ETH_MspInit+0x15c>)
 8006bfe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c02:	6313      	str	r3, [r2, #48]	; 0x30
 8006c04:	4b42      	ldr	r3, [pc, #264]	; (8006d10 <HAL_ETH_MspInit+0x15c>)
 8006c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c0c:	61fb      	str	r3, [r7, #28]
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	2300      	movs	r3, #0
 8006c12:	61bb      	str	r3, [r7, #24]
 8006c14:	4b3e      	ldr	r3, [pc, #248]	; (8006d10 <HAL_ETH_MspInit+0x15c>)
 8006c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c18:	4a3d      	ldr	r2, [pc, #244]	; (8006d10 <HAL_ETH_MspInit+0x15c>)
 8006c1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8006c20:	4b3b      	ldr	r3, [pc, #236]	; (8006d10 <HAL_ETH_MspInit+0x15c>)
 8006c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c28:	61bb      	str	r3, [r7, #24]
 8006c2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	617b      	str	r3, [r7, #20]
 8006c30:	4b37      	ldr	r3, [pc, #220]	; (8006d10 <HAL_ETH_MspInit+0x15c>)
 8006c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c34:	4a36      	ldr	r2, [pc, #216]	; (8006d10 <HAL_ETH_MspInit+0x15c>)
 8006c36:	f043 0304 	orr.w	r3, r3, #4
 8006c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8006c3c:	4b34      	ldr	r3, [pc, #208]	; (8006d10 <HAL_ETH_MspInit+0x15c>)
 8006c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c40:	f003 0304 	and.w	r3, r3, #4
 8006c44:	617b      	str	r3, [r7, #20]
 8006c46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c48:	2300      	movs	r3, #0
 8006c4a:	613b      	str	r3, [r7, #16]
 8006c4c:	4b30      	ldr	r3, [pc, #192]	; (8006d10 <HAL_ETH_MspInit+0x15c>)
 8006c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c50:	4a2f      	ldr	r2, [pc, #188]	; (8006d10 <HAL_ETH_MspInit+0x15c>)
 8006c52:	f043 0301 	orr.w	r3, r3, #1
 8006c56:	6313      	str	r3, [r2, #48]	; 0x30
 8006c58:	4b2d      	ldr	r3, [pc, #180]	; (8006d10 <HAL_ETH_MspInit+0x15c>)
 8006c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5c:	f003 0301 	and.w	r3, r3, #1
 8006c60:	613b      	str	r3, [r7, #16]
 8006c62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c64:	2300      	movs	r3, #0
 8006c66:	60fb      	str	r3, [r7, #12]
 8006c68:	4b29      	ldr	r3, [pc, #164]	; (8006d10 <HAL_ETH_MspInit+0x15c>)
 8006c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6c:	4a28      	ldr	r2, [pc, #160]	; (8006d10 <HAL_ETH_MspInit+0x15c>)
 8006c6e:	f043 0302 	orr.w	r3, r3, #2
 8006c72:	6313      	str	r3, [r2, #48]	; 0x30
 8006c74:	4b26      	ldr	r3, [pc, #152]	; (8006d10 <HAL_ETH_MspInit+0x15c>)
 8006c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c78:	f003 0302 	and.w	r3, r3, #2
 8006c7c:	60fb      	str	r3, [r7, #12]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006c80:	2302      	movs	r3, #2
 8006c82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c84:	2302      	movs	r3, #2
 8006c86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006c90:	230b      	movs	r3, #11
 8006c92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c98:	4619      	mov	r1, r3
 8006c9a:	481e      	ldr	r0, [pc, #120]	; (8006d14 <HAL_ETH_MspInit+0x160>)
 8006c9c:	f7fc fffe 	bl	8003c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8006ca0:	2386      	movs	r3, #134	; 0x86
 8006ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cac:	2303      	movs	r3, #3
 8006cae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006cb0:	230b      	movs	r3, #11
 8006cb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4817      	ldr	r0, [pc, #92]	; (8006d18 <HAL_ETH_MspInit+0x164>)
 8006cbc:	f7fc ffee 	bl	8003c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006cc0:	2330      	movs	r3, #48	; 0x30
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006cc8:	2302      	movs	r3, #2
 8006cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006cd0:	230b      	movs	r3, #11
 8006cd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cd8:	4619      	mov	r1, r3
 8006cda:	480e      	ldr	r0, [pc, #56]	; (8006d14 <HAL_ETH_MspInit+0x160>)
 8006cdc:	f7fc ffde 	bl	8003c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8006ce0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006ce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cea:	2300      	movs	r3, #0
 8006cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006cf2:	230b      	movs	r3, #11
 8006cf4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	4807      	ldr	r0, [pc, #28]	; (8006d1c <HAL_ETH_MspInit+0x168>)
 8006cfe:	f7fc ffcd 	bl	8003c9c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006d02:	bf00      	nop
 8006d04:	3738      	adds	r7, #56	; 0x38
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	40028000 	.word	0x40028000
 8006d10:	40023800 	.word	0x40023800
 8006d14:	40020800 	.word	0x40020800
 8006d18:	40020000 	.word	0x40020000
 8006d1c:	40020400 	.word	0x40020400

08006d20 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006d24:	4802      	ldr	r0, [pc, #8]	; (8006d30 <ETH_PHY_IO_Init+0x10>)
 8006d26:	f7fc fb71 	bl	800340c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	20004f28 	.word	0x20004f28

08006d34 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006d34:	b480      	push	{r7}
 8006d36:	af00      	add	r7, sp, #0
  return 0;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	68f9      	ldr	r1, [r7, #12]
 8006d56:	4807      	ldr	r0, [pc, #28]	; (8006d74 <ETH_PHY_IO_ReadReg+0x30>)
 8006d58:	f7fc f9c6 	bl	80030e8 <HAL_ETH_ReadPHYRegister>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d002      	beq.n	8006d68 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006d62:	f04f 33ff 	mov.w	r3, #4294967295
 8006d66:	e000      	b.n	8006d6a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20004f28 	.word	0x20004f28

08006d78 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	68f9      	ldr	r1, [r7, #12]
 8006d8a:	4807      	ldr	r0, [pc, #28]	; (8006da8 <ETH_PHY_IO_WriteReg+0x30>)
 8006d8c:	f7fc f9f7 	bl	800317e <HAL_ETH_WritePHYRegister>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006d96:	f04f 33ff 	mov.w	r3, #4294967295
 8006d9a:	e000      	b.n	8006d9e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	20004f28 	.word	0x20004f28

08006dac <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006db0:	f7fb fab0 	bl	8002314 <HAL_GetTick>
 8006db4:	4603      	mov	r3, r0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	bd80      	pop	{r7, pc}
	...

08006dbc <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b0a0      	sub	sp, #128	; 0x80
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006dc4:	f107 030c 	add.w	r3, r7, #12
 8006dc8:	2264      	movs	r2, #100	; 0x64
 8006dca:	2100      	movs	r1, #0
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f009 ff6f 	bl	8010cb0 <memset>
  int32_t PHYLinkState = 0;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006dda:	2300      	movs	r3, #0
 8006ddc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006dde:	2300      	movs	r3, #0
 8006de0:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8006de2:	483a      	ldr	r0, [pc, #232]	; (8006ecc <ethernet_link_check_state+0x110>)
 8006de4:	f7fb f9d9 	bl	800219a <DP83848_GetLinkState>
 8006de8:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006df0:	089b      	lsrs	r3, r3, #2
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00c      	beq.n	8006e16 <ethernet_link_check_state+0x5a>
 8006dfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	dc09      	bgt.n	8006e16 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8006e02:	4833      	ldr	r0, [pc, #204]	; (8006ed0 <ethernet_link_check_state+0x114>)
 8006e04:	f7fc f82b 	bl	8002e5e <HAL_ETH_Stop>
    netif_set_down(netif);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f001 f893 	bl	8007f34 <netif_set_down>
    netif_set_link_down(netif);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f001 f8f6 	bl	8008000 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8006e14:	e055      	b.n	8006ec2 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006e1c:	f003 0304 	and.w	r3, r3, #4
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d14e      	bne.n	8006ec2 <ethernet_link_check_state+0x106>
 8006e24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	dd4b      	ble.n	8006ec2 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8006e2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e2c:	3b02      	subs	r3, #2
 8006e2e:	2b03      	cmp	r3, #3
 8006e30:	d82a      	bhi.n	8006e88 <ethernet_link_check_state+0xcc>
 8006e32:	a201      	add	r2, pc, #4	; (adr r2, 8006e38 <ethernet_link_check_state+0x7c>)
 8006e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e38:	08006e49 	.word	0x08006e49
 8006e3c:	08006e5b 	.word	0x08006e5b
 8006e40:	08006e6b 	.word	0x08006e6b
 8006e44:	08006e7b 	.word	0x08006e7b
      duplex = ETH_FULLDUPLEX_MODE;
 8006e48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e4c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8006e4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e52:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006e54:	2301      	movs	r3, #1
 8006e56:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006e58:	e017      	b.n	8006e8a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8006e5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e62:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006e64:	2301      	movs	r3, #1
 8006e66:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006e68:	e00f      	b.n	8006e8a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8006e6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e6e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8006e70:	2300      	movs	r3, #0
 8006e72:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006e74:	2301      	movs	r3, #1
 8006e76:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006e78:	e007      	b.n	8006e8a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006e82:	2301      	movs	r3, #1
 8006e84:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006e86:	e000      	b.n	8006e8a <ethernet_link_check_state+0xce>
      break;
 8006e88:	bf00      	nop
    if(linkchanged)
 8006e8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d018      	beq.n	8006ec2 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006e90:	f107 030c 	add.w	r3, r7, #12
 8006e94:	4619      	mov	r1, r3
 8006e96:	480e      	ldr	r0, [pc, #56]	; (8006ed0 <ethernet_link_check_state+0x114>)
 8006e98:	f7fc f9ba 	bl	8003210 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006e9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e9e:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8006ea0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ea2:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006ea4:	f107 030c 	add.w	r3, r7, #12
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	4809      	ldr	r0, [pc, #36]	; (8006ed0 <ethernet_link_check_state+0x114>)
 8006eac:	f7fc fa93 	bl	80033d6 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8006eb0:	4807      	ldr	r0, [pc, #28]	; (8006ed0 <ethernet_link_check_state+0x114>)
 8006eb2:	f7fb ff8b 	bl	8002dcc <HAL_ETH_Start>
      netif_set_up(netif);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 ffd0 	bl	8007e5c <netif_set_up>
      netif_set_link_up(netif);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f001 f86b 	bl	8007f98 <netif_set_link_up>
}
 8006ec2:	bf00      	nop
 8006ec4:	3780      	adds	r7, #128	; 0x80
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	20005010 	.word	0x20005010
 8006ed0:	20004f28 	.word	0x20004f28

08006ed4 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af02      	add	r7, sp, #8
 8006eda:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006edc:	4812      	ldr	r0, [pc, #72]	; (8006f28 <HAL_ETH_RxAllocateCallback+0x54>)
 8006ede:	f000 fd37 	bl	8007950 <memp_malloc_pool>
 8006ee2:	60f8      	str	r0, [r7, #12]
  if (p)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d014      	beq.n	8006f14 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f103 0220 	add.w	r2, r3, #32
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	4a0d      	ldr	r2, [pc, #52]	; (8006f2c <HAL_ETH_RxAllocateCallback+0x58>)
 8006ef8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006f02:	9201      	str	r2, [sp, #4]
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2241      	movs	r2, #65	; 0x41
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	f001 fa4d 	bl	80083ac <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006f12:	e005      	b.n	8006f20 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006f14:	4b06      	ldr	r3, [pc, #24]	; (8006f30 <HAL_ETH_RxAllocateCallback+0x5c>)
 8006f16:	2201      	movs	r2, #1
 8006f18:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	601a      	str	r2, [r3, #0]
}
 8006f20:	bf00      	nop
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	08014860 	.word	0x08014860
 8006f2c:	08006b69 	.word	0x08006b69
 8006f30:	20004de0 	.word	0x20004de0

08006f34 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006f3e:	88fb      	ldrh	r3, [r7, #6]
 8006f40:	021b      	lsls	r3, r3, #8
 8006f42:	b21a      	sxth	r2, r3
 8006f44:	88fb      	ldrh	r3, [r7, #6]
 8006f46:	0a1b      	lsrs	r3, r3, #8
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	b21b      	sxth	r3, r3
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	b21b      	sxth	r3, r3
 8006f50:	b29b      	uxth	r3, r3
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b083      	sub	sp, #12
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	061a      	lsls	r2, r3, #24
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	021b      	lsls	r3, r3, #8
 8006f6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f72:	431a      	orrs	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	0a1b      	lsrs	r3, r3, #8
 8006f78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006f7c:	431a      	orrs	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	0e1b      	lsrs	r3, r3, #24
 8006f82:	4313      	orrs	r3, r2
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b089      	sub	sp, #36	; 0x24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00d      	beq.n	8006fd0 <lwip_standard_chksum+0x40>
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	dd0a      	ble.n	8006fd0 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8006fba:	69fa      	ldr	r2, [r7, #28]
 8006fbc:	1c53      	adds	r3, r2, #1
 8006fbe:	61fb      	str	r3, [r7, #28]
 8006fc0:	f107 030e 	add.w	r3, r7, #14
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	7812      	ldrb	r2, [r2, #0]
 8006fc8:	701a      	strb	r2, [r3, #0]
    len--;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8006fd4:	e00a      	b.n	8006fec <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	1c9a      	adds	r2, r3, #2
 8006fda:	61ba      	str	r2, [r7, #24]
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	461a      	mov	r2, r3
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	617b      	str	r3, [r7, #20]
    len -= 2;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	3b02      	subs	r3, #2
 8006fea:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	dcf1      	bgt.n	8006fd6 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	dd04      	ble.n	8007002 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8006ff8:	f107 030e 	add.w	r3, r7, #14
 8006ffc:	69ba      	ldr	r2, [r7, #24]
 8006ffe:	7812      	ldrb	r2, [r2, #0]
 8007000:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8007002:	89fb      	ldrh	r3, [r7, #14]
 8007004:	461a      	mov	r2, r3
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	4413      	add	r3, r2
 800700a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	0c1a      	lsrs	r2, r3, #16
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	b29b      	uxth	r3, r3
 8007014:	4413      	add	r3, r2
 8007016:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	0c1a      	lsrs	r2, r3, #16
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	b29b      	uxth	r3, r3
 8007020:	4413      	add	r3, r2
 8007022:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d007      	beq.n	800703a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	021b      	lsls	r3, r3, #8
 800702e:	b29a      	uxth	r2, r3
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	0a1b      	lsrs	r3, r3, #8
 8007034:	b2db      	uxtb	r3, r3
 8007036:	4313      	orrs	r3, r2
 8007038:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	b29b      	uxth	r3, r3
}
 800703e:	4618      	mov	r0, r3
 8007040:	3724      	adds	r7, #36	; 0x24
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b082      	sub	sp, #8
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	460b      	mov	r3, r1
 8007054:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8007056:	887b      	ldrh	r3, [r7, #2]
 8007058:	4619      	mov	r1, r3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7ff ff98 	bl	8006f90 <lwip_standard_chksum>
 8007060:	4603      	mov	r3, r0
 8007062:	43db      	mvns	r3, r3
 8007064:	b29b      	uxth	r3, r3
}
 8007066:	4618      	mov	r0, r3
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b086      	sub	sp, #24
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8007076:	2300      	movs	r3, #0
 8007078:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800707a:	2300      	movs	r3, #0
 800707c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	613b      	str	r3, [r7, #16]
 8007082:	e02b      	b.n	80070dc <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	895b      	ldrh	r3, [r3, #10]
 800708c:	4619      	mov	r1, r3
 800708e:	4610      	mov	r0, r2
 8007090:	f7ff ff7e 	bl	8006f90 <lwip_standard_chksum>
 8007094:	4603      	mov	r3, r0
 8007096:	461a      	mov	r2, r3
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	4413      	add	r3, r2
 800709c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	0c1a      	lsrs	r2, r3, #16
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	4413      	add	r3, r2
 80070a8:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	895b      	ldrh	r3, [r3, #10]
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00e      	beq.n	80070d6 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	bf0c      	ite	eq
 80070be:	2301      	moveq	r3, #1
 80070c0:	2300      	movne	r3, #0
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	021b      	lsls	r3, r3, #8
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	0a1b      	lsrs	r3, r3, #8
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	4313      	orrs	r3, r2
 80070d4:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	613b      	str	r3, [r7, #16]
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1d0      	bne.n	8007084 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d007      	beq.n	80070f8 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	021b      	lsls	r3, r3, #8
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	0a1b      	lsrs	r3, r3, #8
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	4313      	orrs	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	43db      	mvns	r3, r3
 80070fe:	b29b      	uxth	r3, r3
}
 8007100:	4618      	mov	r0, r3
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800710e:	2300      	movs	r3, #0
 8007110:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8007112:	f000 f8d5 	bl	80072c0 <mem_init>
  memp_init();
 8007116:	f000 fbd7 	bl	80078c8 <memp_init>
  pbuf_init();
  netif_init();
 800711a:	f000 fcd5 	bl	8007ac8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800711e:	f007 f8bd 	bl	800e29c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007122:	f001 fd8b 	bl	8008c3c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007126:	f007 f871 	bl	800e20c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800712a:	bf00      	nop
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
	...

08007134 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	4603      	mov	r3, r0
 800713c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800713e:	4b05      	ldr	r3, [pc, #20]	; (8007154 <ptr_to_mem+0x20>)
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	88fb      	ldrh	r3, [r7, #6]
 8007144:	4413      	add	r3, r2
}
 8007146:	4618      	mov	r0, r3
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	20005048 	.word	0x20005048

08007158 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007160:	4b05      	ldr	r3, [pc, #20]	; (8007178 <mem_to_ptr+0x20>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	b29b      	uxth	r3, r3
}
 800716a:	4618      	mov	r0, r3
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	20005048 	.word	0x20005048

0800717c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800717c:	b590      	push	{r4, r7, lr}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007184:	4b45      	ldr	r3, [pc, #276]	; (800729c <plug_holes+0x120>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	429a      	cmp	r2, r3
 800718c:	d206      	bcs.n	800719c <plug_holes+0x20>
 800718e:	4b44      	ldr	r3, [pc, #272]	; (80072a0 <plug_holes+0x124>)
 8007190:	f240 12df 	movw	r2, #479	; 0x1df
 8007194:	4943      	ldr	r1, [pc, #268]	; (80072a4 <plug_holes+0x128>)
 8007196:	4844      	ldr	r0, [pc, #272]	; (80072a8 <plug_holes+0x12c>)
 8007198:	f009 fd92 	bl	8010cc0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800719c:	4b43      	ldr	r3, [pc, #268]	; (80072ac <plug_holes+0x130>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d306      	bcc.n	80071b4 <plug_holes+0x38>
 80071a6:	4b3e      	ldr	r3, [pc, #248]	; (80072a0 <plug_holes+0x124>)
 80071a8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80071ac:	4940      	ldr	r1, [pc, #256]	; (80072b0 <plug_holes+0x134>)
 80071ae:	483e      	ldr	r0, [pc, #248]	; (80072a8 <plug_holes+0x12c>)
 80071b0:	f009 fd86 	bl	8010cc0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	791b      	ldrb	r3, [r3, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d006      	beq.n	80071ca <plug_holes+0x4e>
 80071bc:	4b38      	ldr	r3, [pc, #224]	; (80072a0 <plug_holes+0x124>)
 80071be:	f240 12e1 	movw	r2, #481	; 0x1e1
 80071c2:	493c      	ldr	r1, [pc, #240]	; (80072b4 <plug_holes+0x138>)
 80071c4:	4838      	ldr	r0, [pc, #224]	; (80072a8 <plug_holes+0x12c>)
 80071c6:	f009 fd7b 	bl	8010cc0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	881b      	ldrh	r3, [r3, #0]
 80071ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80071d2:	d906      	bls.n	80071e2 <plug_holes+0x66>
 80071d4:	4b32      	ldr	r3, [pc, #200]	; (80072a0 <plug_holes+0x124>)
 80071d6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80071da:	4937      	ldr	r1, [pc, #220]	; (80072b8 <plug_holes+0x13c>)
 80071dc:	4832      	ldr	r0, [pc, #200]	; (80072a8 <plug_holes+0x12c>)
 80071de:	f009 fd6f 	bl	8010cc0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7ff ffa4 	bl	8007134 <ptr_to_mem>
 80071ec:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d024      	beq.n	8007240 <plug_holes+0xc4>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	791b      	ldrb	r3, [r3, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d120      	bne.n	8007240 <plug_holes+0xc4>
 80071fe:	4b2b      	ldr	r3, [pc, #172]	; (80072ac <plug_holes+0x130>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	429a      	cmp	r2, r3
 8007206:	d01b      	beq.n	8007240 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007208:	4b2c      	ldr	r3, [pc, #176]	; (80072bc <plug_holes+0x140>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	429a      	cmp	r2, r3
 8007210:	d102      	bne.n	8007218 <plug_holes+0x9c>
      lfree = mem;
 8007212:	4a2a      	ldr	r2, [pc, #168]	; (80072bc <plug_holes+0x140>)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	881a      	ldrh	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	881b      	ldrh	r3, [r3, #0]
 8007224:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007228:	d00a      	beq.n	8007240 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	4618      	mov	r0, r3
 8007230:	f7ff ff80 	bl	8007134 <ptr_to_mem>
 8007234:	4604      	mov	r4, r0
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7ff ff8e 	bl	8007158 <mem_to_ptr>
 800723c:	4603      	mov	r3, r0
 800723e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	885b      	ldrh	r3, [r3, #2]
 8007244:	4618      	mov	r0, r3
 8007246:	f7ff ff75 	bl	8007134 <ptr_to_mem>
 800724a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	429a      	cmp	r2, r3
 8007252:	d01f      	beq.n	8007294 <plug_holes+0x118>
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	791b      	ldrb	r3, [r3, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d11b      	bne.n	8007294 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800725c:	4b17      	ldr	r3, [pc, #92]	; (80072bc <plug_holes+0x140>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	429a      	cmp	r2, r3
 8007264:	d102      	bne.n	800726c <plug_holes+0xf0>
      lfree = pmem;
 8007266:	4a15      	ldr	r2, [pc, #84]	; (80072bc <plug_holes+0x140>)
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	881a      	ldrh	r2, [r3, #0]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	881b      	ldrh	r3, [r3, #0]
 8007278:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800727c:	d00a      	beq.n	8007294 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	881b      	ldrh	r3, [r3, #0]
 8007282:	4618      	mov	r0, r3
 8007284:	f7ff ff56 	bl	8007134 <ptr_to_mem>
 8007288:	4604      	mov	r4, r0
 800728a:	68b8      	ldr	r0, [r7, #8]
 800728c:	f7ff ff64 	bl	8007158 <mem_to_ptr>
 8007290:	4603      	mov	r3, r0
 8007292:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007294:	bf00      	nop
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	bd90      	pop	{r4, r7, pc}
 800729c:	20005048 	.word	0x20005048
 80072a0:	08011dcc 	.word	0x08011dcc
 80072a4:	08011dfc 	.word	0x08011dfc
 80072a8:	08011e14 	.word	0x08011e14
 80072ac:	2000504c 	.word	0x2000504c
 80072b0:	08011e3c 	.word	0x08011e3c
 80072b4:	08011e58 	.word	0x08011e58
 80072b8:	08011e74 	.word	0x08011e74
 80072bc:	20005050 	.word	0x20005050

080072c0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80072c6:	4b16      	ldr	r3, [pc, #88]	; (8007320 <mem_init+0x60>)
 80072c8:	4a16      	ldr	r2, [pc, #88]	; (8007324 <mem_init+0x64>)
 80072ca:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80072cc:	4b14      	ldr	r3, [pc, #80]	; (8007320 <mem_init+0x60>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80072d8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80072e6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80072ea:	f7ff ff23 	bl	8007134 <ptr_to_mem>
 80072ee:	4603      	mov	r3, r0
 80072f0:	4a0d      	ldr	r2, [pc, #52]	; (8007328 <mem_init+0x68>)
 80072f2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80072f4:	4b0c      	ldr	r3, [pc, #48]	; (8007328 <mem_init+0x68>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2201      	movs	r2, #1
 80072fa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80072fc:	4b0a      	ldr	r3, [pc, #40]	; (8007328 <mem_init+0x68>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007304:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007306:	4b08      	ldr	r3, [pc, #32]	; (8007328 <mem_init+0x68>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800730e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007310:	4b03      	ldr	r3, [pc, #12]	; (8007320 <mem_init+0x60>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a05      	ldr	r2, [pc, #20]	; (800732c <mem_init+0x6c>)
 8007316:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007318:	bf00      	nop
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	20005048 	.word	0x20005048
 8007324:	20019004 	.word	0x20019004
 8007328:	2000504c 	.word	0x2000504c
 800732c:	20005050 	.word	0x20005050

08007330 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7ff ff0d 	bl	8007158 <mem_to_ptr>
 800733e:	4603      	mov	r3, r0
 8007340:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	881b      	ldrh	r3, [r3, #0]
 8007346:	4618      	mov	r0, r3
 8007348:	f7ff fef4 	bl	8007134 <ptr_to_mem>
 800734c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	885b      	ldrh	r3, [r3, #2]
 8007352:	4618      	mov	r0, r3
 8007354:	f7ff feee 	bl	8007134 <ptr_to_mem>
 8007358:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007362:	d818      	bhi.n	8007396 <mem_link_valid+0x66>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	885b      	ldrh	r3, [r3, #2]
 8007368:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800736c:	d813      	bhi.n	8007396 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007372:	8afa      	ldrh	r2, [r7, #22]
 8007374:	429a      	cmp	r2, r3
 8007376:	d004      	beq.n	8007382 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	8afa      	ldrh	r2, [r7, #22]
 800737e:	429a      	cmp	r2, r3
 8007380:	d109      	bne.n	8007396 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007382:	4b08      	ldr	r3, [pc, #32]	; (80073a4 <mem_link_valid+0x74>)
 8007384:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	429a      	cmp	r2, r3
 800738a:	d006      	beq.n	800739a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	885b      	ldrh	r3, [r3, #2]
 8007390:	8afa      	ldrh	r2, [r7, #22]
 8007392:	429a      	cmp	r2, r3
 8007394:	d001      	beq.n	800739a <mem_link_valid+0x6a>
    return 0;
 8007396:	2300      	movs	r3, #0
 8007398:	e000      	b.n	800739c <mem_link_valid+0x6c>
  }
  return 1;
 800739a:	2301      	movs	r3, #1
}
 800739c:	4618      	mov	r0, r3
 800739e:	3718      	adds	r7, #24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	2000504c 	.word	0x2000504c

080073a8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d04c      	beq.n	8007450 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f003 0303 	and.w	r3, r3, #3
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d007      	beq.n	80073d0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80073c0:	4b25      	ldr	r3, [pc, #148]	; (8007458 <mem_free+0xb0>)
 80073c2:	f240 2273 	movw	r2, #627	; 0x273
 80073c6:	4925      	ldr	r1, [pc, #148]	; (800745c <mem_free+0xb4>)
 80073c8:	4825      	ldr	r0, [pc, #148]	; (8007460 <mem_free+0xb8>)
 80073ca:	f009 fc79 	bl	8010cc0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80073ce:	e040      	b.n	8007452 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	3b08      	subs	r3, #8
 80073d4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80073d6:	4b23      	ldr	r3, [pc, #140]	; (8007464 <mem_free+0xbc>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d306      	bcc.n	80073ee <mem_free+0x46>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f103 020c 	add.w	r2, r3, #12
 80073e6:	4b20      	ldr	r3, [pc, #128]	; (8007468 <mem_free+0xc0>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d907      	bls.n	80073fe <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80073ee:	4b1a      	ldr	r3, [pc, #104]	; (8007458 <mem_free+0xb0>)
 80073f0:	f240 227f 	movw	r2, #639	; 0x27f
 80073f4:	491d      	ldr	r1, [pc, #116]	; (800746c <mem_free+0xc4>)
 80073f6:	481a      	ldr	r0, [pc, #104]	; (8007460 <mem_free+0xb8>)
 80073f8:	f009 fc62 	bl	8010cc0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80073fc:	e029      	b.n	8007452 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	791b      	ldrb	r3, [r3, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d107      	bne.n	8007416 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007406:	4b14      	ldr	r3, [pc, #80]	; (8007458 <mem_free+0xb0>)
 8007408:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800740c:	4918      	ldr	r1, [pc, #96]	; (8007470 <mem_free+0xc8>)
 800740e:	4814      	ldr	r0, [pc, #80]	; (8007460 <mem_free+0xb8>)
 8007410:	f009 fc56 	bl	8010cc0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007414:	e01d      	b.n	8007452 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f7ff ff8a 	bl	8007330 <mem_link_valid>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d107      	bne.n	8007432 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007422:	4b0d      	ldr	r3, [pc, #52]	; (8007458 <mem_free+0xb0>)
 8007424:	f240 2295 	movw	r2, #661	; 0x295
 8007428:	4912      	ldr	r1, [pc, #72]	; (8007474 <mem_free+0xcc>)
 800742a:	480d      	ldr	r0, [pc, #52]	; (8007460 <mem_free+0xb8>)
 800742c:	f009 fc48 	bl	8010cc0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007430:	e00f      	b.n	8007452 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007438:	4b0f      	ldr	r3, [pc, #60]	; (8007478 <mem_free+0xd0>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	429a      	cmp	r2, r3
 8007440:	d202      	bcs.n	8007448 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007442:	4a0d      	ldr	r2, [pc, #52]	; (8007478 <mem_free+0xd0>)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f7ff fe97 	bl	800717c <plug_holes>
 800744e:	e000      	b.n	8007452 <mem_free+0xaa>
    return;
 8007450:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	08011dcc 	.word	0x08011dcc
 800745c:	08011ea0 	.word	0x08011ea0
 8007460:	08011e14 	.word	0x08011e14
 8007464:	20005048 	.word	0x20005048
 8007468:	2000504c 	.word	0x2000504c
 800746c:	08011ec4 	.word	0x08011ec4
 8007470:	08011ee0 	.word	0x08011ee0
 8007474:	08011f08 	.word	0x08011f08
 8007478:	20005050 	.word	0x20005050

0800747c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b088      	sub	sp, #32
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	460b      	mov	r3, r1
 8007486:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007488:	887b      	ldrh	r3, [r7, #2]
 800748a:	3303      	adds	r3, #3
 800748c:	b29b      	uxth	r3, r3
 800748e:	f023 0303 	bic.w	r3, r3, #3
 8007492:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8007494:	8bfb      	ldrh	r3, [r7, #30]
 8007496:	2b0b      	cmp	r3, #11
 8007498:	d801      	bhi.n	800749e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800749a:	230c      	movs	r3, #12
 800749c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800749e:	8bfb      	ldrh	r3, [r7, #30]
 80074a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80074a4:	d803      	bhi.n	80074ae <mem_trim+0x32>
 80074a6:	8bfa      	ldrh	r2, [r7, #30]
 80074a8:	887b      	ldrh	r3, [r7, #2]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d201      	bcs.n	80074b2 <mem_trim+0x36>
    return NULL;
 80074ae:	2300      	movs	r3, #0
 80074b0:	e0cc      	b.n	800764c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80074b2:	4b68      	ldr	r3, [pc, #416]	; (8007654 <mem_trim+0x1d8>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d304      	bcc.n	80074c6 <mem_trim+0x4a>
 80074bc:	4b66      	ldr	r3, [pc, #408]	; (8007658 <mem_trim+0x1dc>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d306      	bcc.n	80074d4 <mem_trim+0x58>
 80074c6:	4b65      	ldr	r3, [pc, #404]	; (800765c <mem_trim+0x1e0>)
 80074c8:	f240 22d1 	movw	r2, #721	; 0x2d1
 80074cc:	4964      	ldr	r1, [pc, #400]	; (8007660 <mem_trim+0x1e4>)
 80074ce:	4865      	ldr	r0, [pc, #404]	; (8007664 <mem_trim+0x1e8>)
 80074d0:	f009 fbf6 	bl	8010cc0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80074d4:	4b5f      	ldr	r3, [pc, #380]	; (8007654 <mem_trim+0x1d8>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d304      	bcc.n	80074e8 <mem_trim+0x6c>
 80074de:	4b5e      	ldr	r3, [pc, #376]	; (8007658 <mem_trim+0x1dc>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d301      	bcc.n	80074ec <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	e0af      	b.n	800764c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	3b08      	subs	r3, #8
 80074f0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80074f2:	69b8      	ldr	r0, [r7, #24]
 80074f4:	f7ff fe30 	bl	8007158 <mem_to_ptr>
 80074f8:	4603      	mov	r3, r0
 80074fa:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	881a      	ldrh	r2, [r3, #0]
 8007500:	8afb      	ldrh	r3, [r7, #22]
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	b29b      	uxth	r3, r3
 8007506:	3b08      	subs	r3, #8
 8007508:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800750a:	8bfa      	ldrh	r2, [r7, #30]
 800750c:	8abb      	ldrh	r3, [r7, #20]
 800750e:	429a      	cmp	r2, r3
 8007510:	d906      	bls.n	8007520 <mem_trim+0xa4>
 8007512:	4b52      	ldr	r3, [pc, #328]	; (800765c <mem_trim+0x1e0>)
 8007514:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8007518:	4953      	ldr	r1, [pc, #332]	; (8007668 <mem_trim+0x1ec>)
 800751a:	4852      	ldr	r0, [pc, #328]	; (8007664 <mem_trim+0x1e8>)
 800751c:	f009 fbd0 	bl	8010cc0 <iprintf>
  if (newsize > size) {
 8007520:	8bfa      	ldrh	r2, [r7, #30]
 8007522:	8abb      	ldrh	r3, [r7, #20]
 8007524:	429a      	cmp	r2, r3
 8007526:	d901      	bls.n	800752c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8007528:	2300      	movs	r3, #0
 800752a:	e08f      	b.n	800764c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800752c:	8bfa      	ldrh	r2, [r7, #30]
 800752e:	8abb      	ldrh	r3, [r7, #20]
 8007530:	429a      	cmp	r2, r3
 8007532:	d101      	bne.n	8007538 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	e089      	b.n	800764c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	4618      	mov	r0, r3
 800753e:	f7ff fdf9 	bl	8007134 <ptr_to_mem>
 8007542:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	791b      	ldrb	r3, [r3, #4]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d13f      	bne.n	80075cc <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	881b      	ldrh	r3, [r3, #0]
 8007550:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007554:	d106      	bne.n	8007564 <mem_trim+0xe8>
 8007556:	4b41      	ldr	r3, [pc, #260]	; (800765c <mem_trim+0x1e0>)
 8007558:	f240 22f5 	movw	r2, #757	; 0x2f5
 800755c:	4943      	ldr	r1, [pc, #268]	; (800766c <mem_trim+0x1f0>)
 800755e:	4841      	ldr	r0, [pc, #260]	; (8007664 <mem_trim+0x1e8>)
 8007560:	f009 fbae 	bl	8010cc0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	881b      	ldrh	r3, [r3, #0]
 8007568:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800756a:	8afa      	ldrh	r2, [r7, #22]
 800756c:	8bfb      	ldrh	r3, [r7, #30]
 800756e:	4413      	add	r3, r2
 8007570:	b29b      	uxth	r3, r3
 8007572:	3308      	adds	r3, #8
 8007574:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8007576:	4b3e      	ldr	r3, [pc, #248]	; (8007670 <mem_trim+0x1f4>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	693a      	ldr	r2, [r7, #16]
 800757c:	429a      	cmp	r2, r3
 800757e:	d106      	bne.n	800758e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8007580:	89fb      	ldrh	r3, [r7, #14]
 8007582:	4618      	mov	r0, r3
 8007584:	f7ff fdd6 	bl	8007134 <ptr_to_mem>
 8007588:	4603      	mov	r3, r0
 800758a:	4a39      	ldr	r2, [pc, #228]	; (8007670 <mem_trim+0x1f4>)
 800758c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800758e:	89fb      	ldrh	r3, [r7, #14]
 8007590:	4618      	mov	r0, r3
 8007592:	f7ff fdcf 	bl	8007134 <ptr_to_mem>
 8007596:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	2200      	movs	r2, #0
 800759c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	89ba      	ldrh	r2, [r7, #12]
 80075a2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	8afa      	ldrh	r2, [r7, #22]
 80075a8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	89fa      	ldrh	r2, [r7, #14]
 80075ae:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	881b      	ldrh	r3, [r3, #0]
 80075b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80075b8:	d047      	beq.n	800764a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	881b      	ldrh	r3, [r3, #0]
 80075be:	4618      	mov	r0, r3
 80075c0:	f7ff fdb8 	bl	8007134 <ptr_to_mem>
 80075c4:	4602      	mov	r2, r0
 80075c6:	89fb      	ldrh	r3, [r7, #14]
 80075c8:	8053      	strh	r3, [r2, #2]
 80075ca:	e03e      	b.n	800764a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80075cc:	8bfb      	ldrh	r3, [r7, #30]
 80075ce:	f103 0214 	add.w	r2, r3, #20
 80075d2:	8abb      	ldrh	r3, [r7, #20]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d838      	bhi.n	800764a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80075d8:	8afa      	ldrh	r2, [r7, #22]
 80075da:	8bfb      	ldrh	r3, [r7, #30]
 80075dc:	4413      	add	r3, r2
 80075de:	b29b      	uxth	r3, r3
 80075e0:	3308      	adds	r3, #8
 80075e2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	881b      	ldrh	r3, [r3, #0]
 80075e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80075ec:	d106      	bne.n	80075fc <mem_trim+0x180>
 80075ee:	4b1b      	ldr	r3, [pc, #108]	; (800765c <mem_trim+0x1e0>)
 80075f0:	f240 3216 	movw	r2, #790	; 0x316
 80075f4:	491d      	ldr	r1, [pc, #116]	; (800766c <mem_trim+0x1f0>)
 80075f6:	481b      	ldr	r0, [pc, #108]	; (8007664 <mem_trim+0x1e8>)
 80075f8:	f009 fb62 	bl	8010cc0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80075fc:	89fb      	ldrh	r3, [r7, #14]
 80075fe:	4618      	mov	r0, r3
 8007600:	f7ff fd98 	bl	8007134 <ptr_to_mem>
 8007604:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8007606:	4b1a      	ldr	r3, [pc, #104]	; (8007670 <mem_trim+0x1f4>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	429a      	cmp	r2, r3
 800760e:	d202      	bcs.n	8007616 <mem_trim+0x19a>
      lfree = mem2;
 8007610:	4a17      	ldr	r2, [pc, #92]	; (8007670 <mem_trim+0x1f4>)
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	2200      	movs	r2, #0
 800761a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	881a      	ldrh	r2, [r3, #0]
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	8afa      	ldrh	r2, [r7, #22]
 8007628:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	89fa      	ldrh	r2, [r7, #14]
 800762e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007638:	d007      	beq.n	800764a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	881b      	ldrh	r3, [r3, #0]
 800763e:	4618      	mov	r0, r3
 8007640:	f7ff fd78 	bl	8007134 <ptr_to_mem>
 8007644:	4602      	mov	r2, r0
 8007646:	89fb      	ldrh	r3, [r7, #14]
 8007648:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800764a:	687b      	ldr	r3, [r7, #4]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3720      	adds	r7, #32
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	20005048 	.word	0x20005048
 8007658:	2000504c 	.word	0x2000504c
 800765c:	08011dcc 	.word	0x08011dcc
 8007660:	08011f3c 	.word	0x08011f3c
 8007664:	08011e14 	.word	0x08011e14
 8007668:	08011f54 	.word	0x08011f54
 800766c:	08011f74 	.word	0x08011f74
 8007670:	20005050 	.word	0x20005050

08007674 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b088      	sub	sp, #32
 8007678:	af00      	add	r7, sp, #0
 800767a:	4603      	mov	r3, r0
 800767c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800767e:	88fb      	ldrh	r3, [r7, #6]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <mem_malloc+0x14>
    return NULL;
 8007684:	2300      	movs	r3, #0
 8007686:	e0d9      	b.n	800783c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007688:	88fb      	ldrh	r3, [r7, #6]
 800768a:	3303      	adds	r3, #3
 800768c:	b29b      	uxth	r3, r3
 800768e:	f023 0303 	bic.w	r3, r3, #3
 8007692:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007694:	8bbb      	ldrh	r3, [r7, #28]
 8007696:	2b0b      	cmp	r3, #11
 8007698:	d801      	bhi.n	800769e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800769a:	230c      	movs	r3, #12
 800769c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800769e:	8bbb      	ldrh	r3, [r7, #28]
 80076a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80076a4:	d803      	bhi.n	80076ae <mem_malloc+0x3a>
 80076a6:	8bba      	ldrh	r2, [r7, #28]
 80076a8:	88fb      	ldrh	r3, [r7, #6]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d201      	bcs.n	80076b2 <mem_malloc+0x3e>
    return NULL;
 80076ae:	2300      	movs	r3, #0
 80076b0:	e0c4      	b.n	800783c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80076b2:	4b64      	ldr	r3, [pc, #400]	; (8007844 <mem_malloc+0x1d0>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7ff fd4e 	bl	8007158 <mem_to_ptr>
 80076bc:	4603      	mov	r3, r0
 80076be:	83fb      	strh	r3, [r7, #30]
 80076c0:	e0b4      	b.n	800782c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80076c2:	8bfb      	ldrh	r3, [r7, #30]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7ff fd35 	bl	8007134 <ptr_to_mem>
 80076ca:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	791b      	ldrb	r3, [r3, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f040 80a4 	bne.w	800781e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	881b      	ldrh	r3, [r3, #0]
 80076da:	461a      	mov	r2, r3
 80076dc:	8bfb      	ldrh	r3, [r7, #30]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	f1a3 0208 	sub.w	r2, r3, #8
 80076e4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80076e6:	429a      	cmp	r2, r3
 80076e8:	f0c0 8099 	bcc.w	800781e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	461a      	mov	r2, r3
 80076f2:	8bfb      	ldrh	r3, [r7, #30]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	f1a3 0208 	sub.w	r2, r3, #8
 80076fa:	8bbb      	ldrh	r3, [r7, #28]
 80076fc:	3314      	adds	r3, #20
 80076fe:	429a      	cmp	r2, r3
 8007700:	d333      	bcc.n	800776a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007702:	8bfa      	ldrh	r2, [r7, #30]
 8007704:	8bbb      	ldrh	r3, [r7, #28]
 8007706:	4413      	add	r3, r2
 8007708:	b29b      	uxth	r3, r3
 800770a:	3308      	adds	r3, #8
 800770c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800770e:	8a7b      	ldrh	r3, [r7, #18]
 8007710:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007714:	d106      	bne.n	8007724 <mem_malloc+0xb0>
 8007716:	4b4c      	ldr	r3, [pc, #304]	; (8007848 <mem_malloc+0x1d4>)
 8007718:	f240 3287 	movw	r2, #903	; 0x387
 800771c:	494b      	ldr	r1, [pc, #300]	; (800784c <mem_malloc+0x1d8>)
 800771e:	484c      	ldr	r0, [pc, #304]	; (8007850 <mem_malloc+0x1dc>)
 8007720:	f009 face 	bl	8010cc0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007724:	8a7b      	ldrh	r3, [r7, #18]
 8007726:	4618      	mov	r0, r3
 8007728:	f7ff fd04 	bl	8007134 <ptr_to_mem>
 800772c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2200      	movs	r2, #0
 8007732:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	881a      	ldrh	r2, [r3, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	8bfa      	ldrh	r2, [r7, #30]
 8007740:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	8a7a      	ldrh	r2, [r7, #18]
 8007746:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	2201      	movs	r2, #1
 800774c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007756:	d00b      	beq.n	8007770 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	4618      	mov	r0, r3
 800775e:	f7ff fce9 	bl	8007134 <ptr_to_mem>
 8007762:	4602      	mov	r2, r0
 8007764:	8a7b      	ldrh	r3, [r7, #18]
 8007766:	8053      	strh	r3, [r2, #2]
 8007768:	e002      	b.n	8007770 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	2201      	movs	r2, #1
 800776e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007770:	4b34      	ldr	r3, [pc, #208]	; (8007844 <mem_malloc+0x1d0>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	429a      	cmp	r2, r3
 8007778:	d127      	bne.n	80077ca <mem_malloc+0x156>
          struct mem *cur = lfree;
 800777a:	4b32      	ldr	r3, [pc, #200]	; (8007844 <mem_malloc+0x1d0>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007780:	e005      	b.n	800778e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	4618      	mov	r0, r3
 8007788:	f7ff fcd4 	bl	8007134 <ptr_to_mem>
 800778c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	791b      	ldrb	r3, [r3, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d004      	beq.n	80077a0 <mem_malloc+0x12c>
 8007796:	4b2f      	ldr	r3, [pc, #188]	; (8007854 <mem_malloc+0x1e0>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	429a      	cmp	r2, r3
 800779e:	d1f0      	bne.n	8007782 <mem_malloc+0x10e>
          }
          lfree = cur;
 80077a0:	4a28      	ldr	r2, [pc, #160]	; (8007844 <mem_malloc+0x1d0>)
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80077a6:	4b27      	ldr	r3, [pc, #156]	; (8007844 <mem_malloc+0x1d0>)
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	4b2a      	ldr	r3, [pc, #168]	; (8007854 <mem_malloc+0x1e0>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d00b      	beq.n	80077ca <mem_malloc+0x156>
 80077b2:	4b24      	ldr	r3, [pc, #144]	; (8007844 <mem_malloc+0x1d0>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	791b      	ldrb	r3, [r3, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d006      	beq.n	80077ca <mem_malloc+0x156>
 80077bc:	4b22      	ldr	r3, [pc, #136]	; (8007848 <mem_malloc+0x1d4>)
 80077be:	f240 32b5 	movw	r2, #949	; 0x3b5
 80077c2:	4925      	ldr	r1, [pc, #148]	; (8007858 <mem_malloc+0x1e4>)
 80077c4:	4822      	ldr	r0, [pc, #136]	; (8007850 <mem_malloc+0x1dc>)
 80077c6:	f009 fa7b 	bl	8010cc0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80077ca:	8bba      	ldrh	r2, [r7, #28]
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	4413      	add	r3, r2
 80077d0:	3308      	adds	r3, #8
 80077d2:	4a20      	ldr	r2, [pc, #128]	; (8007854 <mem_malloc+0x1e0>)
 80077d4:	6812      	ldr	r2, [r2, #0]
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d906      	bls.n	80077e8 <mem_malloc+0x174>
 80077da:	4b1b      	ldr	r3, [pc, #108]	; (8007848 <mem_malloc+0x1d4>)
 80077dc:	f240 32b9 	movw	r2, #953	; 0x3b9
 80077e0:	491e      	ldr	r1, [pc, #120]	; (800785c <mem_malloc+0x1e8>)
 80077e2:	481b      	ldr	r0, [pc, #108]	; (8007850 <mem_malloc+0x1dc>)
 80077e4:	f009 fa6c 	bl	8010cc0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	f003 0303 	and.w	r3, r3, #3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d006      	beq.n	8007800 <mem_malloc+0x18c>
 80077f2:	4b15      	ldr	r3, [pc, #84]	; (8007848 <mem_malloc+0x1d4>)
 80077f4:	f240 32bb 	movw	r2, #955	; 0x3bb
 80077f8:	4919      	ldr	r1, [pc, #100]	; (8007860 <mem_malloc+0x1ec>)
 80077fa:	4815      	ldr	r0, [pc, #84]	; (8007850 <mem_malloc+0x1dc>)
 80077fc:	f009 fa60 	bl	8010cc0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	f003 0303 	and.w	r3, r3, #3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d006      	beq.n	8007818 <mem_malloc+0x1a4>
 800780a:	4b0f      	ldr	r3, [pc, #60]	; (8007848 <mem_malloc+0x1d4>)
 800780c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007810:	4914      	ldr	r1, [pc, #80]	; (8007864 <mem_malloc+0x1f0>)
 8007812:	480f      	ldr	r0, [pc, #60]	; (8007850 <mem_malloc+0x1dc>)
 8007814:	f009 fa54 	bl	8010cc0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	3308      	adds	r3, #8
 800781c:	e00e      	b.n	800783c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800781e:	8bfb      	ldrh	r3, [r7, #30]
 8007820:	4618      	mov	r0, r3
 8007822:	f7ff fc87 	bl	8007134 <ptr_to_mem>
 8007826:	4603      	mov	r3, r0
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800782c:	8bfa      	ldrh	r2, [r7, #30]
 800782e:	8bbb      	ldrh	r3, [r7, #28]
 8007830:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8007834:	429a      	cmp	r2, r3
 8007836:	f4ff af44 	bcc.w	80076c2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3720      	adds	r7, #32
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	20005050 	.word	0x20005050
 8007848:	08011dcc 	.word	0x08011dcc
 800784c:	08011f74 	.word	0x08011f74
 8007850:	08011e14 	.word	0x08011e14
 8007854:	2000504c 	.word	0x2000504c
 8007858:	08011f88 	.word	0x08011f88
 800785c:	08011fa4 	.word	0x08011fa4
 8007860:	08011fd4 	.word	0x08011fd4
 8007864:	08012004 	.word	0x08012004

08007868 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	2200      	movs	r2, #0
 8007876:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	3303      	adds	r3, #3
 800787e:	f023 0303 	bic.w	r3, r3, #3
 8007882:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007884:	2300      	movs	r3, #0
 8007886:	60fb      	str	r3, [r7, #12]
 8007888:	e011      	b.n	80078ae <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	881b      	ldrh	r3, [r3, #0]
 80078a0:	461a      	mov	r2, r3
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	4413      	add	r3, r2
 80078a6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	3301      	adds	r3, #1
 80078ac:	60fb      	str	r3, [r7, #12]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	885b      	ldrh	r3, [r3, #2]
 80078b2:	461a      	mov	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	4293      	cmp	r3, r2
 80078b8:	dbe7      	blt.n	800788a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80078ba:	bf00      	nop
 80078bc:	bf00      	nop
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80078ce:	2300      	movs	r3, #0
 80078d0:	80fb      	strh	r3, [r7, #6]
 80078d2:	e009      	b.n	80078e8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80078d4:	88fb      	ldrh	r3, [r7, #6]
 80078d6:	4a08      	ldr	r2, [pc, #32]	; (80078f8 <memp_init+0x30>)
 80078d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078dc:	4618      	mov	r0, r3
 80078de:	f7ff ffc3 	bl	8007868 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80078e2:	88fb      	ldrh	r3, [r7, #6]
 80078e4:	3301      	adds	r3, #1
 80078e6:	80fb      	strh	r3, [r7, #6]
 80078e8:	88fb      	ldrh	r3, [r7, #6]
 80078ea:	2b08      	cmp	r3, #8
 80078ec:	d9f2      	bls.n	80078d4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80078ee:	bf00      	nop
 80078f0:	bf00      	nop
 80078f2:	3708      	adds	r7, #8
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	080148d8 	.word	0x080148d8

080078fc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d012      	beq.n	8007938 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	6812      	ldr	r2, [r2, #0]
 800791a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f003 0303 	and.w	r3, r3, #3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d006      	beq.n	8007934 <do_memp_malloc_pool+0x38>
 8007926:	4b07      	ldr	r3, [pc, #28]	; (8007944 <do_memp_malloc_pool+0x48>)
 8007928:	f44f 728c 	mov.w	r2, #280	; 0x118
 800792c:	4906      	ldr	r1, [pc, #24]	; (8007948 <do_memp_malloc_pool+0x4c>)
 800792e:	4807      	ldr	r0, [pc, #28]	; (800794c <do_memp_malloc_pool+0x50>)
 8007930:	f009 f9c6 	bl	8010cc0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	e000      	b.n	800793a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	08012028 	.word	0x08012028
 8007948:	08012058 	.word	0x08012058
 800794c:	0801207c 	.word	0x0801207c

08007950 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d106      	bne.n	800796c <memp_malloc_pool+0x1c>
 800795e:	4b0a      	ldr	r3, [pc, #40]	; (8007988 <memp_malloc_pool+0x38>)
 8007960:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8007964:	4909      	ldr	r1, [pc, #36]	; (800798c <memp_malloc_pool+0x3c>)
 8007966:	480a      	ldr	r0, [pc, #40]	; (8007990 <memp_malloc_pool+0x40>)
 8007968:	f009 f9aa 	bl	8010cc0 <iprintf>
  if (desc == NULL) {
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d101      	bne.n	8007976 <memp_malloc_pool+0x26>
    return NULL;
 8007972:	2300      	movs	r3, #0
 8007974:	e003      	b.n	800797e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7ff ffc0 	bl	80078fc <do_memp_malloc_pool>
 800797c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	08012028 	.word	0x08012028
 800798c:	080120a4 	.word	0x080120a4
 8007990:	0801207c 	.word	0x0801207c

08007994 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	4603      	mov	r3, r0
 800799c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800799e:	79fb      	ldrb	r3, [r7, #7]
 80079a0:	2b08      	cmp	r3, #8
 80079a2:	d908      	bls.n	80079b6 <memp_malloc+0x22>
 80079a4:	4b0a      	ldr	r3, [pc, #40]	; (80079d0 <memp_malloc+0x3c>)
 80079a6:	f240 1257 	movw	r2, #343	; 0x157
 80079aa:	490a      	ldr	r1, [pc, #40]	; (80079d4 <memp_malloc+0x40>)
 80079ac:	480a      	ldr	r0, [pc, #40]	; (80079d8 <memp_malloc+0x44>)
 80079ae:	f009 f987 	bl	8010cc0 <iprintf>
 80079b2:	2300      	movs	r3, #0
 80079b4:	e008      	b.n	80079c8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80079b6:	79fb      	ldrb	r3, [r7, #7]
 80079b8:	4a08      	ldr	r2, [pc, #32]	; (80079dc <memp_malloc+0x48>)
 80079ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079be:	4618      	mov	r0, r3
 80079c0:	f7ff ff9c 	bl	80078fc <do_memp_malloc_pool>
 80079c4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80079c6:	68fb      	ldr	r3, [r7, #12]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	08012028 	.word	0x08012028
 80079d4:	080120b8 	.word	0x080120b8
 80079d8:	0801207c 	.word	0x0801207c
 80079dc:	080148d8 	.word	0x080148d8

080079e0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	f003 0303 	and.w	r3, r3, #3
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d006      	beq.n	8007a02 <do_memp_free_pool+0x22>
 80079f4:	4b0a      	ldr	r3, [pc, #40]	; (8007a20 <do_memp_free_pool+0x40>)
 80079f6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80079fa:	490a      	ldr	r1, [pc, #40]	; (8007a24 <do_memp_free_pool+0x44>)
 80079fc:	480a      	ldr	r0, [pc, #40]	; (8007a28 <do_memp_free_pool+0x48>)
 80079fe:	f009 f95f 	bl	8010cc0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007a18:	bf00      	nop
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	08012028 	.word	0x08012028
 8007a24:	080120d8 	.word	0x080120d8
 8007a28:	0801207c 	.word	0x0801207c

08007a2c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d106      	bne.n	8007a4a <memp_free_pool+0x1e>
 8007a3c:	4b0a      	ldr	r3, [pc, #40]	; (8007a68 <memp_free_pool+0x3c>)
 8007a3e:	f240 1295 	movw	r2, #405	; 0x195
 8007a42:	490a      	ldr	r1, [pc, #40]	; (8007a6c <memp_free_pool+0x40>)
 8007a44:	480a      	ldr	r0, [pc, #40]	; (8007a70 <memp_free_pool+0x44>)
 8007a46:	f009 f93b 	bl	8010cc0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d007      	beq.n	8007a60 <memp_free_pool+0x34>
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d004      	beq.n	8007a60 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7ff ffc1 	bl	80079e0 <do_memp_free_pool>
 8007a5e:	e000      	b.n	8007a62 <memp_free_pool+0x36>
    return;
 8007a60:	bf00      	nop
}
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	08012028 	.word	0x08012028
 8007a6c:	080120a4 	.word	0x080120a4
 8007a70:	0801207c 	.word	0x0801207c

08007a74 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	6039      	str	r1, [r7, #0]
 8007a7e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007a80:	79fb      	ldrb	r3, [r7, #7]
 8007a82:	2b08      	cmp	r3, #8
 8007a84:	d907      	bls.n	8007a96 <memp_free+0x22>
 8007a86:	4b0c      	ldr	r3, [pc, #48]	; (8007ab8 <memp_free+0x44>)
 8007a88:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007a8c:	490b      	ldr	r1, [pc, #44]	; (8007abc <memp_free+0x48>)
 8007a8e:	480c      	ldr	r0, [pc, #48]	; (8007ac0 <memp_free+0x4c>)
 8007a90:	f009 f916 	bl	8010cc0 <iprintf>
 8007a94:	e00c      	b.n	8007ab0 <memp_free+0x3c>

  if (mem == NULL) {
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d008      	beq.n	8007aae <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007a9c:	79fb      	ldrb	r3, [r7, #7]
 8007a9e:	4a09      	ldr	r2, [pc, #36]	; (8007ac4 <memp_free+0x50>)
 8007aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7ff ff9a 	bl	80079e0 <do_memp_free_pool>
 8007aac:	e000      	b.n	8007ab0 <memp_free+0x3c>
    return;
 8007aae:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	08012028 	.word	0x08012028
 8007abc:	080120f8 	.word	0x080120f8
 8007ac0:	0801207c 	.word	0x0801207c
 8007ac4:	080148d8 	.word	0x080148d8

08007ac8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007acc:	bf00      	nop
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
	...

08007ad8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
 8007ae4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d108      	bne.n	8007afe <netif_add+0x26>
 8007aec:	4b57      	ldr	r3, [pc, #348]	; (8007c4c <netif_add+0x174>)
 8007aee:	f240 1227 	movw	r2, #295	; 0x127
 8007af2:	4957      	ldr	r1, [pc, #348]	; (8007c50 <netif_add+0x178>)
 8007af4:	4857      	ldr	r0, [pc, #348]	; (8007c54 <netif_add+0x17c>)
 8007af6:	f009 f8e3 	bl	8010cc0 <iprintf>
 8007afa:	2300      	movs	r3, #0
 8007afc:	e0a2      	b.n	8007c44 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d108      	bne.n	8007b16 <netif_add+0x3e>
 8007b04:	4b51      	ldr	r3, [pc, #324]	; (8007c4c <netif_add+0x174>)
 8007b06:	f44f 7294 	mov.w	r2, #296	; 0x128
 8007b0a:	4953      	ldr	r1, [pc, #332]	; (8007c58 <netif_add+0x180>)
 8007b0c:	4851      	ldr	r0, [pc, #324]	; (8007c54 <netif_add+0x17c>)
 8007b0e:	f009 f8d7 	bl	8010cc0 <iprintf>
 8007b12:	2300      	movs	r3, #0
 8007b14:	e096      	b.n	8007c44 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007b1c:	4b4f      	ldr	r3, [pc, #316]	; (8007c5c <netif_add+0x184>)
 8007b1e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007b26:	4b4d      	ldr	r3, [pc, #308]	; (8007c5c <netif_add+0x184>)
 8007b28:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007b30:	4b4a      	ldr	r3, [pc, #296]	; (8007c5c <netif_add+0x184>)
 8007b32:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	4a45      	ldr	r2, [pc, #276]	; (8007c60 <netif_add+0x188>)
 8007b4a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6a3a      	ldr	r2, [r7, #32]
 8007b64:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007b66:	4b3f      	ldr	r3, [pc, #252]	; (8007c64 <netif_add+0x18c>)
 8007b68:	781a      	ldrb	r2, [r3, #0]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b74:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	68b9      	ldr	r1, [r7, #8]
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 f913 	bl	8007da8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	4798      	blx	r3
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <netif_add+0xba>
    return NULL;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	e058      	b.n	8007c44 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b98:	2bff      	cmp	r3, #255	; 0xff
 8007b9a:	d103      	bne.n	8007ba4 <netif_add+0xcc>
        netif->num = 0;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007ba8:	4b2f      	ldr	r3, [pc, #188]	; (8007c68 <netif_add+0x190>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	617b      	str	r3, [r7, #20]
 8007bae:	e02b      	b.n	8007c08 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d106      	bne.n	8007bc6 <netif_add+0xee>
 8007bb8:	4b24      	ldr	r3, [pc, #144]	; (8007c4c <netif_add+0x174>)
 8007bba:	f240 128b 	movw	r2, #395	; 0x18b
 8007bbe:	492b      	ldr	r1, [pc, #172]	; (8007c6c <netif_add+0x194>)
 8007bc0:	4824      	ldr	r0, [pc, #144]	; (8007c54 <netif_add+0x17c>)
 8007bc2:	f009 f87d 	bl	8010cc0 <iprintf>
        num_netifs++;
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	2bff      	cmp	r3, #255	; 0xff
 8007bd0:	dd06      	ble.n	8007be0 <netif_add+0x108>
 8007bd2:	4b1e      	ldr	r3, [pc, #120]	; (8007c4c <netif_add+0x174>)
 8007bd4:	f240 128d 	movw	r2, #397	; 0x18d
 8007bd8:	4925      	ldr	r1, [pc, #148]	; (8007c70 <netif_add+0x198>)
 8007bda:	481e      	ldr	r0, [pc, #120]	; (8007c54 <netif_add+0x17c>)
 8007bdc:	f009 f870 	bl	8010cc0 <iprintf>
        if (netif2->num == netif->num) {
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d108      	bne.n	8007c02 <netif_add+0x12a>
          netif->num++;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8007c00:	e005      	b.n	8007c0e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	617b      	str	r3, [r7, #20]
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1d0      	bne.n	8007bb0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1be      	bne.n	8007b92 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c1a:	2bfe      	cmp	r3, #254	; 0xfe
 8007c1c:	d103      	bne.n	8007c26 <netif_add+0x14e>
    netif_num = 0;
 8007c1e:	4b11      	ldr	r3, [pc, #68]	; (8007c64 <netif_add+0x18c>)
 8007c20:	2200      	movs	r2, #0
 8007c22:	701a      	strb	r2, [r3, #0]
 8007c24:	e006      	b.n	8007c34 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	b2da      	uxtb	r2, r3
 8007c30:	4b0c      	ldr	r3, [pc, #48]	; (8007c64 <netif_add+0x18c>)
 8007c32:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007c34:	4b0c      	ldr	r3, [pc, #48]	; (8007c68 <netif_add+0x190>)
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007c3c:	4a0a      	ldr	r2, [pc, #40]	; (8007c68 <netif_add+0x190>)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007c42:	68fb      	ldr	r3, [r7, #12]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3718      	adds	r7, #24
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	08012114 	.word	0x08012114
 8007c50:	080121a8 	.word	0x080121a8
 8007c54:	08012164 	.word	0x08012164
 8007c58:	080121c4 	.word	0x080121c4
 8007c5c:	0801493c 	.word	0x0801493c
 8007c60:	08008083 	.word	0x08008083
 8007c64:	20007f48 	.word	0x20007f48
 8007c68:	20007f40 	.word	0x20007f40
 8007c6c:	080121e8 	.word	0x080121e8
 8007c70:	080121fc 	.word	0x080121fc

08007c74 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f002 fb37 	bl	800a2f4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f006 fc95 	bl	800e5b8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007c8e:	bf00      	nop
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
	...

08007c98 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d106      	bne.n	8007cb8 <netif_do_set_ipaddr+0x20>
 8007caa:	4b1d      	ldr	r3, [pc, #116]	; (8007d20 <netif_do_set_ipaddr+0x88>)
 8007cac:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007cb0:	491c      	ldr	r1, [pc, #112]	; (8007d24 <netif_do_set_ipaddr+0x8c>)
 8007cb2:	481d      	ldr	r0, [pc, #116]	; (8007d28 <netif_do_set_ipaddr+0x90>)
 8007cb4:	f009 f804 	bl	8010cc0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d106      	bne.n	8007ccc <netif_do_set_ipaddr+0x34>
 8007cbe:	4b18      	ldr	r3, [pc, #96]	; (8007d20 <netif_do_set_ipaddr+0x88>)
 8007cc0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8007cc4:	4917      	ldr	r1, [pc, #92]	; (8007d24 <netif_do_set_ipaddr+0x8c>)
 8007cc6:	4818      	ldr	r0, [pc, #96]	; (8007d28 <netif_do_set_ipaddr+0x90>)
 8007cc8:	f008 fffa 	bl	8010cc0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d01c      	beq.n	8007d14 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007cea:	f107 0314 	add.w	r3, r7, #20
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7ff ffbf 	bl	8007c74 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d002      	beq.n	8007d02 <netif_do_set_ipaddr+0x6a>
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	e000      	b.n	8007d04 <netif_do_set_ipaddr+0x6c>
 8007d02:	2300      	movs	r3, #0
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007d08:	2101      	movs	r1, #1
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 f8d2 	bl	8007eb4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007d10:	2301      	movs	r3, #1
 8007d12:	e000      	b.n	8007d16 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3718      	adds	r7, #24
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	08012114 	.word	0x08012114
 8007d24:	0801222c 	.word	0x0801222c
 8007d28:	08012164 	.word	0x08012164

08007d2c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	3308      	adds	r3, #8
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d00a      	beq.n	8007d5c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <netif_do_set_netmask+0x26>
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	e000      	b.n	8007d54 <netif_do_set_netmask+0x28>
 8007d52:	2300      	movs	r3, #0
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e000      	b.n	8007d5e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b085      	sub	sp, #20
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	60f8      	str	r0, [r7, #12]
 8007d72:	60b9      	str	r1, [r7, #8]
 8007d74:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	330c      	adds	r3, #12
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d00a      	beq.n	8007d9a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d002      	beq.n	8007d90 <netif_do_set_gw+0x26>
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	e000      	b.n	8007d92 <netif_do_set_gw+0x28>
 8007d90:	2300      	movs	r3, #0
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007d96:	2301      	movs	r3, #1
 8007d98:	e000      	b.n	8007d9c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3714      	adds	r7, #20
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b088      	sub	sp, #32
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
 8007db4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007db6:	2300      	movs	r3, #0
 8007db8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d101      	bne.n	8007dc8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007dc4:	4b1c      	ldr	r3, [pc, #112]	; (8007e38 <netif_set_addr+0x90>)
 8007dc6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d101      	bne.n	8007dd2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007dce:	4b1a      	ldr	r3, [pc, #104]	; (8007e38 <netif_set_addr+0x90>)
 8007dd0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d101      	bne.n	8007ddc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007dd8:	4b17      	ldr	r3, [pc, #92]	; (8007e38 <netif_set_addr+0x90>)
 8007dda:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d003      	beq.n	8007dea <netif_set_addr+0x42>
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d101      	bne.n	8007dee <netif_set_addr+0x46>
 8007dea:	2301      	movs	r3, #1
 8007dec:	e000      	b.n	8007df0 <netif_set_addr+0x48>
 8007dee:	2300      	movs	r3, #0
 8007df0:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d006      	beq.n	8007e06 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007df8:	f107 0310 	add.w	r3, r7, #16
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	68b9      	ldr	r1, [r7, #8]
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f7ff ff49 	bl	8007c98 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007e06:	69fa      	ldr	r2, [r7, #28]
 8007e08:	6879      	ldr	r1, [r7, #4]
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f7ff ff8e 	bl	8007d2c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007e10:	69ba      	ldr	r2, [r7, #24]
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f7ff ffa8 	bl	8007d6a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d106      	bne.n	8007e2e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007e20:	f107 0310 	add.w	r3, r7, #16
 8007e24:	461a      	mov	r2, r3
 8007e26:	68b9      	ldr	r1, [r7, #8]
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f7ff ff35 	bl	8007c98 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007e2e:	bf00      	nop
 8007e30:	3720      	adds	r7, #32
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	0801493c 	.word	0x0801493c

08007e3c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007e44:	4a04      	ldr	r2, [pc, #16]	; (8007e58 <netif_set_default+0x1c>)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007e4a:	bf00      	nop
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	20007f44 	.word	0x20007f44

08007e5c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d107      	bne.n	8007e7a <netif_set_up+0x1e>
 8007e6a:	4b0f      	ldr	r3, [pc, #60]	; (8007ea8 <netif_set_up+0x4c>)
 8007e6c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007e70:	490e      	ldr	r1, [pc, #56]	; (8007eac <netif_set_up+0x50>)
 8007e72:	480f      	ldr	r0, [pc, #60]	; (8007eb0 <netif_set_up+0x54>)
 8007e74:	f008 ff24 	bl	8010cc0 <iprintf>
 8007e78:	e013      	b.n	8007ea2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007e80:	f003 0301 	and.w	r3, r3, #1
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10c      	bne.n	8007ea2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007e8e:	f043 0301 	orr.w	r3, r3, #1
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007e9a:	2103      	movs	r1, #3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f809 	bl	8007eb4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	08012114 	.word	0x08012114
 8007eac:	0801229c 	.word	0x0801229c
 8007eb0:	08012164 	.word	0x08012164

08007eb4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d106      	bne.n	8007ed4 <netif_issue_reports+0x20>
 8007ec6:	4b18      	ldr	r3, [pc, #96]	; (8007f28 <netif_issue_reports+0x74>)
 8007ec8:	f240 326d 	movw	r2, #877	; 0x36d
 8007ecc:	4917      	ldr	r1, [pc, #92]	; (8007f2c <netif_issue_reports+0x78>)
 8007ece:	4818      	ldr	r0, [pc, #96]	; (8007f30 <netif_issue_reports+0x7c>)
 8007ed0:	f008 fef6 	bl	8010cc0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007eda:	f003 0304 	and.w	r3, r3, #4
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d01e      	beq.n	8007f20 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007ee8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d017      	beq.n	8007f20 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007ef0:	78fb      	ldrb	r3, [r7, #3]
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d013      	beq.n	8007f22 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	3304      	adds	r3, #4
 8007efe:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00e      	beq.n	8007f22 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007f0a:	f003 0308 	and.w	r3, r3, #8
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d007      	beq.n	8007f22 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	3304      	adds	r3, #4
 8007f16:	4619      	mov	r1, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f007 fac1 	bl	800f4a0 <etharp_request>
 8007f1e:	e000      	b.n	8007f22 <netif_issue_reports+0x6e>
    return;
 8007f20:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	08012114 	.word	0x08012114
 8007f2c:	080122b8 	.word	0x080122b8
 8007f30:	08012164 	.word	0x08012164

08007f34 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d107      	bne.n	8007f52 <netif_set_down+0x1e>
 8007f42:	4b12      	ldr	r3, [pc, #72]	; (8007f8c <netif_set_down+0x58>)
 8007f44:	f240 329b 	movw	r2, #923	; 0x39b
 8007f48:	4911      	ldr	r1, [pc, #68]	; (8007f90 <netif_set_down+0x5c>)
 8007f4a:	4812      	ldr	r0, [pc, #72]	; (8007f94 <netif_set_down+0x60>)
 8007f4c:	f008 feb8 	bl	8010cc0 <iprintf>
 8007f50:	e019      	b.n	8007f86 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d012      	beq.n	8007f86 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007f66:	f023 0301 	bic.w	r3, r3, #1
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007f78:	f003 0308 	and.w	r3, r3, #8
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d002      	beq.n	8007f86 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f006 fe4b 	bl	800ec1c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	08012114 	.word	0x08012114
 8007f90:	080122dc 	.word	0x080122dc
 8007f94:	08012164 	.word	0x08012164

08007f98 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d107      	bne.n	8007fb6 <netif_set_link_up+0x1e>
 8007fa6:	4b13      	ldr	r3, [pc, #76]	; (8007ff4 <netif_set_link_up+0x5c>)
 8007fa8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8007fac:	4912      	ldr	r1, [pc, #72]	; (8007ff8 <netif_set_link_up+0x60>)
 8007fae:	4813      	ldr	r0, [pc, #76]	; (8007ffc <netif_set_link_up+0x64>)
 8007fb0:	f008 fe86 	bl	8010cc0 <iprintf>
 8007fb4:	e01b      	b.n	8007fee <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007fbc:	f003 0304 	and.w	r3, r3, #4
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d114      	bne.n	8007fee <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007fca:	f043 0304 	orr.w	r3, r3, #4
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007fd6:	2103      	movs	r1, #3
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f7ff ff6b 	bl	8007eb4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	69db      	ldr	r3, [r3, #28]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d003      	beq.n	8007fee <netif_set_link_up+0x56>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	08012114 	.word	0x08012114
 8007ff8:	080122fc 	.word	0x080122fc
 8007ffc:	08012164 	.word	0x08012164

08008000 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d107      	bne.n	800801e <netif_set_link_down+0x1e>
 800800e:	4b11      	ldr	r3, [pc, #68]	; (8008054 <netif_set_link_down+0x54>)
 8008010:	f240 4206 	movw	r2, #1030	; 0x406
 8008014:	4910      	ldr	r1, [pc, #64]	; (8008058 <netif_set_link_down+0x58>)
 8008016:	4811      	ldr	r0, [pc, #68]	; (800805c <netif_set_link_down+0x5c>)
 8008018:	f008 fe52 	bl	8010cc0 <iprintf>
 800801c:	e017      	b.n	800804e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008024:	f003 0304 	and.w	r3, r3, #4
 8008028:	2b00      	cmp	r3, #0
 800802a:	d010      	beq.n	800804e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008032:	f023 0304 	bic.w	r3, r3, #4
 8008036:	b2da      	uxtb	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	69db      	ldr	r3, [r3, #28]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <netif_set_link_down+0x4e>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	08012114 	.word	0x08012114
 8008058:	08012320 	.word	0x08012320
 800805c:	08012164 	.word	0x08012164

08008060 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d002      	beq.n	8008076 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	61da      	str	r2, [r3, #28]
  }
}
 8008076:	bf00      	nop
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr

08008082 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8008082:	b480      	push	{r7}
 8008084:	b085      	sub	sp, #20
 8008086:	af00      	add	r7, sp, #0
 8008088:	60f8      	str	r0, [r7, #12]
 800808a:	60b9      	str	r1, [r7, #8]
 800808c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800808e:	f06f 030b 	mvn.w	r3, #11
}
 8008092:	4618      	mov	r0, r3
 8008094:	3714      	adds	r7, #20
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr
	...

080080a0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	4603      	mov	r3, r0
 80080a8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80080aa:	79fb      	ldrb	r3, [r7, #7]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d013      	beq.n	80080d8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80080b0:	4b0d      	ldr	r3, [pc, #52]	; (80080e8 <netif_get_by_index+0x48>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	60fb      	str	r3, [r7, #12]
 80080b6:	e00c      	b.n	80080d2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80080be:	3301      	adds	r3, #1
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	79fa      	ldrb	r2, [r7, #7]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d101      	bne.n	80080cc <netif_get_by_index+0x2c>
        return netif; /* found! */
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	e006      	b.n	80080da <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	60fb      	str	r3, [r7, #12]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1ef      	bne.n	80080b8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3714      	adds	r7, #20
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	20007f40 	.word	0x20007f40

080080ec <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80080ec:	b480      	push	{r7}
 80080ee:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80080f0:	4b03      	ldr	r3, [pc, #12]	; (8008100 <pbuf_pool_is_empty+0x14>)
 80080f2:	2201      	movs	r2, #1
 80080f4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80080f6:	bf00      	nop
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	20007f49 	.word	0x20007f49

08008104 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	4611      	mov	r1, r2
 8008110:	461a      	mov	r2, r3
 8008112:	460b      	mov	r3, r1
 8008114:	80fb      	strh	r3, [r7, #6]
 8008116:	4613      	mov	r3, r2
 8008118:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	88fa      	ldrh	r2, [r7, #6]
 800812a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	88ba      	ldrh	r2, [r7, #4]
 8008130:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8008132:	8b3b      	ldrh	r3, [r7, #24]
 8008134:	b2da      	uxtb	r2, r3
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	7f3a      	ldrb	r2, [r7, #28]
 800813e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2201      	movs	r2, #1
 8008144:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	73da      	strb	r2, [r3, #15]
}
 800814c:	bf00      	nop
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b08c      	sub	sp, #48	; 0x30
 800815c:	af02      	add	r7, sp, #8
 800815e:	4603      	mov	r3, r0
 8008160:	71fb      	strb	r3, [r7, #7]
 8008162:	460b      	mov	r3, r1
 8008164:	80bb      	strh	r3, [r7, #4]
 8008166:	4613      	mov	r3, r2
 8008168:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800816a:	79fb      	ldrb	r3, [r7, #7]
 800816c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800816e:	887b      	ldrh	r3, [r7, #2]
 8008170:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008174:	d07f      	beq.n	8008276 <pbuf_alloc+0x11e>
 8008176:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800817a:	f300 80c8 	bgt.w	800830e <pbuf_alloc+0x1b6>
 800817e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008182:	d010      	beq.n	80081a6 <pbuf_alloc+0x4e>
 8008184:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008188:	f300 80c1 	bgt.w	800830e <pbuf_alloc+0x1b6>
 800818c:	2b01      	cmp	r3, #1
 800818e:	d002      	beq.n	8008196 <pbuf_alloc+0x3e>
 8008190:	2b41      	cmp	r3, #65	; 0x41
 8008192:	f040 80bc 	bne.w	800830e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008196:	887a      	ldrh	r2, [r7, #2]
 8008198:	88bb      	ldrh	r3, [r7, #4]
 800819a:	4619      	mov	r1, r3
 800819c:	2000      	movs	r0, #0
 800819e:	f000 f8d1 	bl	8008344 <pbuf_alloc_reference>
 80081a2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80081a4:	e0bd      	b.n	8008322 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80081a6:	2300      	movs	r3, #0
 80081a8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80081aa:	2300      	movs	r3, #0
 80081ac:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80081ae:	88bb      	ldrh	r3, [r7, #4]
 80081b0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80081b2:	2008      	movs	r0, #8
 80081b4:	f7ff fbee 	bl	8007994 <memp_malloc>
 80081b8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d109      	bne.n	80081d4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80081c0:	f7ff ff94 	bl	80080ec <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d002      	beq.n	80081d0 <pbuf_alloc+0x78>
            pbuf_free(p);
 80081ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081cc:	f000 faa8 	bl	8008720 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80081d0:	2300      	movs	r3, #0
 80081d2:	e0a7      	b.n	8008324 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80081d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80081d6:	3303      	adds	r3, #3
 80081d8:	b29b      	uxth	r3, r3
 80081da:	f023 0303 	bic.w	r3, r3, #3
 80081de:	b29b      	uxth	r3, r3
 80081e0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	8b7a      	ldrh	r2, [r7, #26]
 80081e8:	4293      	cmp	r3, r2
 80081ea:	bf28      	it	cs
 80081ec:	4613      	movcs	r3, r2
 80081ee:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80081f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80081f2:	3310      	adds	r3, #16
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	4413      	add	r3, r2
 80081f8:	3303      	adds	r3, #3
 80081fa:	f023 0303 	bic.w	r3, r3, #3
 80081fe:	4618      	mov	r0, r3
 8008200:	89f9      	ldrh	r1, [r7, #14]
 8008202:	8b7a      	ldrh	r2, [r7, #26]
 8008204:	2300      	movs	r3, #0
 8008206:	9301      	str	r3, [sp, #4]
 8008208:	887b      	ldrh	r3, [r7, #2]
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	460b      	mov	r3, r1
 800820e:	4601      	mov	r1, r0
 8008210:	6938      	ldr	r0, [r7, #16]
 8008212:	f7ff ff77 	bl	8008104 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	f003 0303 	and.w	r3, r3, #3
 800821e:	2b00      	cmp	r3, #0
 8008220:	d006      	beq.n	8008230 <pbuf_alloc+0xd8>
 8008222:	4b42      	ldr	r3, [pc, #264]	; (800832c <pbuf_alloc+0x1d4>)
 8008224:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008228:	4941      	ldr	r1, [pc, #260]	; (8008330 <pbuf_alloc+0x1d8>)
 800822a:	4842      	ldr	r0, [pc, #264]	; (8008334 <pbuf_alloc+0x1dc>)
 800822c:	f008 fd48 	bl	8010cc0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008230:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008232:	3303      	adds	r3, #3
 8008234:	f023 0303 	bic.w	r3, r3, #3
 8008238:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800823c:	d106      	bne.n	800824c <pbuf_alloc+0xf4>
 800823e:	4b3b      	ldr	r3, [pc, #236]	; (800832c <pbuf_alloc+0x1d4>)
 8008240:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008244:	493c      	ldr	r1, [pc, #240]	; (8008338 <pbuf_alloc+0x1e0>)
 8008246:	483b      	ldr	r0, [pc, #236]	; (8008334 <pbuf_alloc+0x1dc>)
 8008248:	f008 fd3a 	bl	8010cc0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800824c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824e:	2b00      	cmp	r3, #0
 8008250:	d102      	bne.n	8008258 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	627b      	str	r3, [r7, #36]	; 0x24
 8008256:	e002      	b.n	800825e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8008262:	8b7a      	ldrh	r2, [r7, #26]
 8008264:	89fb      	ldrh	r3, [r7, #14]
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800826a:	2300      	movs	r3, #0
 800826c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800826e:	8b7b      	ldrh	r3, [r7, #26]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d19e      	bne.n	80081b2 <pbuf_alloc+0x5a>
      break;
 8008274:	e055      	b.n	8008322 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008276:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008278:	3303      	adds	r3, #3
 800827a:	b29b      	uxth	r3, r3
 800827c:	f023 0303 	bic.w	r3, r3, #3
 8008280:	b29a      	uxth	r2, r3
 8008282:	88bb      	ldrh	r3, [r7, #4]
 8008284:	3303      	adds	r3, #3
 8008286:	b29b      	uxth	r3, r3
 8008288:	f023 0303 	bic.w	r3, r3, #3
 800828c:	b29b      	uxth	r3, r3
 800828e:	4413      	add	r3, r2
 8008290:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008292:	8b3b      	ldrh	r3, [r7, #24]
 8008294:	3310      	adds	r3, #16
 8008296:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008298:	8b3a      	ldrh	r2, [r7, #24]
 800829a:	88bb      	ldrh	r3, [r7, #4]
 800829c:	3303      	adds	r3, #3
 800829e:	f023 0303 	bic.w	r3, r3, #3
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d306      	bcc.n	80082b4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80082a6:	8afa      	ldrh	r2, [r7, #22]
 80082a8:	88bb      	ldrh	r3, [r7, #4]
 80082aa:	3303      	adds	r3, #3
 80082ac:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d201      	bcs.n	80082b8 <pbuf_alloc+0x160>
        return NULL;
 80082b4:	2300      	movs	r3, #0
 80082b6:	e035      	b.n	8008324 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80082b8:	8afb      	ldrh	r3, [r7, #22]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7ff f9da 	bl	8007674 <mem_malloc>
 80082c0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80082c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d101      	bne.n	80082cc <pbuf_alloc+0x174>
        return NULL;
 80082c8:	2300      	movs	r3, #0
 80082ca:	e02b      	b.n	8008324 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80082cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80082ce:	3310      	adds	r3, #16
 80082d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082d2:	4413      	add	r3, r2
 80082d4:	3303      	adds	r3, #3
 80082d6:	f023 0303 	bic.w	r3, r3, #3
 80082da:	4618      	mov	r0, r3
 80082dc:	88b9      	ldrh	r1, [r7, #4]
 80082de:	88ba      	ldrh	r2, [r7, #4]
 80082e0:	2300      	movs	r3, #0
 80082e2:	9301      	str	r3, [sp, #4]
 80082e4:	887b      	ldrh	r3, [r7, #2]
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	460b      	mov	r3, r1
 80082ea:	4601      	mov	r1, r0
 80082ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082ee:	f7ff ff09 	bl	8008104 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80082f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	f003 0303 	and.w	r3, r3, #3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d010      	beq.n	8008320 <pbuf_alloc+0x1c8>
 80082fe:	4b0b      	ldr	r3, [pc, #44]	; (800832c <pbuf_alloc+0x1d4>)
 8008300:	f44f 7291 	mov.w	r2, #290	; 0x122
 8008304:	490d      	ldr	r1, [pc, #52]	; (800833c <pbuf_alloc+0x1e4>)
 8008306:	480b      	ldr	r0, [pc, #44]	; (8008334 <pbuf_alloc+0x1dc>)
 8008308:	f008 fcda 	bl	8010cc0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800830c:	e008      	b.n	8008320 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800830e:	4b07      	ldr	r3, [pc, #28]	; (800832c <pbuf_alloc+0x1d4>)
 8008310:	f240 1227 	movw	r2, #295	; 0x127
 8008314:	490a      	ldr	r1, [pc, #40]	; (8008340 <pbuf_alloc+0x1e8>)
 8008316:	4807      	ldr	r0, [pc, #28]	; (8008334 <pbuf_alloc+0x1dc>)
 8008318:	f008 fcd2 	bl	8010cc0 <iprintf>
      return NULL;
 800831c:	2300      	movs	r3, #0
 800831e:	e001      	b.n	8008324 <pbuf_alloc+0x1cc>
      break;
 8008320:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008324:	4618      	mov	r0, r3
 8008326:	3728      	adds	r7, #40	; 0x28
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	08012344 	.word	0x08012344
 8008330:	08012374 	.word	0x08012374
 8008334:	080123a4 	.word	0x080123a4
 8008338:	080123cc 	.word	0x080123cc
 800833c:	08012400 	.word	0x08012400
 8008340:	0801242c 	.word	0x0801242c

08008344 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af02      	add	r7, sp, #8
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	460b      	mov	r3, r1
 800834e:	807b      	strh	r3, [r7, #2]
 8008350:	4613      	mov	r3, r2
 8008352:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008354:	883b      	ldrh	r3, [r7, #0]
 8008356:	2b41      	cmp	r3, #65	; 0x41
 8008358:	d009      	beq.n	800836e <pbuf_alloc_reference+0x2a>
 800835a:	883b      	ldrh	r3, [r7, #0]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d006      	beq.n	800836e <pbuf_alloc_reference+0x2a>
 8008360:	4b0f      	ldr	r3, [pc, #60]	; (80083a0 <pbuf_alloc_reference+0x5c>)
 8008362:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008366:	490f      	ldr	r1, [pc, #60]	; (80083a4 <pbuf_alloc_reference+0x60>)
 8008368:	480f      	ldr	r0, [pc, #60]	; (80083a8 <pbuf_alloc_reference+0x64>)
 800836a:	f008 fca9 	bl	8010cc0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800836e:	2007      	movs	r0, #7
 8008370:	f7ff fb10 	bl	8007994 <memp_malloc>
 8008374:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d101      	bne.n	8008380 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800837c:	2300      	movs	r3, #0
 800837e:	e00b      	b.n	8008398 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008380:	8879      	ldrh	r1, [r7, #2]
 8008382:	887a      	ldrh	r2, [r7, #2]
 8008384:	2300      	movs	r3, #0
 8008386:	9301      	str	r3, [sp, #4]
 8008388:	883b      	ldrh	r3, [r7, #0]
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	460b      	mov	r3, r1
 800838e:	6879      	ldr	r1, [r7, #4]
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f7ff feb7 	bl	8008104 <pbuf_init_alloced_pbuf>
  return p;
 8008396:	68fb      	ldr	r3, [r7, #12]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	08012344 	.word	0x08012344
 80083a4:	08012448 	.word	0x08012448
 80083a8:	080123a4 	.word	0x080123a4

080083ac <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b088      	sub	sp, #32
 80083b0:	af02      	add	r7, sp, #8
 80083b2:	607b      	str	r3, [r7, #4]
 80083b4:	4603      	mov	r3, r0
 80083b6:	73fb      	strb	r3, [r7, #15]
 80083b8:	460b      	mov	r3, r1
 80083ba:	81bb      	strh	r3, [r7, #12]
 80083bc:	4613      	mov	r3, r2
 80083be:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80083c0:	7bfb      	ldrb	r3, [r7, #15]
 80083c2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80083c4:	8a7b      	ldrh	r3, [r7, #18]
 80083c6:	3303      	adds	r3, #3
 80083c8:	f023 0203 	bic.w	r2, r3, #3
 80083cc:	89bb      	ldrh	r3, [r7, #12]
 80083ce:	441a      	add	r2, r3
 80083d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d901      	bls.n	80083da <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80083d6:	2300      	movs	r3, #0
 80083d8:	e018      	b.n	800840c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80083da:	6a3b      	ldr	r3, [r7, #32]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d007      	beq.n	80083f0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80083e0:	8a7b      	ldrh	r3, [r7, #18]
 80083e2:	3303      	adds	r3, #3
 80083e4:	f023 0303 	bic.w	r3, r3, #3
 80083e8:	6a3a      	ldr	r2, [r7, #32]
 80083ea:	4413      	add	r3, r2
 80083ec:	617b      	str	r3, [r7, #20]
 80083ee:	e001      	b.n	80083f4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80083f0:	2300      	movs	r3, #0
 80083f2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	89b9      	ldrh	r1, [r7, #12]
 80083f8:	89ba      	ldrh	r2, [r7, #12]
 80083fa:	2302      	movs	r3, #2
 80083fc:	9301      	str	r3, [sp, #4]
 80083fe:	897b      	ldrh	r3, [r7, #10]
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	460b      	mov	r3, r1
 8008404:	6979      	ldr	r1, [r7, #20]
 8008406:	f7ff fe7d 	bl	8008104 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800840a:	687b      	ldr	r3, [r7, #4]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3718      	adds	r7, #24
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	460b      	mov	r3, r1
 800841e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d106      	bne.n	8008434 <pbuf_realloc+0x20>
 8008426:	4b3a      	ldr	r3, [pc, #232]	; (8008510 <pbuf_realloc+0xfc>)
 8008428:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800842c:	4939      	ldr	r1, [pc, #228]	; (8008514 <pbuf_realloc+0x100>)
 800842e:	483a      	ldr	r0, [pc, #232]	; (8008518 <pbuf_realloc+0x104>)
 8008430:	f008 fc46 	bl	8010cc0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	891b      	ldrh	r3, [r3, #8]
 8008438:	887a      	ldrh	r2, [r7, #2]
 800843a:	429a      	cmp	r2, r3
 800843c:	d263      	bcs.n	8008506 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	891a      	ldrh	r2, [r3, #8]
 8008442:	887b      	ldrh	r3, [r7, #2]
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008448:	887b      	ldrh	r3, [r7, #2]
 800844a:	817b      	strh	r3, [r7, #10]
  q = p;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008450:	e018      	b.n	8008484 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	895b      	ldrh	r3, [r3, #10]
 8008456:	897a      	ldrh	r2, [r7, #10]
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	891a      	ldrh	r2, [r3, #8]
 8008460:	893b      	ldrh	r3, [r7, #8]
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	b29a      	uxth	r2, r3
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d106      	bne.n	8008484 <pbuf_realloc+0x70>
 8008476:	4b26      	ldr	r3, [pc, #152]	; (8008510 <pbuf_realloc+0xfc>)
 8008478:	f240 12af 	movw	r2, #431	; 0x1af
 800847c:	4927      	ldr	r1, [pc, #156]	; (800851c <pbuf_realloc+0x108>)
 800847e:	4826      	ldr	r0, [pc, #152]	; (8008518 <pbuf_realloc+0x104>)
 8008480:	f008 fc1e 	bl	8010cc0 <iprintf>
  while (rem_len > q->len) {
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	895b      	ldrh	r3, [r3, #10]
 8008488:	897a      	ldrh	r2, [r7, #10]
 800848a:	429a      	cmp	r2, r3
 800848c:	d8e1      	bhi.n	8008452 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	7b1b      	ldrb	r3, [r3, #12]
 8008492:	f003 030f 	and.w	r3, r3, #15
 8008496:	2b00      	cmp	r3, #0
 8008498:	d121      	bne.n	80084de <pbuf_realloc+0xca>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	895b      	ldrh	r3, [r3, #10]
 800849e:	897a      	ldrh	r2, [r7, #10]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d01c      	beq.n	80084de <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	7b5b      	ldrb	r3, [r3, #13]
 80084a8:	f003 0302 	and.w	r3, r3, #2
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d116      	bne.n	80084de <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	685a      	ldr	r2, [r3, #4]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	897b      	ldrh	r3, [r7, #10]
 80084bc:	4413      	add	r3, r2
 80084be:	b29b      	uxth	r3, r3
 80084c0:	4619      	mov	r1, r3
 80084c2:	68f8      	ldr	r0, [r7, #12]
 80084c4:	f7fe ffda 	bl	800747c <mem_trim>
 80084c8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d106      	bne.n	80084de <pbuf_realloc+0xca>
 80084d0:	4b0f      	ldr	r3, [pc, #60]	; (8008510 <pbuf_realloc+0xfc>)
 80084d2:	f240 12bd 	movw	r2, #445	; 0x1bd
 80084d6:	4912      	ldr	r1, [pc, #72]	; (8008520 <pbuf_realloc+0x10c>)
 80084d8:	480f      	ldr	r0, [pc, #60]	; (8008518 <pbuf_realloc+0x104>)
 80084da:	f008 fbf1 	bl	8010cc0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	897a      	ldrh	r2, [r7, #10]
 80084e2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	895a      	ldrh	r2, [r3, #10]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d004      	beq.n	80084fe <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4618      	mov	r0, r3
 80084fa:	f000 f911 	bl	8008720 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	601a      	str	r2, [r3, #0]
 8008504:	e000      	b.n	8008508 <pbuf_realloc+0xf4>
    return;
 8008506:	bf00      	nop

}
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	08012344 	.word	0x08012344
 8008514:	0801245c 	.word	0x0801245c
 8008518:	080123a4 	.word	0x080123a4
 800851c:	08012474 	.word	0x08012474
 8008520:	0801248c 	.word	0x0801248c

08008524 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b086      	sub	sp, #24
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	4613      	mov	r3, r2
 8008530:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d106      	bne.n	8008546 <pbuf_add_header_impl+0x22>
 8008538:	4b2b      	ldr	r3, [pc, #172]	; (80085e8 <pbuf_add_header_impl+0xc4>)
 800853a:	f240 12df 	movw	r2, #479	; 0x1df
 800853e:	492b      	ldr	r1, [pc, #172]	; (80085ec <pbuf_add_header_impl+0xc8>)
 8008540:	482b      	ldr	r0, [pc, #172]	; (80085f0 <pbuf_add_header_impl+0xcc>)
 8008542:	f008 fbbd 	bl	8010cc0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d003      	beq.n	8008554 <pbuf_add_header_impl+0x30>
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008552:	d301      	bcc.n	8008558 <pbuf_add_header_impl+0x34>
    return 1;
 8008554:	2301      	movs	r3, #1
 8008556:	e043      	b.n	80085e0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d101      	bne.n	8008562 <pbuf_add_header_impl+0x3e>
    return 0;
 800855e:	2300      	movs	r3, #0
 8008560:	e03e      	b.n	80085e0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	891a      	ldrh	r2, [r3, #8]
 800856a:	8a7b      	ldrh	r3, [r7, #18]
 800856c:	4413      	add	r3, r2
 800856e:	b29b      	uxth	r3, r3
 8008570:	8a7a      	ldrh	r2, [r7, #18]
 8008572:	429a      	cmp	r2, r3
 8008574:	d901      	bls.n	800857a <pbuf_add_header_impl+0x56>
    return 1;
 8008576:	2301      	movs	r3, #1
 8008578:	e032      	b.n	80085e0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	7b1b      	ldrb	r3, [r3, #12]
 800857e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008580:	8a3b      	ldrh	r3, [r7, #16]
 8008582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00c      	beq.n	80085a4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	685a      	ldr	r2, [r3, #4]
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	425b      	negs	r3, r3
 8008592:	4413      	add	r3, r2
 8008594:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	3310      	adds	r3, #16
 800859a:	697a      	ldr	r2, [r7, #20]
 800859c:	429a      	cmp	r2, r3
 800859e:	d20d      	bcs.n	80085bc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e01d      	b.n	80085e0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80085a4:	79fb      	ldrb	r3, [r7, #7]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d006      	beq.n	80085b8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	685a      	ldr	r2, [r3, #4]
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	425b      	negs	r3, r3
 80085b2:	4413      	add	r3, r2
 80085b4:	617b      	str	r3, [r7, #20]
 80085b6:	e001      	b.n	80085bc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e011      	b.n	80085e0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	895a      	ldrh	r2, [r3, #10]
 80085c6:	8a7b      	ldrh	r3, [r7, #18]
 80085c8:	4413      	add	r3, r2
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	891a      	ldrh	r2, [r3, #8]
 80085d4:	8a7b      	ldrh	r3, [r7, #18]
 80085d6:	4413      	add	r3, r2
 80085d8:	b29a      	uxth	r2, r3
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	811a      	strh	r2, [r3, #8]


  return 0;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3718      	adds	r7, #24
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	08012344 	.word	0x08012344
 80085ec:	080124a8 	.word	0x080124a8
 80085f0:	080123a4 	.word	0x080123a4

080085f4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80085fe:	2200      	movs	r2, #0
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7ff ff8e 	bl	8008524 <pbuf_add_header_impl>
 8008608:	4603      	mov	r3, r0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
	...

08008614 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d106      	bne.n	8008632 <pbuf_remove_header+0x1e>
 8008624:	4b20      	ldr	r3, [pc, #128]	; (80086a8 <pbuf_remove_header+0x94>)
 8008626:	f240 224b 	movw	r2, #587	; 0x24b
 800862a:	4920      	ldr	r1, [pc, #128]	; (80086ac <pbuf_remove_header+0x98>)
 800862c:	4820      	ldr	r0, [pc, #128]	; (80086b0 <pbuf_remove_header+0x9c>)
 800862e:	f008 fb47 	bl	8010cc0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d003      	beq.n	8008640 <pbuf_remove_header+0x2c>
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800863e:	d301      	bcc.n	8008644 <pbuf_remove_header+0x30>
    return 1;
 8008640:	2301      	movs	r3, #1
 8008642:	e02c      	b.n	800869e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d101      	bne.n	800864e <pbuf_remove_header+0x3a>
    return 0;
 800864a:	2300      	movs	r3, #0
 800864c:	e027      	b.n	800869e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	895b      	ldrh	r3, [r3, #10]
 8008656:	89fa      	ldrh	r2, [r7, #14]
 8008658:	429a      	cmp	r2, r3
 800865a:	d908      	bls.n	800866e <pbuf_remove_header+0x5a>
 800865c:	4b12      	ldr	r3, [pc, #72]	; (80086a8 <pbuf_remove_header+0x94>)
 800865e:	f240 2255 	movw	r2, #597	; 0x255
 8008662:	4914      	ldr	r1, [pc, #80]	; (80086b4 <pbuf_remove_header+0xa0>)
 8008664:	4812      	ldr	r0, [pc, #72]	; (80086b0 <pbuf_remove_header+0x9c>)
 8008666:	f008 fb2b 	bl	8010cc0 <iprintf>
 800866a:	2301      	movs	r3, #1
 800866c:	e017      	b.n	800869e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	685a      	ldr	r2, [r3, #4]
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	441a      	add	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	895a      	ldrh	r2, [r3, #10]
 8008684:	89fb      	ldrh	r3, [r7, #14]
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	b29a      	uxth	r2, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	891a      	ldrh	r2, [r3, #8]
 8008692:	89fb      	ldrh	r3, [r7, #14]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	b29a      	uxth	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	08012344 	.word	0x08012344
 80086ac:	080124a8 	.word	0x080124a8
 80086b0:	080123a4 	.word	0x080123a4
 80086b4:	080124b4 	.word	0x080124b4

080086b8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	460b      	mov	r3, r1
 80086c2:	807b      	strh	r3, [r7, #2]
 80086c4:	4613      	mov	r3, r2
 80086c6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80086c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	da08      	bge.n	80086e2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80086d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80086d4:	425b      	negs	r3, r3
 80086d6:	4619      	mov	r1, r3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f7ff ff9b 	bl	8008614 <pbuf_remove_header>
 80086de:	4603      	mov	r3, r0
 80086e0:	e007      	b.n	80086f2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80086e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80086e6:	787a      	ldrb	r2, [r7, #1]
 80086e8:	4619      	mov	r1, r3
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7ff ff1a 	bl	8008524 <pbuf_add_header_impl>
 80086f0:	4603      	mov	r3, r0
  }
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b082      	sub	sp, #8
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	460b      	mov	r3, r1
 8008704:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8008706:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800870a:	2201      	movs	r2, #1
 800870c:	4619      	mov	r1, r3
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f7ff ffd2 	bl	80086b8 <pbuf_header_impl>
 8008714:	4603      	mov	r3, r0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
	...

08008720 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10b      	bne.n	8008746 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d106      	bne.n	8008742 <pbuf_free+0x22>
 8008734:	4b38      	ldr	r3, [pc, #224]	; (8008818 <pbuf_free+0xf8>)
 8008736:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800873a:	4938      	ldr	r1, [pc, #224]	; (800881c <pbuf_free+0xfc>)
 800873c:	4838      	ldr	r0, [pc, #224]	; (8008820 <pbuf_free+0x100>)
 800873e:	f008 fabf 	bl	8010cc0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008742:	2300      	movs	r3, #0
 8008744:	e063      	b.n	800880e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8008746:	2300      	movs	r3, #0
 8008748:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800874a:	e05c      	b.n	8008806 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	7b9b      	ldrb	r3, [r3, #14]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d106      	bne.n	8008762 <pbuf_free+0x42>
 8008754:	4b30      	ldr	r3, [pc, #192]	; (8008818 <pbuf_free+0xf8>)
 8008756:	f240 22f1 	movw	r2, #753	; 0x2f1
 800875a:	4932      	ldr	r1, [pc, #200]	; (8008824 <pbuf_free+0x104>)
 800875c:	4830      	ldr	r0, [pc, #192]	; (8008820 <pbuf_free+0x100>)
 800875e:	f008 faaf 	bl	8010cc0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	7b9b      	ldrb	r3, [r3, #14]
 8008766:	3b01      	subs	r3, #1
 8008768:	b2da      	uxtb	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	739a      	strb	r2, [r3, #14]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	7b9b      	ldrb	r3, [r3, #14]
 8008772:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008774:	7dbb      	ldrb	r3, [r7, #22]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d143      	bne.n	8008802 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	7b1b      	ldrb	r3, [r3, #12]
 8008784:	f003 030f 	and.w	r3, r3, #15
 8008788:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	7b5b      	ldrb	r3, [r3, #13]
 800878e:	f003 0302 	and.w	r3, r3, #2
 8008792:	2b00      	cmp	r3, #0
 8008794:	d011      	beq.n	80087ba <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d106      	bne.n	80087b0 <pbuf_free+0x90>
 80087a2:	4b1d      	ldr	r3, [pc, #116]	; (8008818 <pbuf_free+0xf8>)
 80087a4:	f240 22ff 	movw	r2, #767	; 0x2ff
 80087a8:	491f      	ldr	r1, [pc, #124]	; (8008828 <pbuf_free+0x108>)
 80087aa:	481d      	ldr	r0, [pc, #116]	; (8008820 <pbuf_free+0x100>)
 80087ac:	f008 fa88 	bl	8010cc0 <iprintf>
        pc->custom_free_function(p);
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	691b      	ldr	r3, [r3, #16]
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	4798      	blx	r3
 80087b8:	e01d      	b.n	80087f6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80087ba:	7bfb      	ldrb	r3, [r7, #15]
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d104      	bne.n	80087ca <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80087c0:	6879      	ldr	r1, [r7, #4]
 80087c2:	2008      	movs	r0, #8
 80087c4:	f7ff f956 	bl	8007a74 <memp_free>
 80087c8:	e015      	b.n	80087f6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80087ca:	7bfb      	ldrb	r3, [r7, #15]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d104      	bne.n	80087da <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80087d0:	6879      	ldr	r1, [r7, #4]
 80087d2:	2007      	movs	r0, #7
 80087d4:	f7ff f94e 	bl	8007a74 <memp_free>
 80087d8:	e00d      	b.n	80087f6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80087da:	7bfb      	ldrb	r3, [r7, #15]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d103      	bne.n	80087e8 <pbuf_free+0xc8>
          mem_free(p);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f7fe fde1 	bl	80073a8 <mem_free>
 80087e6:	e006      	b.n	80087f6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80087e8:	4b0b      	ldr	r3, [pc, #44]	; (8008818 <pbuf_free+0xf8>)
 80087ea:	f240 320f 	movw	r2, #783	; 0x30f
 80087ee:	490f      	ldr	r1, [pc, #60]	; (800882c <pbuf_free+0x10c>)
 80087f0:	480b      	ldr	r0, [pc, #44]	; (8008820 <pbuf_free+0x100>)
 80087f2:	f008 fa65 	bl	8010cc0 <iprintf>
        }
      }
      count++;
 80087f6:	7dfb      	ldrb	r3, [r7, #23]
 80087f8:	3301      	adds	r3, #1
 80087fa:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	607b      	str	r3, [r7, #4]
 8008800:	e001      	b.n	8008806 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8008802:	2300      	movs	r3, #0
 8008804:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d19f      	bne.n	800874c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800880c:	7dfb      	ldrb	r3, [r7, #23]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3718      	adds	r7, #24
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	08012344 	.word	0x08012344
 800881c:	080124a8 	.word	0x080124a8
 8008820:	080123a4 	.word	0x080123a4
 8008824:	080124d4 	.word	0x080124d4
 8008828:	080124ec 	.word	0x080124ec
 800882c:	08012510 	.word	0x08012510

08008830 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008838:	2300      	movs	r3, #0
 800883a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800883c:	e005      	b.n	800884a <pbuf_clen+0x1a>
    ++len;
 800883e:	89fb      	ldrh	r3, [r7, #14]
 8008840:	3301      	adds	r3, #1
 8008842:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1f6      	bne.n	800883e <pbuf_clen+0xe>
  }
  return len;
 8008850:	89fb      	ldrh	r3, [r7, #14]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
	...

08008860 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d010      	beq.n	8008890 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	7b9b      	ldrb	r3, [r3, #14]
 8008872:	3301      	adds	r3, #1
 8008874:	b2da      	uxtb	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	7b9b      	ldrb	r3, [r3, #14]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d106      	bne.n	8008890 <pbuf_ref+0x30>
 8008882:	4b05      	ldr	r3, [pc, #20]	; (8008898 <pbuf_ref+0x38>)
 8008884:	f240 3242 	movw	r2, #834	; 0x342
 8008888:	4904      	ldr	r1, [pc, #16]	; (800889c <pbuf_ref+0x3c>)
 800888a:	4805      	ldr	r0, [pc, #20]	; (80088a0 <pbuf_ref+0x40>)
 800888c:	f008 fa18 	bl	8010cc0 <iprintf>
  }
}
 8008890:	bf00      	nop
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	08012344 	.word	0x08012344
 800889c:	08012524 	.word	0x08012524
 80088a0:	080123a4 	.word	0x080123a4

080088a4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d002      	beq.n	80088ba <pbuf_cat+0x16>
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d107      	bne.n	80088ca <pbuf_cat+0x26>
 80088ba:	4b20      	ldr	r3, [pc, #128]	; (800893c <pbuf_cat+0x98>)
 80088bc:	f240 3259 	movw	r2, #857	; 0x359
 80088c0:	491f      	ldr	r1, [pc, #124]	; (8008940 <pbuf_cat+0x9c>)
 80088c2:	4820      	ldr	r0, [pc, #128]	; (8008944 <pbuf_cat+0xa0>)
 80088c4:	f008 f9fc 	bl	8010cc0 <iprintf>
 80088c8:	e034      	b.n	8008934 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	60fb      	str	r3, [r7, #12]
 80088ce:	e00a      	b.n	80088e6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	891a      	ldrh	r2, [r3, #8]
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	891b      	ldrh	r3, [r3, #8]
 80088d8:	4413      	add	r3, r2
 80088da:	b29a      	uxth	r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	60fb      	str	r3, [r7, #12]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1f0      	bne.n	80088d0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	891a      	ldrh	r2, [r3, #8]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	895b      	ldrh	r3, [r3, #10]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d006      	beq.n	8008908 <pbuf_cat+0x64>
 80088fa:	4b10      	ldr	r3, [pc, #64]	; (800893c <pbuf_cat+0x98>)
 80088fc:	f240 3262 	movw	r2, #866	; 0x362
 8008900:	4911      	ldr	r1, [pc, #68]	; (8008948 <pbuf_cat+0xa4>)
 8008902:	4810      	ldr	r0, [pc, #64]	; (8008944 <pbuf_cat+0xa0>)
 8008904:	f008 f9dc 	bl	8010cc0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d006      	beq.n	800891e <pbuf_cat+0x7a>
 8008910:	4b0a      	ldr	r3, [pc, #40]	; (800893c <pbuf_cat+0x98>)
 8008912:	f240 3263 	movw	r2, #867	; 0x363
 8008916:	490d      	ldr	r1, [pc, #52]	; (800894c <pbuf_cat+0xa8>)
 8008918:	480a      	ldr	r0, [pc, #40]	; (8008944 <pbuf_cat+0xa0>)
 800891a:	f008 f9d1 	bl	8010cc0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	891a      	ldrh	r2, [r3, #8]
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	891b      	ldrh	r3, [r3, #8]
 8008926:	4413      	add	r3, r2
 8008928:	b29a      	uxth	r2, r3
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	683a      	ldr	r2, [r7, #0]
 8008932:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	08012344 	.word	0x08012344
 8008940:	08012538 	.word	0x08012538
 8008944:	080123a4 	.word	0x080123a4
 8008948:	08012570 	.word	0x08012570
 800894c:	080125a0 	.word	0x080125a0

08008950 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800895a:	2300      	movs	r3, #0
 800895c:	617b      	str	r3, [r7, #20]
 800895e:	2300      	movs	r3, #0
 8008960:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d008      	beq.n	800897a <pbuf_copy+0x2a>
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d005      	beq.n	800897a <pbuf_copy+0x2a>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	891a      	ldrh	r2, [r3, #8]
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	891b      	ldrh	r3, [r3, #8]
 8008976:	429a      	cmp	r2, r3
 8008978:	d209      	bcs.n	800898e <pbuf_copy+0x3e>
 800897a:	4b57      	ldr	r3, [pc, #348]	; (8008ad8 <pbuf_copy+0x188>)
 800897c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8008980:	4956      	ldr	r1, [pc, #344]	; (8008adc <pbuf_copy+0x18c>)
 8008982:	4857      	ldr	r0, [pc, #348]	; (8008ae0 <pbuf_copy+0x190>)
 8008984:	f008 f99c 	bl	8010cc0 <iprintf>
 8008988:	f06f 030f 	mvn.w	r3, #15
 800898c:	e09f      	b.n	8008ace <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	895b      	ldrh	r3, [r3, #10]
 8008992:	461a      	mov	r2, r3
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	1ad2      	subs	r2, r2, r3
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	895b      	ldrh	r3, [r3, #10]
 800899c:	4619      	mov	r1, r3
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	1acb      	subs	r3, r1, r3
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d306      	bcc.n	80089b4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	895b      	ldrh	r3, [r3, #10]
 80089aa:	461a      	mov	r2, r3
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	60fb      	str	r3, [r7, #12]
 80089b2:	e005      	b.n	80089c0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	895b      	ldrh	r3, [r3, #10]
 80089b8:	461a      	mov	r2, r3
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685a      	ldr	r2, [r3, #4]
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	18d0      	adds	r0, r2, r3
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	4413      	add	r3, r2
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	4619      	mov	r1, r3
 80089d4:	f008 f95e 	bl	8010c94 <memcpy>
    offset_to += len;
 80089d8:	697a      	ldr	r2, [r7, #20]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	4413      	add	r3, r2
 80089de:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	4413      	add	r3, r2
 80089e6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	895b      	ldrh	r3, [r3, #10]
 80089ec:	461a      	mov	r2, r3
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d906      	bls.n	8008a02 <pbuf_copy+0xb2>
 80089f4:	4b38      	ldr	r3, [pc, #224]	; (8008ad8 <pbuf_copy+0x188>)
 80089f6:	f240 32d9 	movw	r2, #985	; 0x3d9
 80089fa:	493a      	ldr	r1, [pc, #232]	; (8008ae4 <pbuf_copy+0x194>)
 80089fc:	4838      	ldr	r0, [pc, #224]	; (8008ae0 <pbuf_copy+0x190>)
 80089fe:	f008 f95f 	bl	8010cc0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	895b      	ldrh	r3, [r3, #10]
 8008a06:	461a      	mov	r2, r3
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d906      	bls.n	8008a1c <pbuf_copy+0xcc>
 8008a0e:	4b32      	ldr	r3, [pc, #200]	; (8008ad8 <pbuf_copy+0x188>)
 8008a10:	f240 32da 	movw	r2, #986	; 0x3da
 8008a14:	4934      	ldr	r1, [pc, #208]	; (8008ae8 <pbuf_copy+0x198>)
 8008a16:	4832      	ldr	r0, [pc, #200]	; (8008ae0 <pbuf_copy+0x190>)
 8008a18:	f008 f952 	bl	8010cc0 <iprintf>
    if (offset_from >= p_from->len) {
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	895b      	ldrh	r3, [r3, #10]
 8008a20:	461a      	mov	r2, r3
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d304      	bcc.n	8008a32 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	895b      	ldrh	r3, [r3, #10]
 8008a36:	461a      	mov	r2, r3
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d114      	bne.n	8008a68 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10c      	bne.n	8008a68 <pbuf_copy+0x118>
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d009      	beq.n	8008a68 <pbuf_copy+0x118>
 8008a54:	4b20      	ldr	r3, [pc, #128]	; (8008ad8 <pbuf_copy+0x188>)
 8008a56:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008a5a:	4924      	ldr	r1, [pc, #144]	; (8008aec <pbuf_copy+0x19c>)
 8008a5c:	4820      	ldr	r0, [pc, #128]	; (8008ae0 <pbuf_copy+0x190>)
 8008a5e:	f008 f92f 	bl	8010cc0 <iprintf>
 8008a62:	f06f 030f 	mvn.w	r3, #15
 8008a66:	e032      	b.n	8008ace <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d013      	beq.n	8008a96 <pbuf_copy+0x146>
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	895a      	ldrh	r2, [r3, #10]
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	891b      	ldrh	r3, [r3, #8]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d10d      	bne.n	8008a96 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d009      	beq.n	8008a96 <pbuf_copy+0x146>
 8008a82:	4b15      	ldr	r3, [pc, #84]	; (8008ad8 <pbuf_copy+0x188>)
 8008a84:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8008a88:	4919      	ldr	r1, [pc, #100]	; (8008af0 <pbuf_copy+0x1a0>)
 8008a8a:	4815      	ldr	r0, [pc, #84]	; (8008ae0 <pbuf_copy+0x190>)
 8008a8c:	f008 f918 	bl	8010cc0 <iprintf>
 8008a90:	f06f 0305 	mvn.w	r3, #5
 8008a94:	e01b      	b.n	8008ace <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d013      	beq.n	8008ac4 <pbuf_copy+0x174>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	895a      	ldrh	r2, [r3, #10]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	891b      	ldrh	r3, [r3, #8]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d10d      	bne.n	8008ac4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d009      	beq.n	8008ac4 <pbuf_copy+0x174>
 8008ab0:	4b09      	ldr	r3, [pc, #36]	; (8008ad8 <pbuf_copy+0x188>)
 8008ab2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008ab6:	490e      	ldr	r1, [pc, #56]	; (8008af0 <pbuf_copy+0x1a0>)
 8008ab8:	4809      	ldr	r0, [pc, #36]	; (8008ae0 <pbuf_copy+0x190>)
 8008aba:	f008 f901 	bl	8010cc0 <iprintf>
 8008abe:	f06f 0305 	mvn.w	r3, #5
 8008ac2:	e004      	b.n	8008ace <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	f47f af61 	bne.w	800898e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3718      	adds	r7, #24
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	08012344 	.word	0x08012344
 8008adc:	080125ec 	.word	0x080125ec
 8008ae0:	080123a4 	.word	0x080123a4
 8008ae4:	0801261c 	.word	0x0801261c
 8008ae8:	08012634 	.word	0x08012634
 8008aec:	08012650 	.word	0x08012650
 8008af0:	08012660 	.word	0x08012660

08008af4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b088      	sub	sp, #32
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	4611      	mov	r1, r2
 8008b00:	461a      	mov	r2, r3
 8008b02:	460b      	mov	r3, r1
 8008b04:	80fb      	strh	r3, [r7, #6]
 8008b06:	4613      	mov	r3, r2
 8008b08:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d108      	bne.n	8008b2a <pbuf_copy_partial+0x36>
 8008b18:	4b2b      	ldr	r3, [pc, #172]	; (8008bc8 <pbuf_copy_partial+0xd4>)
 8008b1a:	f240 420a 	movw	r2, #1034	; 0x40a
 8008b1e:	492b      	ldr	r1, [pc, #172]	; (8008bcc <pbuf_copy_partial+0xd8>)
 8008b20:	482b      	ldr	r0, [pc, #172]	; (8008bd0 <pbuf_copy_partial+0xdc>)
 8008b22:	f008 f8cd 	bl	8010cc0 <iprintf>
 8008b26:	2300      	movs	r3, #0
 8008b28:	e04a      	b.n	8008bc0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d108      	bne.n	8008b42 <pbuf_copy_partial+0x4e>
 8008b30:	4b25      	ldr	r3, [pc, #148]	; (8008bc8 <pbuf_copy_partial+0xd4>)
 8008b32:	f240 420b 	movw	r2, #1035	; 0x40b
 8008b36:	4927      	ldr	r1, [pc, #156]	; (8008bd4 <pbuf_copy_partial+0xe0>)
 8008b38:	4825      	ldr	r0, [pc, #148]	; (8008bd0 <pbuf_copy_partial+0xdc>)
 8008b3a:	f008 f8c1 	bl	8010cc0 <iprintf>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	e03e      	b.n	8008bc0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	61fb      	str	r3, [r7, #28]
 8008b46:	e034      	b.n	8008bb2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008b48:	88bb      	ldrh	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00a      	beq.n	8008b64 <pbuf_copy_partial+0x70>
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	895b      	ldrh	r3, [r3, #10]
 8008b52:	88ba      	ldrh	r2, [r7, #4]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d305      	bcc.n	8008b64 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	895b      	ldrh	r3, [r3, #10]
 8008b5c:	88ba      	ldrh	r2, [r7, #4]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	80bb      	strh	r3, [r7, #4]
 8008b62:	e023      	b.n	8008bac <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	895a      	ldrh	r2, [r3, #10]
 8008b68:	88bb      	ldrh	r3, [r7, #4]
 8008b6a:	1ad3      	subs	r3, r2, r3
 8008b6c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008b6e:	8b3a      	ldrh	r2, [r7, #24]
 8008b70:	88fb      	ldrh	r3, [r7, #6]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d901      	bls.n	8008b7a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008b76:	88fb      	ldrh	r3, [r7, #6]
 8008b78:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008b7a:	8b7b      	ldrh	r3, [r7, #26]
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	18d0      	adds	r0, r2, r3
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	685a      	ldr	r2, [r3, #4]
 8008b84:	88bb      	ldrh	r3, [r7, #4]
 8008b86:	4413      	add	r3, r2
 8008b88:	8b3a      	ldrh	r2, [r7, #24]
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	f008 f882 	bl	8010c94 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008b90:	8afa      	ldrh	r2, [r7, #22]
 8008b92:	8b3b      	ldrh	r3, [r7, #24]
 8008b94:	4413      	add	r3, r2
 8008b96:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008b98:	8b7a      	ldrh	r2, [r7, #26]
 8008b9a:	8b3b      	ldrh	r3, [r7, #24]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008ba0:	88fa      	ldrh	r2, [r7, #6]
 8008ba2:	8b3b      	ldrh	r3, [r7, #24]
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	61fb      	str	r3, [r7, #28]
 8008bb2:	88fb      	ldrh	r3, [r7, #6]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d002      	beq.n	8008bbe <pbuf_copy_partial+0xca>
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d1c4      	bne.n	8008b48 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008bbe:	8afb      	ldrh	r3, [r7, #22]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3720      	adds	r7, #32
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	08012344 	.word	0x08012344
 8008bcc:	0801268c 	.word	0x0801268c
 8008bd0:	080123a4 	.word	0x080123a4
 8008bd4:	080126ac 	.word	0x080126ac

08008bd8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	4603      	mov	r3, r0
 8008be0:	603a      	str	r2, [r7, #0]
 8008be2:	71fb      	strb	r3, [r7, #7]
 8008be4:	460b      	mov	r3, r1
 8008be6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	8919      	ldrh	r1, [r3, #8]
 8008bec:	88ba      	ldrh	r2, [r7, #4]
 8008bee:	79fb      	ldrb	r3, [r7, #7]
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7ff fab1 	bl	8008158 <pbuf_alloc>
 8008bf6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d101      	bne.n	8008c02 <pbuf_clone+0x2a>
    return NULL;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	e011      	b.n	8008c26 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008c02:	6839      	ldr	r1, [r7, #0]
 8008c04:	68f8      	ldr	r0, [r7, #12]
 8008c06:	f7ff fea3 	bl	8008950 <pbuf_copy>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008c0e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d006      	beq.n	8008c24 <pbuf_clone+0x4c>
 8008c16:	4b06      	ldr	r3, [pc, #24]	; (8008c30 <pbuf_clone+0x58>)
 8008c18:	f240 5224 	movw	r2, #1316	; 0x524
 8008c1c:	4905      	ldr	r1, [pc, #20]	; (8008c34 <pbuf_clone+0x5c>)
 8008c1e:	4806      	ldr	r0, [pc, #24]	; (8008c38 <pbuf_clone+0x60>)
 8008c20:	f008 f84e 	bl	8010cc0 <iprintf>
  return q;
 8008c24:	68fb      	ldr	r3, [r7, #12]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	08012344 	.word	0x08012344
 8008c34:	080127b8 	.word	0x080127b8
 8008c38:	080123a4 	.word	0x080123a4

08008c3c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008c40:	f008 f856 	bl	8010cf0 <rand>
 8008c44:	4603      	mov	r3, r0
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	4b01      	ldr	r3, [pc, #4]	; (8008c5c <tcp_init+0x20>)
 8008c56:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008c58:	bf00      	nop
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	20000020 	.word	0x20000020

08008c60 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	7d1b      	ldrb	r3, [r3, #20]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d105      	bne.n	8008c7c <tcp_free+0x1c>
 8008c70:	4b06      	ldr	r3, [pc, #24]	; (8008c8c <tcp_free+0x2c>)
 8008c72:	22d4      	movs	r2, #212	; 0xd4
 8008c74:	4906      	ldr	r1, [pc, #24]	; (8008c90 <tcp_free+0x30>)
 8008c76:	4807      	ldr	r0, [pc, #28]	; (8008c94 <tcp_free+0x34>)
 8008c78:	f008 f822 	bl	8010cc0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008c7c:	6879      	ldr	r1, [r7, #4]
 8008c7e:	2001      	movs	r0, #1
 8008c80:	f7fe fef8 	bl	8007a74 <memp_free>
}
 8008c84:	bf00      	nop
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	08012844 	.word	0x08012844
 8008c90:	08012874 	.word	0x08012874
 8008c94:	08012888 	.word	0x08012888

08008c98 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	7d1b      	ldrb	r3, [r3, #20]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d105      	bne.n	8008cb4 <tcp_free_listen+0x1c>
 8008ca8:	4b06      	ldr	r3, [pc, #24]	; (8008cc4 <tcp_free_listen+0x2c>)
 8008caa:	22df      	movs	r2, #223	; 0xdf
 8008cac:	4906      	ldr	r1, [pc, #24]	; (8008cc8 <tcp_free_listen+0x30>)
 8008cae:	4807      	ldr	r0, [pc, #28]	; (8008ccc <tcp_free_listen+0x34>)
 8008cb0:	f008 f806 	bl	8010cc0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008cb4:	6879      	ldr	r1, [r7, #4]
 8008cb6:	2002      	movs	r0, #2
 8008cb8:	f7fe fedc 	bl	8007a74 <memp_free>
}
 8008cbc:	bf00      	nop
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	08012844 	.word	0x08012844
 8008cc8:	080128b0 	.word	0x080128b0
 8008ccc:	08012888 	.word	0x08012888

08008cd0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008cd4:	f000 fea6 	bl	8009a24 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008cd8:	4b07      	ldr	r3, [pc, #28]	; (8008cf8 <tcp_tmr+0x28>)
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	b2da      	uxtb	r2, r3
 8008ce0:	4b05      	ldr	r3, [pc, #20]	; (8008cf8 <tcp_tmr+0x28>)
 8008ce2:	701a      	strb	r2, [r3, #0]
 8008ce4:	4b04      	ldr	r3, [pc, #16]	; (8008cf8 <tcp_tmr+0x28>)
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	f003 0301 	and.w	r3, r3, #1
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d001      	beq.n	8008cf4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008cf0:	f000 fb58 	bl	80093a4 <tcp_slowtmr>
  }
}
 8008cf4:	bf00      	nop
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	20007f61 	.word	0x20007f61

08008cfc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d105      	bne.n	8008d18 <tcp_remove_listener+0x1c>
 8008d0c:	4b0d      	ldr	r3, [pc, #52]	; (8008d44 <tcp_remove_listener+0x48>)
 8008d0e:	22ff      	movs	r2, #255	; 0xff
 8008d10:	490d      	ldr	r1, [pc, #52]	; (8008d48 <tcp_remove_listener+0x4c>)
 8008d12:	480e      	ldr	r0, [pc, #56]	; (8008d4c <tcp_remove_listener+0x50>)
 8008d14:	f007 ffd4 	bl	8010cc0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	60fb      	str	r3, [r7, #12]
 8008d1c:	e00a      	b.n	8008d34 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d22:	683a      	ldr	r2, [r7, #0]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d102      	bne.n	8008d2e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	60fb      	str	r3, [r7, #12]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1f1      	bne.n	8008d1e <tcp_remove_listener+0x22>
    }
  }
}
 8008d3a:	bf00      	nop
 8008d3c:	bf00      	nop
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	08012844 	.word	0x08012844
 8008d48:	080128cc 	.word	0x080128cc
 8008d4c:	08012888 	.word	0x08012888

08008d50 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d106      	bne.n	8008d6c <tcp_listen_closed+0x1c>
 8008d5e:	4b14      	ldr	r3, [pc, #80]	; (8008db0 <tcp_listen_closed+0x60>)
 8008d60:	f240 1211 	movw	r2, #273	; 0x111
 8008d64:	4913      	ldr	r1, [pc, #76]	; (8008db4 <tcp_listen_closed+0x64>)
 8008d66:	4814      	ldr	r0, [pc, #80]	; (8008db8 <tcp_listen_closed+0x68>)
 8008d68:	f007 ffaa 	bl	8010cc0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	7d1b      	ldrb	r3, [r3, #20]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d006      	beq.n	8008d82 <tcp_listen_closed+0x32>
 8008d74:	4b0e      	ldr	r3, [pc, #56]	; (8008db0 <tcp_listen_closed+0x60>)
 8008d76:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008d7a:	4910      	ldr	r1, [pc, #64]	; (8008dbc <tcp_listen_closed+0x6c>)
 8008d7c:	480e      	ldr	r0, [pc, #56]	; (8008db8 <tcp_listen_closed+0x68>)
 8008d7e:	f007 ff9f 	bl	8010cc0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008d82:	2301      	movs	r3, #1
 8008d84:	60fb      	str	r3, [r7, #12]
 8008d86:	e00b      	b.n	8008da0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008d88:	4a0d      	ldr	r2, [pc, #52]	; (8008dc0 <tcp_listen_closed+0x70>)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	6879      	ldr	r1, [r7, #4]
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7ff ffb1 	bl	8008cfc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	60fb      	str	r3, [r7, #12]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2b03      	cmp	r3, #3
 8008da4:	d9f0      	bls.n	8008d88 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008da6:	bf00      	nop
 8008da8:	bf00      	nop
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	08012844 	.word	0x08012844
 8008db4:	080128f4 	.word	0x080128f4
 8008db8:	08012888 	.word	0x08012888
 8008dbc:	08012900 	.word	0x08012900
 8008dc0:	08014914 	.word	0x08014914

08008dc4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008dc4:	b5b0      	push	{r4, r5, r7, lr}
 8008dc6:	b088      	sub	sp, #32
 8008dc8:	af04      	add	r7, sp, #16
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	460b      	mov	r3, r1
 8008dce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d106      	bne.n	8008de4 <tcp_close_shutdown+0x20>
 8008dd6:	4b63      	ldr	r3, [pc, #396]	; (8008f64 <tcp_close_shutdown+0x1a0>)
 8008dd8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008ddc:	4962      	ldr	r1, [pc, #392]	; (8008f68 <tcp_close_shutdown+0x1a4>)
 8008dde:	4863      	ldr	r0, [pc, #396]	; (8008f6c <tcp_close_shutdown+0x1a8>)
 8008de0:	f007 ff6e 	bl	8010cc0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008de4:	78fb      	ldrb	r3, [r7, #3]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d066      	beq.n	8008eb8 <tcp_close_shutdown+0xf4>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	7d1b      	ldrb	r3, [r3, #20]
 8008dee:	2b04      	cmp	r3, #4
 8008df0:	d003      	beq.n	8008dfa <tcp_close_shutdown+0x36>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	7d1b      	ldrb	r3, [r3, #20]
 8008df6:	2b07      	cmp	r3, #7
 8008df8:	d15e      	bne.n	8008eb8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d104      	bne.n	8008e0c <tcp_close_shutdown+0x48>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e06:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008e0a:	d055      	beq.n	8008eb8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	8b5b      	ldrh	r3, [r3, #26]
 8008e10:	f003 0310 	and.w	r3, r3, #16
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d106      	bne.n	8008e26 <tcp_close_shutdown+0x62>
 8008e18:	4b52      	ldr	r3, [pc, #328]	; (8008f64 <tcp_close_shutdown+0x1a0>)
 8008e1a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008e1e:	4954      	ldr	r1, [pc, #336]	; (8008f70 <tcp_close_shutdown+0x1ac>)
 8008e20:	4852      	ldr	r0, [pc, #328]	; (8008f6c <tcp_close_shutdown+0x1a8>)
 8008e22:	f007 ff4d 	bl	8010cc0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008e2e:	687d      	ldr	r5, [r7, #4]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	3304      	adds	r3, #4
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	8ad2      	ldrh	r2, [r2, #22]
 8008e38:	6879      	ldr	r1, [r7, #4]
 8008e3a:	8b09      	ldrh	r1, [r1, #24]
 8008e3c:	9102      	str	r1, [sp, #8]
 8008e3e:	9201      	str	r2, [sp, #4]
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	462b      	mov	r3, r5
 8008e44:	4622      	mov	r2, r4
 8008e46:	4601      	mov	r1, r0
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f004 ff5d 	bl	800dd08 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f001 f8cc 	bl	8009fec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008e54:	4b47      	ldr	r3, [pc, #284]	; (8008f74 <tcp_close_shutdown+0x1b0>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d105      	bne.n	8008e6a <tcp_close_shutdown+0xa6>
 8008e5e:	4b45      	ldr	r3, [pc, #276]	; (8008f74 <tcp_close_shutdown+0x1b0>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	4a43      	ldr	r2, [pc, #268]	; (8008f74 <tcp_close_shutdown+0x1b0>)
 8008e66:	6013      	str	r3, [r2, #0]
 8008e68:	e013      	b.n	8008e92 <tcp_close_shutdown+0xce>
 8008e6a:	4b42      	ldr	r3, [pc, #264]	; (8008f74 <tcp_close_shutdown+0x1b0>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	60fb      	str	r3, [r7, #12]
 8008e70:	e00c      	b.n	8008e8c <tcp_close_shutdown+0xc8>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d104      	bne.n	8008e86 <tcp_close_shutdown+0xc2>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	68da      	ldr	r2, [r3, #12]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	60da      	str	r2, [r3, #12]
 8008e84:	e005      	b.n	8008e92 <tcp_close_shutdown+0xce>
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	60fb      	str	r3, [r7, #12]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1ef      	bne.n	8008e72 <tcp_close_shutdown+0xae>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	60da      	str	r2, [r3, #12]
 8008e98:	4b37      	ldr	r3, [pc, #220]	; (8008f78 <tcp_close_shutdown+0x1b4>)
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008e9e:	4b37      	ldr	r3, [pc, #220]	; (8008f7c <tcp_close_shutdown+0x1b8>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d102      	bne.n	8008eae <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008ea8:	f003 fe24 	bl	800caf4 <tcp_trigger_input_pcb_close>
 8008eac:	e002      	b.n	8008eb4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7ff fed6 	bl	8008c60 <tcp_free>
      }
      return ERR_OK;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	e050      	b.n	8008f5a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	7d1b      	ldrb	r3, [r3, #20]
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d03b      	beq.n	8008f38 <tcp_close_shutdown+0x174>
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	dc44      	bgt.n	8008f4e <tcp_close_shutdown+0x18a>
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d002      	beq.n	8008ece <tcp_close_shutdown+0x10a>
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d02a      	beq.n	8008f22 <tcp_close_shutdown+0x15e>
 8008ecc:	e03f      	b.n	8008f4e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	8adb      	ldrh	r3, [r3, #22]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d021      	beq.n	8008f1a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008ed6:	4b2a      	ldr	r3, [pc, #168]	; (8008f80 <tcp_close_shutdown+0x1bc>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d105      	bne.n	8008eec <tcp_close_shutdown+0x128>
 8008ee0:	4b27      	ldr	r3, [pc, #156]	; (8008f80 <tcp_close_shutdown+0x1bc>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	4a26      	ldr	r2, [pc, #152]	; (8008f80 <tcp_close_shutdown+0x1bc>)
 8008ee8:	6013      	str	r3, [r2, #0]
 8008eea:	e013      	b.n	8008f14 <tcp_close_shutdown+0x150>
 8008eec:	4b24      	ldr	r3, [pc, #144]	; (8008f80 <tcp_close_shutdown+0x1bc>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	60bb      	str	r3, [r7, #8]
 8008ef2:	e00c      	b.n	8008f0e <tcp_close_shutdown+0x14a>
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d104      	bne.n	8008f08 <tcp_close_shutdown+0x144>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	68da      	ldr	r2, [r3, #12]
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	60da      	str	r2, [r3, #12]
 8008f06:	e005      	b.n	8008f14 <tcp_close_shutdown+0x150>
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	60bb      	str	r3, [r7, #8]
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1ef      	bne.n	8008ef4 <tcp_close_shutdown+0x130>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7ff fea0 	bl	8008c60 <tcp_free>
      break;
 8008f20:	e01a      	b.n	8008f58 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f7ff ff14 	bl	8008d50 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008f28:	6879      	ldr	r1, [r7, #4]
 8008f2a:	4816      	ldr	r0, [pc, #88]	; (8008f84 <tcp_close_shutdown+0x1c0>)
 8008f2c:	f001 f8ae 	bl	800a08c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f7ff feb1 	bl	8008c98 <tcp_free_listen>
      break;
 8008f36:	e00f      	b.n	8008f58 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008f38:	6879      	ldr	r1, [r7, #4]
 8008f3a:	480e      	ldr	r0, [pc, #56]	; (8008f74 <tcp_close_shutdown+0x1b0>)
 8008f3c:	f001 f8a6 	bl	800a08c <tcp_pcb_remove>
 8008f40:	4b0d      	ldr	r3, [pc, #52]	; (8008f78 <tcp_close_shutdown+0x1b4>)
 8008f42:	2201      	movs	r2, #1
 8008f44:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f7ff fe8a 	bl	8008c60 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008f4c:	e004      	b.n	8008f58 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f81a 	bl	8008f88 <tcp_close_shutdown_fin>
 8008f54:	4603      	mov	r3, r0
 8008f56:	e000      	b.n	8008f5a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bdb0      	pop	{r4, r5, r7, pc}
 8008f62:	bf00      	nop
 8008f64:	08012844 	.word	0x08012844
 8008f68:	08012918 	.word	0x08012918
 8008f6c:	08012888 	.word	0x08012888
 8008f70:	08012938 	.word	0x08012938
 8008f74:	20007f58 	.word	0x20007f58
 8008f78:	20007f60 	.word	0x20007f60
 8008f7c:	20007f98 	.word	0x20007f98
 8008f80:	20007f50 	.word	0x20007f50
 8008f84:	20007f54 	.word	0x20007f54

08008f88 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d106      	bne.n	8008fa4 <tcp_close_shutdown_fin+0x1c>
 8008f96:	4b2e      	ldr	r3, [pc, #184]	; (8009050 <tcp_close_shutdown_fin+0xc8>)
 8008f98:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008f9c:	492d      	ldr	r1, [pc, #180]	; (8009054 <tcp_close_shutdown_fin+0xcc>)
 8008f9e:	482e      	ldr	r0, [pc, #184]	; (8009058 <tcp_close_shutdown_fin+0xd0>)
 8008fa0:	f007 fe8e 	bl	8010cc0 <iprintf>

  switch (pcb->state) {
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	7d1b      	ldrb	r3, [r3, #20]
 8008fa8:	2b07      	cmp	r3, #7
 8008faa:	d020      	beq.n	8008fee <tcp_close_shutdown_fin+0x66>
 8008fac:	2b07      	cmp	r3, #7
 8008fae:	dc2b      	bgt.n	8009008 <tcp_close_shutdown_fin+0x80>
 8008fb0:	2b03      	cmp	r3, #3
 8008fb2:	d002      	beq.n	8008fba <tcp_close_shutdown_fin+0x32>
 8008fb4:	2b04      	cmp	r3, #4
 8008fb6:	d00d      	beq.n	8008fd4 <tcp_close_shutdown_fin+0x4c>
 8008fb8:	e026      	b.n	8009008 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f003 ffac 	bl	800cf18 <tcp_send_fin>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d11f      	bne.n	800900c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2205      	movs	r2, #5
 8008fd0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008fd2:	e01b      	b.n	800900c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f003 ff9f 	bl	800cf18 <tcp_send_fin>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d114      	bne.n	8009010 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2205      	movs	r2, #5
 8008fea:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008fec:	e010      	b.n	8009010 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f003 ff92 	bl	800cf18 <tcp_send_fin>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d109      	bne.n	8009014 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2209      	movs	r2, #9
 8009004:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009006:	e005      	b.n	8009014 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009008:	2300      	movs	r3, #0
 800900a:	e01c      	b.n	8009046 <tcp_close_shutdown_fin+0xbe>
      break;
 800900c:	bf00      	nop
 800900e:	e002      	b.n	8009016 <tcp_close_shutdown_fin+0x8e>
      break;
 8009010:	bf00      	nop
 8009012:	e000      	b.n	8009016 <tcp_close_shutdown_fin+0x8e>
      break;
 8009014:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d103      	bne.n	8009026 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f004 f8b8 	bl	800d194 <tcp_output>
 8009024:	e00d      	b.n	8009042 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8009026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800902a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800902e:	d108      	bne.n	8009042 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	8b5b      	ldrh	r3, [r3, #26]
 8009034:	f043 0308 	orr.w	r3, r3, #8
 8009038:	b29a      	uxth	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800903e:	2300      	movs	r3, #0
 8009040:	e001      	b.n	8009046 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8009042:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009046:	4618      	mov	r0, r3
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	08012844 	.word	0x08012844
 8009054:	080128f4 	.word	0x080128f4
 8009058:	08012888 	.word	0x08012888

0800905c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d109      	bne.n	800907e <tcp_close+0x22>
 800906a:	4b11      	ldr	r3, [pc, #68]	; (80090b0 <tcp_close+0x54>)
 800906c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009070:	4910      	ldr	r1, [pc, #64]	; (80090b4 <tcp_close+0x58>)
 8009072:	4811      	ldr	r0, [pc, #68]	; (80090b8 <tcp_close+0x5c>)
 8009074:	f007 fe24 	bl	8010cc0 <iprintf>
 8009078:	f06f 030f 	mvn.w	r3, #15
 800907c:	e014      	b.n	80090a8 <tcp_close+0x4c>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	7d1b      	ldrb	r3, [r3, #20]
 8009082:	4618      	mov	r0, r3
 8009084:	f001 f99e 	bl	800a3c4 <tcp_debug_print_state>

  if (pcb->state != LISTEN) {
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	7d1b      	ldrb	r3, [r3, #20]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d006      	beq.n	800909e <tcp_close+0x42>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	8b5b      	ldrh	r3, [r3, #26]
 8009094:	f043 0310 	orr.w	r3, r3, #16
 8009098:	b29a      	uxth	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800909e:	2101      	movs	r1, #1
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7ff fe8f 	bl	8008dc4 <tcp_close_shutdown>
 80090a6:	4603      	mov	r3, r0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	08012844 	.word	0x08012844
 80090b4:	08012954 	.word	0x08012954
 80090b8:	08012888 	.word	0x08012888

080090bc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b08e      	sub	sp, #56	; 0x38
 80090c0:	af04      	add	r7, sp, #16
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d107      	bne.n	80090dc <tcp_abandon+0x20>
 80090cc:	4b52      	ldr	r3, [pc, #328]	; (8009218 <tcp_abandon+0x15c>)
 80090ce:	f240 223d 	movw	r2, #573	; 0x23d
 80090d2:	4952      	ldr	r1, [pc, #328]	; (800921c <tcp_abandon+0x160>)
 80090d4:	4852      	ldr	r0, [pc, #328]	; (8009220 <tcp_abandon+0x164>)
 80090d6:	f007 fdf3 	bl	8010cc0 <iprintf>
 80090da:	e099      	b.n	8009210 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	7d1b      	ldrb	r3, [r3, #20]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d106      	bne.n	80090f2 <tcp_abandon+0x36>
 80090e4:	4b4c      	ldr	r3, [pc, #304]	; (8009218 <tcp_abandon+0x15c>)
 80090e6:	f44f 7210 	mov.w	r2, #576	; 0x240
 80090ea:	494e      	ldr	r1, [pc, #312]	; (8009224 <tcp_abandon+0x168>)
 80090ec:	484c      	ldr	r0, [pc, #304]	; (8009220 <tcp_abandon+0x164>)
 80090ee:	f007 fde7 	bl	8010cc0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	7d1b      	ldrb	r3, [r3, #20]
 80090f6:	2b0a      	cmp	r3, #10
 80090f8:	d107      	bne.n	800910a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80090fa:	6879      	ldr	r1, [r7, #4]
 80090fc:	484a      	ldr	r0, [pc, #296]	; (8009228 <tcp_abandon+0x16c>)
 80090fe:	f000 ffc5 	bl	800a08c <tcp_pcb_remove>
    tcp_free(pcb);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7ff fdac 	bl	8008c60 <tcp_free>
 8009108:	e082      	b.n	8009210 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800910a:	2300      	movs	r3, #0
 800910c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800910e:	2300      	movs	r3, #0
 8009110:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009116:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009124:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	7d1b      	ldrb	r3, [r3, #20]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d126      	bne.n	8009182 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	8adb      	ldrh	r3, [r3, #22]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d02e      	beq.n	800919a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800913c:	4b3b      	ldr	r3, [pc, #236]	; (800922c <tcp_abandon+0x170>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	429a      	cmp	r2, r3
 8009144:	d105      	bne.n	8009152 <tcp_abandon+0x96>
 8009146:	4b39      	ldr	r3, [pc, #228]	; (800922c <tcp_abandon+0x170>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	4a37      	ldr	r2, [pc, #220]	; (800922c <tcp_abandon+0x170>)
 800914e:	6013      	str	r3, [r2, #0]
 8009150:	e013      	b.n	800917a <tcp_abandon+0xbe>
 8009152:	4b36      	ldr	r3, [pc, #216]	; (800922c <tcp_abandon+0x170>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	61fb      	str	r3, [r7, #28]
 8009158:	e00c      	b.n	8009174 <tcp_abandon+0xb8>
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	429a      	cmp	r2, r3
 8009162:	d104      	bne.n	800916e <tcp_abandon+0xb2>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	68da      	ldr	r2, [r3, #12]
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	60da      	str	r2, [r3, #12]
 800916c:	e005      	b.n	800917a <tcp_abandon+0xbe>
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	61fb      	str	r3, [r7, #28]
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1ef      	bne.n	800915a <tcp_abandon+0x9e>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	60da      	str	r2, [r3, #12]
 8009180:	e00b      	b.n	800919a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	8adb      	ldrh	r3, [r3, #22]
 800918a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800918c:	6879      	ldr	r1, [r7, #4]
 800918e:	4828      	ldr	r0, [pc, #160]	; (8009230 <tcp_abandon+0x174>)
 8009190:	f000 ff7c 	bl	800a08c <tcp_pcb_remove>
 8009194:	4b27      	ldr	r3, [pc, #156]	; (8009234 <tcp_abandon+0x178>)
 8009196:	2201      	movs	r2, #1
 8009198:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d004      	beq.n	80091ac <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 fd1c 	bl	8009be4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d004      	beq.n	80091be <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091b8:	4618      	mov	r0, r3
 80091ba:	f000 fd13 	bl	8009be4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d004      	beq.n	80091d0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 fd0a 	bl	8009be4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80091d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00e      	beq.n	80091f4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80091d6:	6879      	ldr	r1, [r7, #4]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	3304      	adds	r3, #4
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	8b12      	ldrh	r2, [r2, #24]
 80091e0:	9202      	str	r2, [sp, #8]
 80091e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80091e4:	9201      	str	r2, [sp, #4]
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	460b      	mov	r3, r1
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	69b9      	ldr	r1, [r7, #24]
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f004 fd8a 	bl	800dd08 <tcp_rst>
    }
    last_state = pcb->state;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	7d1b      	ldrb	r3, [r3, #20]
 80091f8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7ff fd30 	bl	8008c60 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d004      	beq.n	8009210 <tcp_abandon+0x154>
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	f06f 010c 	mvn.w	r1, #12
 800920c:	68f8      	ldr	r0, [r7, #12]
 800920e:	4798      	blx	r3
  }
}
 8009210:	3728      	adds	r7, #40	; 0x28
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	08012844 	.word	0x08012844
 800921c:	08012988 	.word	0x08012988
 8009220:	08012888 	.word	0x08012888
 8009224:	080129a4 	.word	0x080129a4
 8009228:	20007f5c 	.word	0x20007f5c
 800922c:	20007f50 	.word	0x20007f50
 8009230:	20007f58 	.word	0x20007f58
 8009234:	20007f60 	.word	0x20007f60

08009238 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009240:	2101      	movs	r1, #1
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7ff ff3a 	bl	80090bc <tcp_abandon>
}
 8009248:	bf00      	nop
 800924a:	3708      	adds	r7, #8
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d106      	bne.n	800926c <tcp_update_rcv_ann_wnd+0x1c>
 800925e:	4b25      	ldr	r3, [pc, #148]	; (80092f4 <tcp_update_rcv_ann_wnd+0xa4>)
 8009260:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009264:	4924      	ldr	r1, [pc, #144]	; (80092f8 <tcp_update_rcv_ann_wnd+0xa8>)
 8009266:	4825      	ldr	r0, [pc, #148]	; (80092fc <tcp_update_rcv_ann_wnd+0xac>)
 8009268:	f007 fd2a 	bl	8010cc0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009274:	4413      	add	r3, r2
 8009276:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009280:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009284:	bf28      	it	cs
 8009286:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800928a:	b292      	uxth	r2, r2
 800928c:	4413      	add	r3, r2
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	2b00      	cmp	r3, #0
 8009294:	db08      	blt.n	80092a8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	e020      	b.n	80092ea <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	dd03      	ble.n	80092be <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80092bc:	e014      	b.n	80092e8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092d0:	d306      	bcc.n	80092e0 <tcp_update_rcv_ann_wnd+0x90>
 80092d2:	4b08      	ldr	r3, [pc, #32]	; (80092f4 <tcp_update_rcv_ann_wnd+0xa4>)
 80092d4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80092d8:	4909      	ldr	r1, [pc, #36]	; (8009300 <tcp_update_rcv_ann_wnd+0xb0>)
 80092da:	4808      	ldr	r0, [pc, #32]	; (80092fc <tcp_update_rcv_ann_wnd+0xac>)
 80092dc:	f007 fcf0 	bl	8010cc0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80092e8:	2300      	movs	r3, #0
  }
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	08012844 	.word	0x08012844
 80092f8:	08012aa0 	.word	0x08012aa0
 80092fc:	08012888 	.word	0x08012888
 8009300:	08012ac4 	.word	0x08012ac4

08009304 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	460b      	mov	r3, r1
 800930e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d107      	bne.n	8009326 <tcp_recved+0x22>
 8009316:	4b1f      	ldr	r3, [pc, #124]	; (8009394 <tcp_recved+0x90>)
 8009318:	f240 32cf 	movw	r2, #975	; 0x3cf
 800931c:	491e      	ldr	r1, [pc, #120]	; (8009398 <tcp_recved+0x94>)
 800931e:	481f      	ldr	r0, [pc, #124]	; (800939c <tcp_recved+0x98>)
 8009320:	f007 fcce 	bl	8010cc0 <iprintf>
 8009324:	e032      	b.n	800938c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	7d1b      	ldrb	r3, [r3, #20]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d106      	bne.n	800933c <tcp_recved+0x38>
 800932e:	4b19      	ldr	r3, [pc, #100]	; (8009394 <tcp_recved+0x90>)
 8009330:	f240 32d2 	movw	r2, #978	; 0x3d2
 8009334:	491a      	ldr	r1, [pc, #104]	; (80093a0 <tcp_recved+0x9c>)
 8009336:	4819      	ldr	r0, [pc, #100]	; (800939c <tcp_recved+0x98>)
 8009338:	f007 fcc2 	bl	8010cc0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009340:	887b      	ldrh	r3, [r7, #2]
 8009342:	4413      	add	r3, r2
 8009344:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009346:	89fb      	ldrh	r3, [r7, #14]
 8009348:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800934c:	d804      	bhi.n	8009358 <tcp_recved+0x54>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009352:	89fa      	ldrh	r2, [r7, #14]
 8009354:	429a      	cmp	r2, r3
 8009356:	d204      	bcs.n	8009362 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800935e:	851a      	strh	r2, [r3, #40]	; 0x28
 8009360:	e002      	b.n	8009368 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	89fa      	ldrh	r2, [r7, #14]
 8009366:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f7ff ff71 	bl	8009250 <tcp_update_rcv_ann_wnd>
 800936e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009376:	d309      	bcc.n	800938c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	8b5b      	ldrh	r3, [r3, #26]
 800937c:	f043 0302 	orr.w	r3, r3, #2
 8009380:	b29a      	uxth	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f003 ff04 	bl	800d194 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	08012844 	.word	0x08012844
 8009398:	08012ae0 	.word	0x08012ae0
 800939c:	08012888 	.word	0x08012888
 80093a0:	08012af8 	.word	0x08012af8

080093a4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80093a4:	b5b0      	push	{r4, r5, r7, lr}
 80093a6:	b090      	sub	sp, #64	; 0x40
 80093a8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80093aa:	2300      	movs	r3, #0
 80093ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80093b0:	4b94      	ldr	r3, [pc, #592]	; (8009604 <tcp_slowtmr+0x260>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	3301      	adds	r3, #1
 80093b6:	4a93      	ldr	r2, [pc, #588]	; (8009604 <tcp_slowtmr+0x260>)
 80093b8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80093ba:	4b93      	ldr	r3, [pc, #588]	; (8009608 <tcp_slowtmr+0x264>)
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	3301      	adds	r3, #1
 80093c0:	b2da      	uxtb	r2, r3
 80093c2:	4b91      	ldr	r3, [pc, #580]	; (8009608 <tcp_slowtmr+0x264>)
 80093c4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80093c6:	2300      	movs	r3, #0
 80093c8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80093ca:	4b90      	ldr	r3, [pc, #576]	; (800960c <tcp_slowtmr+0x268>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80093d0:	e29f      	b.n	8009912 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80093d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d4:	7d1b      	ldrb	r3, [r3, #20]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d106      	bne.n	80093e8 <tcp_slowtmr+0x44>
 80093da:	4b8d      	ldr	r3, [pc, #564]	; (8009610 <tcp_slowtmr+0x26c>)
 80093dc:	f240 42be 	movw	r2, #1214	; 0x4be
 80093e0:	498c      	ldr	r1, [pc, #560]	; (8009614 <tcp_slowtmr+0x270>)
 80093e2:	488d      	ldr	r0, [pc, #564]	; (8009618 <tcp_slowtmr+0x274>)
 80093e4:	f007 fc6c 	bl	8010cc0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80093e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ea:	7d1b      	ldrb	r3, [r3, #20]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d106      	bne.n	80093fe <tcp_slowtmr+0x5a>
 80093f0:	4b87      	ldr	r3, [pc, #540]	; (8009610 <tcp_slowtmr+0x26c>)
 80093f2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80093f6:	4989      	ldr	r1, [pc, #548]	; (800961c <tcp_slowtmr+0x278>)
 80093f8:	4887      	ldr	r0, [pc, #540]	; (8009618 <tcp_slowtmr+0x274>)
 80093fa:	f007 fc61 	bl	8010cc0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80093fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009400:	7d1b      	ldrb	r3, [r3, #20]
 8009402:	2b0a      	cmp	r3, #10
 8009404:	d106      	bne.n	8009414 <tcp_slowtmr+0x70>
 8009406:	4b82      	ldr	r3, [pc, #520]	; (8009610 <tcp_slowtmr+0x26c>)
 8009408:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800940c:	4984      	ldr	r1, [pc, #528]	; (8009620 <tcp_slowtmr+0x27c>)
 800940e:	4882      	ldr	r0, [pc, #520]	; (8009618 <tcp_slowtmr+0x274>)
 8009410:	f007 fc56 	bl	8010cc0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009416:	7f9a      	ldrb	r2, [r3, #30]
 8009418:	4b7b      	ldr	r3, [pc, #492]	; (8009608 <tcp_slowtmr+0x264>)
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	429a      	cmp	r2, r3
 800941e:	d105      	bne.n	800942c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8009420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009422:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800942a:	e272      	b.n	8009912 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800942c:	4b76      	ldr	r3, [pc, #472]	; (8009608 <tcp_slowtmr+0x264>)
 800942e:	781a      	ldrb	r2, [r3, #0]
 8009430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009432:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8009434:	2300      	movs	r3, #0
 8009436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800943a:	2300      	movs	r3, #0
 800943c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009442:	7d1b      	ldrb	r3, [r3, #20]
 8009444:	2b02      	cmp	r3, #2
 8009446:	d10a      	bne.n	800945e <tcp_slowtmr+0xba>
 8009448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800944a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800944e:	2b05      	cmp	r3, #5
 8009450:	d905      	bls.n	800945e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8009452:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009456:	3301      	adds	r3, #1
 8009458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800945c:	e11e      	b.n	800969c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800945e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009460:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009464:	2b0b      	cmp	r3, #11
 8009466:	d905      	bls.n	8009474 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8009468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800946c:	3301      	adds	r3, #1
 800946e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009472:	e113      	b.n	800969c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009476:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800947a:	2b00      	cmp	r3, #0
 800947c:	d075      	beq.n	800956a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800947e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009482:	2b00      	cmp	r3, #0
 8009484:	d006      	beq.n	8009494 <tcp_slowtmr+0xf0>
 8009486:	4b62      	ldr	r3, [pc, #392]	; (8009610 <tcp_slowtmr+0x26c>)
 8009488:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800948c:	4965      	ldr	r1, [pc, #404]	; (8009624 <tcp_slowtmr+0x280>)
 800948e:	4862      	ldr	r0, [pc, #392]	; (8009618 <tcp_slowtmr+0x274>)
 8009490:	f007 fc16 	bl	8010cc0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009498:	2b00      	cmp	r3, #0
 800949a:	d106      	bne.n	80094aa <tcp_slowtmr+0x106>
 800949c:	4b5c      	ldr	r3, [pc, #368]	; (8009610 <tcp_slowtmr+0x26c>)
 800949e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80094a2:	4961      	ldr	r1, [pc, #388]	; (8009628 <tcp_slowtmr+0x284>)
 80094a4:	485c      	ldr	r0, [pc, #368]	; (8009618 <tcp_slowtmr+0x274>)
 80094a6:	f007 fc0b 	bl	8010cc0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80094aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ac:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80094b0:	2b0b      	cmp	r3, #11
 80094b2:	d905      	bls.n	80094c0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80094b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094b8:	3301      	adds	r3, #1
 80094ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80094be:	e0ed      	b.n	800969c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80094c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80094c6:	3b01      	subs	r3, #1
 80094c8:	4a58      	ldr	r2, [pc, #352]	; (800962c <tcp_slowtmr+0x288>)
 80094ca:	5cd3      	ldrb	r3, [r2, r3]
 80094cc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80094ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80094d4:	7c7a      	ldrb	r2, [r7, #17]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d907      	bls.n	80094ea <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80094da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80094e0:	3301      	adds	r3, #1
 80094e2:	b2da      	uxtb	r2, r3
 80094e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80094ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80094f0:	7c7a      	ldrb	r2, [r7, #17]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	f200 80d2 	bhi.w	800969c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80094f8:	2301      	movs	r3, #1
 80094fa:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80094fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009502:	2b00      	cmp	r3, #0
 8009504:	d108      	bne.n	8009518 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009506:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009508:	f004 fcf2 	bl	800def0 <tcp_zero_window_probe>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d014      	beq.n	800953c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8009512:	2300      	movs	r3, #0
 8009514:	623b      	str	r3, [r7, #32]
 8009516:	e011      	b.n	800953c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800951e:	4619      	mov	r1, r3
 8009520:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009522:	f003 fbb1 	bl	800cc88 <tcp_split_unsent_seg>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d107      	bne.n	800953c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800952c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800952e:	f003 fe31 	bl	800d194 <tcp_output>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d101      	bne.n	800953c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8009538:	2300      	movs	r3, #0
 800953a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800953c:	6a3b      	ldr	r3, [r7, #32]
 800953e:	2b00      	cmp	r3, #0
 8009540:	f000 80ac 	beq.w	800969c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8009544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009546:	2200      	movs	r2, #0
 8009548:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800954c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009552:	2b06      	cmp	r3, #6
 8009554:	f200 80a2 	bhi.w	800969c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8009558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800955a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800955e:	3301      	adds	r3, #1
 8009560:	b2da      	uxtb	r2, r3
 8009562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009564:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009568:	e098      	b.n	800969c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800956a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800956c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009570:	2b00      	cmp	r3, #0
 8009572:	db0f      	blt.n	8009594 <tcp_slowtmr+0x1f0>
 8009574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009576:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800957a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800957e:	4293      	cmp	r3, r2
 8009580:	d008      	beq.n	8009594 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8009582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009584:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009588:	b29b      	uxth	r3, r3
 800958a:	3301      	adds	r3, #1
 800958c:	b29b      	uxth	r3, r3
 800958e:	b21a      	sxth	r2, r3
 8009590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009592:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8009594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009596:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800959a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80095a0:	429a      	cmp	r2, r3
 80095a2:	db7b      	blt.n	800969c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80095a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095a6:	f004 f8ed 	bl	800d784 <tcp_rexmit_rto_prepare>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d007      	beq.n	80095c0 <tcp_slowtmr+0x21c>
 80095b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d171      	bne.n	800969c <tcp_slowtmr+0x2f8>
 80095b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d06d      	beq.n	800969c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80095c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c2:	7d1b      	ldrb	r3, [r3, #20]
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d03a      	beq.n	800963e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80095c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80095ce:	2b0c      	cmp	r3, #12
 80095d0:	bf28      	it	cs
 80095d2:	230c      	movcs	r3, #12
 80095d4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80095d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80095dc:	10db      	asrs	r3, r3, #3
 80095de:	b21b      	sxth	r3, r3
 80095e0:	461a      	mov	r2, r3
 80095e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80095e8:	4413      	add	r3, r2
 80095ea:	7efa      	ldrb	r2, [r7, #27]
 80095ec:	4910      	ldr	r1, [pc, #64]	; (8009630 <tcp_slowtmr+0x28c>)
 80095ee:	5c8a      	ldrb	r2, [r1, r2]
 80095f0:	4093      	lsls	r3, r2
 80095f2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80095fa:	4293      	cmp	r3, r2
 80095fc:	dc1a      	bgt.n	8009634 <tcp_slowtmr+0x290>
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	b21a      	sxth	r2, r3
 8009602:	e019      	b.n	8009638 <tcp_slowtmr+0x294>
 8009604:	20007f4c 	.word	0x20007f4c
 8009608:	20007f62 	.word	0x20007f62
 800960c:	20007f58 	.word	0x20007f58
 8009610:	08012844 	.word	0x08012844
 8009614:	08012b88 	.word	0x08012b88
 8009618:	08012888 	.word	0x08012888
 800961c:	08012bb4 	.word	0x08012bb4
 8009620:	08012be0 	.word	0x08012be0
 8009624:	08012c10 	.word	0x08012c10
 8009628:	08012c44 	.word	0x08012c44
 800962c:	0801490c 	.word	0x0801490c
 8009630:	080148fc 	.word	0x080148fc
 8009634:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800963e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009640:	2200      	movs	r2, #0
 8009642:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009646:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800964a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800964c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009650:	4293      	cmp	r3, r2
 8009652:	bf28      	it	cs
 8009654:	4613      	movcs	r3, r2
 8009656:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009658:	8a7b      	ldrh	r3, [r7, #18]
 800965a:	085b      	lsrs	r3, r3, #1
 800965c:	b29a      	uxth	r2, r3
 800965e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009660:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009666:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800966a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800966e:	005b      	lsls	r3, r3, #1
 8009670:	b29b      	uxth	r3, r3
 8009672:	429a      	cmp	r2, r3
 8009674:	d206      	bcs.n	8009684 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009678:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800967a:	005b      	lsls	r3, r3, #1
 800967c:	b29a      	uxth	r2, r3
 800967e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009680:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8009684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009686:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800968e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009690:	2200      	movs	r2, #0
 8009692:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8009696:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009698:	f004 f8e4 	bl	800d864 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800969c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969e:	7d1b      	ldrb	r3, [r3, #20]
 80096a0:	2b06      	cmp	r3, #6
 80096a2:	d111      	bne.n	80096c8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80096a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a6:	8b5b      	ldrh	r3, [r3, #26]
 80096a8:	f003 0310 	and.w	r3, r3, #16
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00b      	beq.n	80096c8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80096b0:	4b9d      	ldr	r3, [pc, #628]	; (8009928 <tcp_slowtmr+0x584>)
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b6:	6a1b      	ldr	r3, [r3, #32]
 80096b8:	1ad3      	subs	r3, r2, r3
 80096ba:	2b28      	cmp	r3, #40	; 0x28
 80096bc:	d904      	bls.n	80096c8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80096be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096c2:	3301      	adds	r3, #1
 80096c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80096c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ca:	7a5b      	ldrb	r3, [r3, #9]
 80096cc:	f003 0308 	and.w	r3, r3, #8
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d04c      	beq.n	800976e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80096d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80096d8:	2b04      	cmp	r3, #4
 80096da:	d003      	beq.n	80096e4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80096dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096de:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80096e0:	2b07      	cmp	r3, #7
 80096e2:	d144      	bne.n	800976e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80096e4:	4b90      	ldr	r3, [pc, #576]	; (8009928 <tcp_slowtmr+0x584>)
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ea:	6a1b      	ldr	r3, [r3, #32]
 80096ec:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80096ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096f4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80096f8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80096fc:	498b      	ldr	r1, [pc, #556]	; (800992c <tcp_slowtmr+0x588>)
 80096fe:	fba1 1303 	umull	r1, r3, r1, r3
 8009702:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009704:	429a      	cmp	r2, r3
 8009706:	d90a      	bls.n	800971e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8009708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800970c:	3301      	adds	r3, #1
 800970e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8009712:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009716:	3301      	adds	r3, #1
 8009718:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800971c:	e027      	b.n	800976e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800971e:	4b82      	ldr	r3, [pc, #520]	; (8009928 <tcp_slowtmr+0x584>)
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009724:	6a1b      	ldr	r3, [r3, #32]
 8009726:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800972e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009730:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009734:	4618      	mov	r0, r3
 8009736:	4b7e      	ldr	r3, [pc, #504]	; (8009930 <tcp_slowtmr+0x58c>)
 8009738:	fb00 f303 	mul.w	r3, r0, r3
 800973c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800973e:	497b      	ldr	r1, [pc, #492]	; (800992c <tcp_slowtmr+0x588>)
 8009740:	fba1 1303 	umull	r1, r3, r1, r3
 8009744:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009746:	429a      	cmp	r2, r3
 8009748:	d911      	bls.n	800976e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800974a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800974c:	f004 fb90 	bl	800de70 <tcp_keepalive>
 8009750:	4603      	mov	r3, r0
 8009752:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8009756:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800975a:	2b00      	cmp	r3, #0
 800975c:	d107      	bne.n	800976e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800975e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009760:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009764:	3301      	adds	r3, #1
 8009766:	b2da      	uxtb	r2, r3
 8009768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800976a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800976e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009772:	2b00      	cmp	r3, #0
 8009774:	d011      	beq.n	800979a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009776:	4b6c      	ldr	r3, [pc, #432]	; (8009928 <tcp_slowtmr+0x584>)
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977c:	6a1b      	ldr	r3, [r3, #32]
 800977e:	1ad2      	subs	r2, r2, r3
 8009780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009782:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009786:	4619      	mov	r1, r3
 8009788:	460b      	mov	r3, r1
 800978a:	005b      	lsls	r3, r3, #1
 800978c:	440b      	add	r3, r1
 800978e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009790:	429a      	cmp	r2, r3
 8009792:	d302      	bcc.n	800979a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8009794:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009796:	f000 fdeb 	bl	800a370 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800979a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979c:	7d1b      	ldrb	r3, [r3, #20]
 800979e:	2b03      	cmp	r3, #3
 80097a0:	d10b      	bne.n	80097ba <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80097a2:	4b61      	ldr	r3, [pc, #388]	; (8009928 <tcp_slowtmr+0x584>)
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a8:	6a1b      	ldr	r3, [r3, #32]
 80097aa:	1ad3      	subs	r3, r2, r3
 80097ac:	2b28      	cmp	r3, #40	; 0x28
 80097ae:	d904      	bls.n	80097ba <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80097b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097b4:	3301      	adds	r3, #1
 80097b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80097ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097bc:	7d1b      	ldrb	r3, [r3, #20]
 80097be:	2b09      	cmp	r3, #9
 80097c0:	d10b      	bne.n	80097da <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80097c2:	4b59      	ldr	r3, [pc, #356]	; (8009928 <tcp_slowtmr+0x584>)
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c8:	6a1b      	ldr	r3, [r3, #32]
 80097ca:	1ad3      	subs	r3, r2, r3
 80097cc:	2bf0      	cmp	r3, #240	; 0xf0
 80097ce:	d904      	bls.n	80097da <tcp_slowtmr+0x436>
        ++pcb_remove;
 80097d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097d4:	3301      	adds	r3, #1
 80097d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80097da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d060      	beq.n	80098a4 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80097e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097e8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80097ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097ec:	f000 fbfe 	bl	8009fec <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80097f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d010      	beq.n	8009818 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80097f6:	4b4f      	ldr	r3, [pc, #316]	; (8009934 <tcp_slowtmr+0x590>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d106      	bne.n	800980e <tcp_slowtmr+0x46a>
 8009800:	4b4d      	ldr	r3, [pc, #308]	; (8009938 <tcp_slowtmr+0x594>)
 8009802:	f240 526d 	movw	r2, #1389	; 0x56d
 8009806:	494d      	ldr	r1, [pc, #308]	; (800993c <tcp_slowtmr+0x598>)
 8009808:	484d      	ldr	r0, [pc, #308]	; (8009940 <tcp_slowtmr+0x59c>)
 800980a:	f007 fa59 	bl	8010cc0 <iprintf>
        prev->next = pcb->next;
 800980e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009810:	68da      	ldr	r2, [r3, #12]
 8009812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009814:	60da      	str	r2, [r3, #12]
 8009816:	e00f      	b.n	8009838 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009818:	4b46      	ldr	r3, [pc, #280]	; (8009934 <tcp_slowtmr+0x590>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800981e:	429a      	cmp	r2, r3
 8009820:	d006      	beq.n	8009830 <tcp_slowtmr+0x48c>
 8009822:	4b45      	ldr	r3, [pc, #276]	; (8009938 <tcp_slowtmr+0x594>)
 8009824:	f240 5271 	movw	r2, #1393	; 0x571
 8009828:	4946      	ldr	r1, [pc, #280]	; (8009944 <tcp_slowtmr+0x5a0>)
 800982a:	4845      	ldr	r0, [pc, #276]	; (8009940 <tcp_slowtmr+0x59c>)
 800982c:	f007 fa48 	bl	8010cc0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	4a3f      	ldr	r2, [pc, #252]	; (8009934 <tcp_slowtmr+0x590>)
 8009836:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8009838:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800983c:	2b00      	cmp	r3, #0
 800983e:	d013      	beq.n	8009868 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009842:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009846:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009848:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800984a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800984c:	3304      	adds	r3, #4
 800984e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009850:	8ad2      	ldrh	r2, [r2, #22]
 8009852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009854:	8b09      	ldrh	r1, [r1, #24]
 8009856:	9102      	str	r1, [sp, #8]
 8009858:	9201      	str	r2, [sp, #4]
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	462b      	mov	r3, r5
 800985e:	4622      	mov	r2, r4
 8009860:	4601      	mov	r1, r0
 8009862:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009864:	f004 fa50 	bl	800dd08 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8009868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800986e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009870:	7d1b      	ldrb	r3, [r3, #20]
 8009872:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009876:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800987e:	6838      	ldr	r0, [r7, #0]
 8009880:	f7ff f9ee 	bl	8008c60 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8009884:	4b30      	ldr	r3, [pc, #192]	; (8009948 <tcp_slowtmr+0x5a4>)
 8009886:	2200      	movs	r2, #0
 8009888:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d004      	beq.n	800989a <tcp_slowtmr+0x4f6>
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f06f 010c 	mvn.w	r1, #12
 8009896:	68b8      	ldr	r0, [r7, #8]
 8009898:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800989a:	4b2b      	ldr	r3, [pc, #172]	; (8009948 <tcp_slowtmr+0x5a4>)
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d037      	beq.n	8009912 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80098a2:	e590      	b.n	80093c6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80098a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80098a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80098ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b0:	7f1b      	ldrb	r3, [r3, #28]
 80098b2:	3301      	adds	r3, #1
 80098b4:	b2da      	uxtb	r2, r3
 80098b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80098ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098bc:	7f1a      	ldrb	r2, [r3, #28]
 80098be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c0:	7f5b      	ldrb	r3, [r3, #29]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d325      	bcc.n	8009912 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80098c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c8:	2200      	movs	r2, #0
 80098ca:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80098cc:	4b1e      	ldr	r3, [pc, #120]	; (8009948 <tcp_slowtmr+0x5a4>)
 80098ce:	2200      	movs	r2, #0
 80098d0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80098d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00b      	beq.n	80098f4 <tcp_slowtmr+0x550>
 80098dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098e4:	6912      	ldr	r2, [r2, #16]
 80098e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098e8:	4610      	mov	r0, r2
 80098ea:	4798      	blx	r3
 80098ec:	4603      	mov	r3, r0
 80098ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80098f2:	e002      	b.n	80098fa <tcp_slowtmr+0x556>
 80098f4:	2300      	movs	r3, #0
 80098f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80098fa:	4b13      	ldr	r3, [pc, #76]	; (8009948 <tcp_slowtmr+0x5a4>)
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d000      	beq.n	8009904 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8009902:	e560      	b.n	80093c6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009904:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009908:	2b00      	cmp	r3, #0
 800990a:	d102      	bne.n	8009912 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800990c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800990e:	f003 fc41 	bl	800d194 <tcp_output>
  while (pcb != NULL) {
 8009912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009914:	2b00      	cmp	r3, #0
 8009916:	f47f ad5c 	bne.w	80093d2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800991a:	2300      	movs	r3, #0
 800991c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800991e:	4b0b      	ldr	r3, [pc, #44]	; (800994c <tcp_slowtmr+0x5a8>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009924:	e067      	b.n	80099f6 <tcp_slowtmr+0x652>
 8009926:	bf00      	nop
 8009928:	20007f4c 	.word	0x20007f4c
 800992c:	10624dd3 	.word	0x10624dd3
 8009930:	000124f8 	.word	0x000124f8
 8009934:	20007f58 	.word	0x20007f58
 8009938:	08012844 	.word	0x08012844
 800993c:	08012c7c 	.word	0x08012c7c
 8009940:	08012888 	.word	0x08012888
 8009944:	08012ca8 	.word	0x08012ca8
 8009948:	20007f60 	.word	0x20007f60
 800994c:	20007f5c 	.word	0x20007f5c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009952:	7d1b      	ldrb	r3, [r3, #20]
 8009954:	2b0a      	cmp	r3, #10
 8009956:	d006      	beq.n	8009966 <tcp_slowtmr+0x5c2>
 8009958:	4b2b      	ldr	r3, [pc, #172]	; (8009a08 <tcp_slowtmr+0x664>)
 800995a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800995e:	492b      	ldr	r1, [pc, #172]	; (8009a0c <tcp_slowtmr+0x668>)
 8009960:	482b      	ldr	r0, [pc, #172]	; (8009a10 <tcp_slowtmr+0x66c>)
 8009962:	f007 f9ad 	bl	8010cc0 <iprintf>
    pcb_remove = 0;
 8009966:	2300      	movs	r3, #0
 8009968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800996c:	4b29      	ldr	r3, [pc, #164]	; (8009a14 <tcp_slowtmr+0x670>)
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009972:	6a1b      	ldr	r3, [r3, #32]
 8009974:	1ad3      	subs	r3, r2, r3
 8009976:	2bf0      	cmp	r3, #240	; 0xf0
 8009978:	d904      	bls.n	8009984 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800997a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800997e:	3301      	adds	r3, #1
 8009980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009988:	2b00      	cmp	r3, #0
 800998a:	d02f      	beq.n	80099ec <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800998c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800998e:	f000 fb2d 	bl	8009fec <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009994:	2b00      	cmp	r3, #0
 8009996:	d010      	beq.n	80099ba <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009998:	4b1f      	ldr	r3, [pc, #124]	; (8009a18 <tcp_slowtmr+0x674>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800999e:	429a      	cmp	r2, r3
 80099a0:	d106      	bne.n	80099b0 <tcp_slowtmr+0x60c>
 80099a2:	4b19      	ldr	r3, [pc, #100]	; (8009a08 <tcp_slowtmr+0x664>)
 80099a4:	f240 52af 	movw	r2, #1455	; 0x5af
 80099a8:	491c      	ldr	r1, [pc, #112]	; (8009a1c <tcp_slowtmr+0x678>)
 80099aa:	4819      	ldr	r0, [pc, #100]	; (8009a10 <tcp_slowtmr+0x66c>)
 80099ac:	f007 f988 	bl	8010cc0 <iprintf>
        prev->next = pcb->next;
 80099b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b2:	68da      	ldr	r2, [r3, #12]
 80099b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b6:	60da      	str	r2, [r3, #12]
 80099b8:	e00f      	b.n	80099da <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80099ba:	4b17      	ldr	r3, [pc, #92]	; (8009a18 <tcp_slowtmr+0x674>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d006      	beq.n	80099d2 <tcp_slowtmr+0x62e>
 80099c4:	4b10      	ldr	r3, [pc, #64]	; (8009a08 <tcp_slowtmr+0x664>)
 80099c6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80099ca:	4915      	ldr	r1, [pc, #84]	; (8009a20 <tcp_slowtmr+0x67c>)
 80099cc:	4810      	ldr	r0, [pc, #64]	; (8009a10 <tcp_slowtmr+0x66c>)
 80099ce:	f007 f977 	bl	8010cc0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80099d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	4a10      	ldr	r2, [pc, #64]	; (8009a18 <tcp_slowtmr+0x674>)
 80099d8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80099da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099dc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80099de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80099e4:	69f8      	ldr	r0, [r7, #28]
 80099e6:	f7ff f93b 	bl	8008c60 <tcp_free>
 80099ea:	e004      	b.n	80099f6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80099ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80099f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80099f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1a9      	bne.n	8009950 <tcp_slowtmr+0x5ac>
    }
  }
}
 80099fc:	bf00      	nop
 80099fe:	bf00      	nop
 8009a00:	3730      	adds	r7, #48	; 0x30
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bdb0      	pop	{r4, r5, r7, pc}
 8009a06:	bf00      	nop
 8009a08:	08012844 	.word	0x08012844
 8009a0c:	08012cd4 	.word	0x08012cd4
 8009a10:	08012888 	.word	0x08012888
 8009a14:	20007f4c 	.word	0x20007f4c
 8009a18:	20007f5c 	.word	0x20007f5c
 8009a1c:	08012d04 	.word	0x08012d04
 8009a20:	08012d2c 	.word	0x08012d2c

08009a24 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009a2a:	4b2d      	ldr	r3, [pc, #180]	; (8009ae0 <tcp_fasttmr+0xbc>)
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	b2da      	uxtb	r2, r3
 8009a32:	4b2b      	ldr	r3, [pc, #172]	; (8009ae0 <tcp_fasttmr+0xbc>)
 8009a34:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009a36:	4b2b      	ldr	r3, [pc, #172]	; (8009ae4 <tcp_fasttmr+0xc0>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009a3c:	e048      	b.n	8009ad0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	7f9a      	ldrb	r2, [r3, #30]
 8009a42:	4b27      	ldr	r3, [pc, #156]	; (8009ae0 <tcp_fasttmr+0xbc>)
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d03f      	beq.n	8009aca <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009a4a:	4b25      	ldr	r3, [pc, #148]	; (8009ae0 <tcp_fasttmr+0xbc>)
 8009a4c:	781a      	ldrb	r2, [r3, #0]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	8b5b      	ldrh	r3, [r3, #26]
 8009a56:	f003 0301 	and.w	r3, r3, #1
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d010      	beq.n	8009a80 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	8b5b      	ldrh	r3, [r3, #26]
 8009a62:	f043 0302 	orr.w	r3, r3, #2
 8009a66:	b29a      	uxth	r2, r3
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f003 fb91 	bl	800d194 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	8b5b      	ldrh	r3, [r3, #26]
 8009a76:	f023 0303 	bic.w	r3, r3, #3
 8009a7a:	b29a      	uxth	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	8b5b      	ldrh	r3, [r3, #26]
 8009a84:	f003 0308 	and.w	r3, r3, #8
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d009      	beq.n	8009aa0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	8b5b      	ldrh	r3, [r3, #26]
 8009a90:	f023 0308 	bic.w	r3, r3, #8
 8009a94:	b29a      	uxth	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f7ff fa74 	bl	8008f88 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00a      	beq.n	8009ac4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009aae:	4b0e      	ldr	r3, [pc, #56]	; (8009ae8 <tcp_fasttmr+0xc4>)
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 f819 	bl	8009aec <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009aba:	4b0b      	ldr	r3, [pc, #44]	; (8009ae8 <tcp_fasttmr+0xc4>)
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d000      	beq.n	8009ac4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009ac2:	e7b8      	b.n	8009a36 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	607b      	str	r3, [r7, #4]
 8009ac8:	e002      	b.n	8009ad0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d1b3      	bne.n	8009a3e <tcp_fasttmr+0x1a>
    }
  }
}
 8009ad6:	bf00      	nop
 8009ad8:	bf00      	nop
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	20007f62 	.word	0x20007f62
 8009ae4:	20007f58 	.word	0x20007f58
 8009ae8:	20007f60 	.word	0x20007f60

08009aec <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009aec:	b590      	push	{r4, r7, lr}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d109      	bne.n	8009b0e <tcp_process_refused_data+0x22>
 8009afa:	4b37      	ldr	r3, [pc, #220]	; (8009bd8 <tcp_process_refused_data+0xec>)
 8009afc:	f240 6209 	movw	r2, #1545	; 0x609
 8009b00:	4936      	ldr	r1, [pc, #216]	; (8009bdc <tcp_process_refused_data+0xf0>)
 8009b02:	4837      	ldr	r0, [pc, #220]	; (8009be0 <tcp_process_refused_data+0xf4>)
 8009b04:	f007 f8dc 	bl	8010cc0 <iprintf>
 8009b08:	f06f 030f 	mvn.w	r3, #15
 8009b0c:	e060      	b.n	8009bd0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b12:	7b5b      	ldrb	r3, [r3, #13]
 8009b14:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b1a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00b      	beq.n	8009b44 <tcp_process_refused_data+0x58>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6918      	ldr	r0, [r3, #16]
 8009b36:	2300      	movs	r3, #0
 8009b38:	68ba      	ldr	r2, [r7, #8]
 8009b3a:	6879      	ldr	r1, [r7, #4]
 8009b3c:	47a0      	blx	r4
 8009b3e:	4603      	mov	r3, r0
 8009b40:	73fb      	strb	r3, [r7, #15]
 8009b42:	e007      	b.n	8009b54 <tcp_process_refused_data+0x68>
 8009b44:	2300      	movs	r3, #0
 8009b46:	68ba      	ldr	r2, [r7, #8]
 8009b48:	6879      	ldr	r1, [r7, #4]
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	f000 f8a6 	bl	8009c9c <tcp_recv_null>
 8009b50:	4603      	mov	r3, r0
 8009b52:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d12a      	bne.n	8009bb2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009b5c:	7bbb      	ldrb	r3, [r7, #14]
 8009b5e:	f003 0320 	and.w	r3, r3, #32
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d033      	beq.n	8009bce <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b6a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009b6e:	d005      	beq.n	8009b7c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b74:	3301      	adds	r3, #1
 8009b76:	b29a      	uxth	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d00b      	beq.n	8009b9e <tcp_process_refused_data+0xb2>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6918      	ldr	r0, [r3, #16]
 8009b90:	2300      	movs	r3, #0
 8009b92:	2200      	movs	r2, #0
 8009b94:	6879      	ldr	r1, [r7, #4]
 8009b96:	47a0      	blx	r4
 8009b98:	4603      	mov	r3, r0
 8009b9a:	73fb      	strb	r3, [r7, #15]
 8009b9c:	e001      	b.n	8009ba2 <tcp_process_refused_data+0xb6>
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ba6:	f113 0f0d 	cmn.w	r3, #13
 8009baa:	d110      	bne.n	8009bce <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009bac:	f06f 030c 	mvn.w	r3, #12
 8009bb0:	e00e      	b.n	8009bd0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bb6:	f113 0f0d 	cmn.w	r3, #13
 8009bba:	d102      	bne.n	8009bc2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009bbc:	f06f 030c 	mvn.w	r3, #12
 8009bc0:	e006      	b.n	8009bd0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8009bc8:	f06f 0304 	mvn.w	r3, #4
 8009bcc:	e000      	b.n	8009bd0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3714      	adds	r7, #20
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd90      	pop	{r4, r7, pc}
 8009bd8:	08012844 	.word	0x08012844
 8009bdc:	08012d54 	.word	0x08012d54
 8009be0:	08012888 	.word	0x08012888

08009be4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009bec:	e007      	b.n	8009bfe <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 f80a 	bl	8009c0e <tcp_seg_free>
    seg = next;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d1f4      	bne.n	8009bee <tcp_segs_free+0xa>
  }
}
 8009c04:	bf00      	nop
 8009c06:	bf00      	nop
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b082      	sub	sp, #8
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00f      	beq.n	8009c3c <tcp_seg_free+0x2e>
    if (seg->p != NULL) {
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d007      	beq.n	8009c34 <tcp_seg_free+0x26>
      pbuf_free(seg->p);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7fe fd79 	bl	8008720 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	605a      	str	r2, [r3, #4]
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009c34:	6879      	ldr	r1, [r7, #4]
 8009c36:	2003      	movs	r0, #3
 8009c38:	f7fd ff1c 	bl	8007a74 <memp_free>
  }
}
 8009c3c:	bf00      	nop
 8009c3e:	3708      	adds	r7, #8
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d106      	bne.n	8009c60 <tcp_seg_copy+0x1c>
 8009c52:	4b0f      	ldr	r3, [pc, #60]	; (8009c90 <tcp_seg_copy+0x4c>)
 8009c54:	f240 6282 	movw	r2, #1666	; 0x682
 8009c58:	490e      	ldr	r1, [pc, #56]	; (8009c94 <tcp_seg_copy+0x50>)
 8009c5a:	480f      	ldr	r0, [pc, #60]	; (8009c98 <tcp_seg_copy+0x54>)
 8009c5c:	f007 f830 	bl	8010cc0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009c60:	2003      	movs	r0, #3
 8009c62:	f7fd fe97 	bl	8007994 <memp_malloc>
 8009c66:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d101      	bne.n	8009c72 <tcp_seg_copy+0x2e>
    return NULL;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	e00a      	b.n	8009c88 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009c72:	2210      	movs	r2, #16
 8009c74:	6879      	ldr	r1, [r7, #4]
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f007 f80c 	bl	8010c94 <memcpy>
  pbuf_ref(cseg->p);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7fe fded 	bl	8008860 <pbuf_ref>
  return cseg;
 8009c86:	68fb      	ldr	r3, [r7, #12]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}
 8009c90:	08012844 	.word	0x08012844
 8009c94:	08012d98 	.word	0x08012d98
 8009c98:	08012888 	.word	0x08012888

08009c9c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	607a      	str	r2, [r7, #4]
 8009ca8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d109      	bne.n	8009cc4 <tcp_recv_null+0x28>
 8009cb0:	4b12      	ldr	r3, [pc, #72]	; (8009cfc <tcp_recv_null+0x60>)
 8009cb2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009cb6:	4912      	ldr	r1, [pc, #72]	; (8009d00 <tcp_recv_null+0x64>)
 8009cb8:	4812      	ldr	r0, [pc, #72]	; (8009d04 <tcp_recv_null+0x68>)
 8009cba:	f007 f801 	bl	8010cc0 <iprintf>
 8009cbe:	f06f 030f 	mvn.w	r3, #15
 8009cc2:	e016      	b.n	8009cf2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d009      	beq.n	8009cde <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	891b      	ldrh	r3, [r3, #8]
 8009cce:	4619      	mov	r1, r3
 8009cd0:	68b8      	ldr	r0, [r7, #8]
 8009cd2:	f7ff fb17 	bl	8009304 <tcp_recved>
    pbuf_free(p);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f7fe fd22 	bl	8008720 <pbuf_free>
 8009cdc:	e008      	b.n	8009cf0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009cde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d104      	bne.n	8009cf0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009ce6:	68b8      	ldr	r0, [r7, #8]
 8009ce8:	f7ff f9b8 	bl	800905c <tcp_close>
 8009cec:	4603      	mov	r3, r0
 8009cee:	e000      	b.n	8009cf2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	08012844 	.word	0x08012844
 8009d00:	08012db4 	.word	0x08012db4
 8009d04:	08012888 	.word	0x08012888

08009d08 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b086      	sub	sp, #24
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	4603      	mov	r3, r0
 8009d10:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	db01      	blt.n	8009d1e <tcp_kill_prio+0x16>
 8009d1a:	79fb      	ldrb	r3, [r7, #7]
 8009d1c:	e000      	b.n	8009d20 <tcp_kill_prio+0x18>
 8009d1e:	237f      	movs	r3, #127	; 0x7f
 8009d20:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009d22:	7afb      	ldrb	r3, [r7, #11]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d034      	beq.n	8009d92 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009d28:	7afb      	ldrb	r3, [r7, #11]
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009d32:	2300      	movs	r3, #0
 8009d34:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d36:	4b19      	ldr	r3, [pc, #100]	; (8009d9c <tcp_kill_prio+0x94>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	617b      	str	r3, [r7, #20]
 8009d3c:	e01f      	b.n	8009d7e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	7d5b      	ldrb	r3, [r3, #21]
 8009d42:	7afa      	ldrb	r2, [r7, #11]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d80c      	bhi.n	8009d62 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009d4c:	7afa      	ldrb	r2, [r7, #11]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d112      	bne.n	8009d78 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009d52:	4b13      	ldr	r3, [pc, #76]	; (8009da0 <tcp_kill_prio+0x98>)
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	6a1b      	ldr	r3, [r3, #32]
 8009d5a:	1ad3      	subs	r3, r2, r3
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d80a      	bhi.n	8009d78 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009d62:	4b0f      	ldr	r3, [pc, #60]	; (8009da0 <tcp_kill_prio+0x98>)
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	6a1b      	ldr	r3, [r3, #32]
 8009d6a:	1ad3      	subs	r3, r2, r3
 8009d6c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	7d5b      	ldrb	r3, [r3, #21]
 8009d76:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	617b      	str	r3, [r7, #20]
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d1dc      	bne.n	8009d3e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d004      	beq.n	8009d94 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009d8a:	6938      	ldr	r0, [r7, #16]
 8009d8c:	f7ff fa54 	bl	8009238 <tcp_abort>
 8009d90:	e000      	b.n	8009d94 <tcp_kill_prio+0x8c>
    return;
 8009d92:	bf00      	nop
  }
}
 8009d94:	3718      	adds	r7, #24
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	20007f58 	.word	0x20007f58
 8009da0:	20007f4c 	.word	0x20007f4c

08009da4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b086      	sub	sp, #24
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	4603      	mov	r3, r0
 8009dac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009dae:	79fb      	ldrb	r3, [r7, #7]
 8009db0:	2b08      	cmp	r3, #8
 8009db2:	d009      	beq.n	8009dc8 <tcp_kill_state+0x24>
 8009db4:	79fb      	ldrb	r3, [r7, #7]
 8009db6:	2b09      	cmp	r3, #9
 8009db8:	d006      	beq.n	8009dc8 <tcp_kill_state+0x24>
 8009dba:	4b1a      	ldr	r3, [pc, #104]	; (8009e24 <tcp_kill_state+0x80>)
 8009dbc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009dc0:	4919      	ldr	r1, [pc, #100]	; (8009e28 <tcp_kill_state+0x84>)
 8009dc2:	481a      	ldr	r0, [pc, #104]	; (8009e2c <tcp_kill_state+0x88>)
 8009dc4:	f006 ff7c 	bl	8010cc0 <iprintf>

  inactivity = 0;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009dd0:	4b17      	ldr	r3, [pc, #92]	; (8009e30 <tcp_kill_state+0x8c>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	617b      	str	r3, [r7, #20]
 8009dd6:	e017      	b.n	8009e08 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	7d1b      	ldrb	r3, [r3, #20]
 8009ddc:	79fa      	ldrb	r2, [r7, #7]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d10f      	bne.n	8009e02 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009de2:	4b14      	ldr	r3, [pc, #80]	; (8009e34 <tcp_kill_state+0x90>)
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	6a1b      	ldr	r3, [r3, #32]
 8009dea:	1ad3      	subs	r3, r2, r3
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d807      	bhi.n	8009e02 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009df2:	4b10      	ldr	r3, [pc, #64]	; (8009e34 <tcp_kill_state+0x90>)
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	6a1b      	ldr	r3, [r3, #32]
 8009dfa:	1ad3      	subs	r3, r2, r3
 8009dfc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	617b      	str	r3, [r7, #20]
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1e4      	bne.n	8009dd8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d003      	beq.n	8009e1c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009e14:	2100      	movs	r1, #0
 8009e16:	6938      	ldr	r0, [r7, #16]
 8009e18:	f7ff f950 	bl	80090bc <tcp_abandon>
  }
}
 8009e1c:	bf00      	nop
 8009e1e:	3718      	adds	r7, #24
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	08012844 	.word	0x08012844
 8009e28:	08012dd0 	.word	0x08012dd0
 8009e2c:	08012888 	.word	0x08012888
 8009e30:	20007f58 	.word	0x20007f58
 8009e34:	20007f4c 	.word	0x20007f4c

08009e38 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009e42:	2300      	movs	r3, #0
 8009e44:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e46:	4b12      	ldr	r3, [pc, #72]	; (8009e90 <tcp_kill_timewait+0x58>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	60fb      	str	r3, [r7, #12]
 8009e4c:	e012      	b.n	8009e74 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009e4e:	4b11      	ldr	r3, [pc, #68]	; (8009e94 <tcp_kill_timewait+0x5c>)
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6a1b      	ldr	r3, [r3, #32]
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d807      	bhi.n	8009e6e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009e5e:	4b0d      	ldr	r3, [pc, #52]	; (8009e94 <tcp_kill_timewait+0x5c>)
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6a1b      	ldr	r3, [r3, #32]
 8009e66:	1ad3      	subs	r3, r2, r3
 8009e68:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	60fb      	str	r3, [r7, #12]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1e9      	bne.n	8009e4e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d002      	beq.n	8009e86 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009e80:	68b8      	ldr	r0, [r7, #8]
 8009e82:	f7ff f9d9 	bl	8009238 <tcp_abort>
  }
}
 8009e86:	bf00      	nop
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	20007f5c 	.word	0x20007f5c
 8009e94:	20007f4c 	.word	0x20007f4c

08009e98 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009e9e:	4b10      	ldr	r3, [pc, #64]	; (8009ee0 <tcp_handle_closepend+0x48>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009ea4:	e014      	b.n	8009ed0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	8b5b      	ldrh	r3, [r3, #26]
 8009eb0:	f003 0308 	and.w	r3, r3, #8
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d009      	beq.n	8009ecc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	8b5b      	ldrh	r3, [r3, #26]
 8009ebc:	f023 0308 	bic.w	r3, r3, #8
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f7ff f85e 	bl	8008f88 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d1e7      	bne.n	8009ea6 <tcp_handle_closepend+0xe>
  }
}
 8009ed6:	bf00      	nop
 8009ed8:	bf00      	nop
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	20007f58 	.word	0x20007f58

08009ee4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	4603      	mov	r3, r0
 8009eec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009eee:	2001      	movs	r0, #1
 8009ef0:	f7fd fd50 	bl	8007994 <memp_malloc>
 8009ef4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d126      	bne.n	8009f4a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009efc:	f7ff ffcc 	bl	8009e98 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009f00:	f7ff ff9a 	bl	8009e38 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009f04:	2001      	movs	r0, #1
 8009f06:	f7fd fd45 	bl	8007994 <memp_malloc>
 8009f0a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d11b      	bne.n	8009f4a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009f12:	2009      	movs	r0, #9
 8009f14:	f7ff ff46 	bl	8009da4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009f18:	2001      	movs	r0, #1
 8009f1a:	f7fd fd3b 	bl	8007994 <memp_malloc>
 8009f1e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d111      	bne.n	8009f4a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009f26:	2008      	movs	r0, #8
 8009f28:	f7ff ff3c 	bl	8009da4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009f2c:	2001      	movs	r0, #1
 8009f2e:	f7fd fd31 	bl	8007994 <memp_malloc>
 8009f32:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d107      	bne.n	8009f4a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009f3a:	79fb      	ldrb	r3, [r7, #7]
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7ff fee3 	bl	8009d08 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009f42:	2001      	movs	r0, #1
 8009f44:	f7fd fd26 	bl	8007994 <memp_malloc>
 8009f48:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d03f      	beq.n	8009fd0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009f50:	229c      	movs	r2, #156	; 0x9c
 8009f52:	2100      	movs	r1, #0
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f006 feab 	bl	8010cb0 <memset>
    pcb->prio = prio;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	79fa      	ldrb	r2, [r7, #7]
 8009f5e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009f66:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009f70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	22ff      	movs	r2, #255	; 0xff
 8009f7e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009f86:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2206      	movs	r2, #6
 8009f8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2206      	movs	r2, #6
 8009f94:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f9c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009fa6:	4b0d      	ldr	r3, [pc, #52]	; (8009fdc <tcp_alloc+0xf8>)
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009fae:	4b0c      	ldr	r3, [pc, #48]	; (8009fe0 <tcp_alloc+0xfc>)
 8009fb0:	781a      	ldrb	r2, [r3, #0]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009fbc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	4a08      	ldr	r2, [pc, #32]	; (8009fe4 <tcp_alloc+0x100>)
 8009fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	4a07      	ldr	r2, [pc, #28]	; (8009fe8 <tcp_alloc+0x104>)
 8009fcc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3710      	adds	r7, #16
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	20007f4c 	.word	0x20007f4c
 8009fe0:	20007f62 	.word	0x20007f62
 8009fe4:	08009c9d 	.word	0x08009c9d
 8009fe8:	006ddd00 	.word	0x006ddd00

08009fec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d107      	bne.n	800a00a <tcp_pcb_purge+0x1e>
 8009ffa:	4b21      	ldr	r3, [pc, #132]	; (800a080 <tcp_pcb_purge+0x94>)
 8009ffc:	f640 0251 	movw	r2, #2129	; 0x851
 800a000:	4920      	ldr	r1, [pc, #128]	; (800a084 <tcp_pcb_purge+0x98>)
 800a002:	4821      	ldr	r0, [pc, #132]	; (800a088 <tcp_pcb_purge+0x9c>)
 800a004:	f006 fe5c 	bl	8010cc0 <iprintf>
 800a008:	e037      	b.n	800a07a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	7d1b      	ldrb	r3, [r3, #20]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d033      	beq.n	800a07a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a016:	2b0a      	cmp	r3, #10
 800a018:	d02f      	beq.n	800a07a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d02b      	beq.n	800a07a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a026:	2b00      	cmp	r3, #0
 800a028:	d007      	beq.n	800a03a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a02e:	4618      	mov	r0, r3
 800a030:	f7fe fb76 	bl	8008720 <pbuf_free>
      pcb->refused_data = NULL;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d002      	beq.n	800a048 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 f994 	bl	800a370 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a04e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a054:	4618      	mov	r0, r3
 800a056:	f7ff fdc5 	bl	8009be4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a05e:	4618      	mov	r0, r3
 800a060:	f7ff fdc0 	bl	8009be4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	66da      	str	r2, [r3, #108]	; 0x6c
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a07a:	3708      	adds	r7, #8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	08012844 	.word	0x08012844
 800a084:	08012e90 	.word	0x08012e90
 800a088:	08012888 	.word	0x08012888

0800a08c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d106      	bne.n	800a0aa <tcp_pcb_remove+0x1e>
 800a09c:	4b44      	ldr	r3, [pc, #272]	; (800a1b0 <tcp_pcb_remove+0x124>)
 800a09e:	f640 0283 	movw	r2, #2179	; 0x883
 800a0a2:	4944      	ldr	r1, [pc, #272]	; (800a1b4 <tcp_pcb_remove+0x128>)
 800a0a4:	4844      	ldr	r0, [pc, #272]	; (800a1b8 <tcp_pcb_remove+0x12c>)
 800a0a6:	f006 fe0b 	bl	8010cc0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d106      	bne.n	800a0be <tcp_pcb_remove+0x32>
 800a0b0:	4b3f      	ldr	r3, [pc, #252]	; (800a1b0 <tcp_pcb_remove+0x124>)
 800a0b2:	f640 0284 	movw	r2, #2180	; 0x884
 800a0b6:	4941      	ldr	r1, [pc, #260]	; (800a1bc <tcp_pcb_remove+0x130>)
 800a0b8:	483f      	ldr	r0, [pc, #252]	; (800a1b8 <tcp_pcb_remove+0x12c>)
 800a0ba:	f006 fe01 	bl	8010cc0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	683a      	ldr	r2, [r7, #0]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d105      	bne.n	800a0d4 <tcp_pcb_remove+0x48>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68da      	ldr	r2, [r3, #12]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	601a      	str	r2, [r3, #0]
 800a0d2:	e013      	b.n	800a0fc <tcp_pcb_remove+0x70>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	60fb      	str	r3, [r7, #12]
 800a0da:	e00c      	b.n	800a0f6 <tcp_pcb_remove+0x6a>
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	683a      	ldr	r2, [r7, #0]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d104      	bne.n	800a0f0 <tcp_pcb_remove+0x64>
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	68da      	ldr	r2, [r3, #12]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	60da      	str	r2, [r3, #12]
 800a0ee:	e005      	b.n	800a0fc <tcp_pcb_remove+0x70>
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	60fb      	str	r3, [r7, #12]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d1ef      	bne.n	800a0dc <tcp_pcb_remove+0x50>
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	2200      	movs	r2, #0
 800a100:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a102:	6838      	ldr	r0, [r7, #0]
 800a104:	f7ff ff72 	bl	8009fec <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	7d1b      	ldrb	r3, [r3, #20]
 800a10c:	2b0a      	cmp	r3, #10
 800a10e:	d013      	beq.n	800a138 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a114:	2b01      	cmp	r3, #1
 800a116:	d00f      	beq.n	800a138 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	8b5b      	ldrh	r3, [r3, #26]
 800a11c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a120:	2b00      	cmp	r3, #0
 800a122:	d009      	beq.n	800a138 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	8b5b      	ldrh	r3, [r3, #26]
 800a128:	f043 0302 	orr.w	r3, r3, #2
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a132:	6838      	ldr	r0, [r7, #0]
 800a134:	f003 f82e 	bl	800d194 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	7d1b      	ldrb	r3, [r3, #20]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d020      	beq.n	800a182 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a144:	2b00      	cmp	r3, #0
 800a146:	d006      	beq.n	800a156 <tcp_pcb_remove+0xca>
 800a148:	4b19      	ldr	r3, [pc, #100]	; (800a1b0 <tcp_pcb_remove+0x124>)
 800a14a:	f640 0293 	movw	r2, #2195	; 0x893
 800a14e:	491c      	ldr	r1, [pc, #112]	; (800a1c0 <tcp_pcb_remove+0x134>)
 800a150:	4819      	ldr	r0, [pc, #100]	; (800a1b8 <tcp_pcb_remove+0x12c>)
 800a152:	f006 fdb5 	bl	8010cc0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d006      	beq.n	800a16c <tcp_pcb_remove+0xe0>
 800a15e:	4b14      	ldr	r3, [pc, #80]	; (800a1b0 <tcp_pcb_remove+0x124>)
 800a160:	f640 0294 	movw	r2, #2196	; 0x894
 800a164:	4917      	ldr	r1, [pc, #92]	; (800a1c4 <tcp_pcb_remove+0x138>)
 800a166:	4814      	ldr	r0, [pc, #80]	; (800a1b8 <tcp_pcb_remove+0x12c>)
 800a168:	f006 fdaa 	bl	8010cc0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a170:	2b00      	cmp	r3, #0
 800a172:	d006      	beq.n	800a182 <tcp_pcb_remove+0xf6>
 800a174:	4b0e      	ldr	r3, [pc, #56]	; (800a1b0 <tcp_pcb_remove+0x124>)
 800a176:	f640 0296 	movw	r2, #2198	; 0x896
 800a17a:	4913      	ldr	r1, [pc, #76]	; (800a1c8 <tcp_pcb_remove+0x13c>)
 800a17c:	480e      	ldr	r0, [pc, #56]	; (800a1b8 <tcp_pcb_remove+0x12c>)
 800a17e:	f006 fd9f 	bl	8010cc0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	2200      	movs	r2, #0
 800a186:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	2200      	movs	r2, #0
 800a18c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
 800a18e:	f000 f92f 	bl	800a3f0 <tcp_pcbs_sane>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d106      	bne.n	800a1a6 <tcp_pcb_remove+0x11a>
 800a198:	4b05      	ldr	r3, [pc, #20]	; (800a1b0 <tcp_pcb_remove+0x124>)
 800a19a:	f640 029e 	movw	r2, #2206	; 0x89e
 800a19e:	490b      	ldr	r1, [pc, #44]	; (800a1cc <tcp_pcb_remove+0x140>)
 800a1a0:	4805      	ldr	r0, [pc, #20]	; (800a1b8 <tcp_pcb_remove+0x12c>)
 800a1a2:	f006 fd8d 	bl	8010cc0 <iprintf>
}
 800a1a6:	bf00      	nop
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	08012844 	.word	0x08012844
 800a1b4:	08012eac 	.word	0x08012eac
 800a1b8:	08012888 	.word	0x08012888
 800a1bc:	08012ec8 	.word	0x08012ec8
 800a1c0:	08012ee8 	.word	0x08012ee8
 800a1c4:	08012f00 	.word	0x08012f00
 800a1c8:	08012f1c 	.word	0x08012f1c
 800a1cc:	08012f34 	.word	0x08012f34

0800a1d0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d106      	bne.n	800a1ec <tcp_next_iss+0x1c>
 800a1de:	4b0a      	ldr	r3, [pc, #40]	; (800a208 <tcp_next_iss+0x38>)
 800a1e0:	f640 02af 	movw	r2, #2223	; 0x8af
 800a1e4:	4909      	ldr	r1, [pc, #36]	; (800a20c <tcp_next_iss+0x3c>)
 800a1e6:	480a      	ldr	r0, [pc, #40]	; (800a210 <tcp_next_iss+0x40>)
 800a1e8:	f006 fd6a 	bl	8010cc0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a1ec:	4b09      	ldr	r3, [pc, #36]	; (800a214 <tcp_next_iss+0x44>)
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	4b09      	ldr	r3, [pc, #36]	; (800a218 <tcp_next_iss+0x48>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	4a07      	ldr	r2, [pc, #28]	; (800a214 <tcp_next_iss+0x44>)
 800a1f8:	6013      	str	r3, [r2, #0]
  return iss;
 800a1fa:	4b06      	ldr	r3, [pc, #24]	; (800a214 <tcp_next_iss+0x44>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3708      	adds	r7, #8
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	08012844 	.word	0x08012844
 800a20c:	08012f54 	.word	0x08012f54
 800a210:	08012888 	.word	0x08012888
 800a214:	20000024 	.word	0x20000024
 800a218:	20007f4c 	.word	0x20007f4c

0800a21c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b086      	sub	sp, #24
 800a220:	af00      	add	r7, sp, #0
 800a222:	4603      	mov	r3, r0
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
 800a228:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d106      	bne.n	800a23e <tcp_eff_send_mss_netif+0x22>
 800a230:	4b14      	ldr	r3, [pc, #80]	; (800a284 <tcp_eff_send_mss_netif+0x68>)
 800a232:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800a236:	4914      	ldr	r1, [pc, #80]	; (800a288 <tcp_eff_send_mss_netif+0x6c>)
 800a238:	4814      	ldr	r0, [pc, #80]	; (800a28c <tcp_eff_send_mss_netif+0x70>)
 800a23a:	f006 fd41 	bl	8010cc0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d101      	bne.n	800a248 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a244:	89fb      	ldrh	r3, [r7, #14]
 800a246:	e019      	b.n	800a27c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a24c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a24e:	8afb      	ldrh	r3, [r7, #22]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d012      	beq.n	800a27a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a254:	2328      	movs	r3, #40	; 0x28
 800a256:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a258:	8afa      	ldrh	r2, [r7, #22]
 800a25a:	8abb      	ldrh	r3, [r7, #20]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d904      	bls.n	800a26a <tcp_eff_send_mss_netif+0x4e>
 800a260:	8afa      	ldrh	r2, [r7, #22]
 800a262:	8abb      	ldrh	r3, [r7, #20]
 800a264:	1ad3      	subs	r3, r2, r3
 800a266:	b29b      	uxth	r3, r3
 800a268:	e000      	b.n	800a26c <tcp_eff_send_mss_netif+0x50>
 800a26a:	2300      	movs	r3, #0
 800a26c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a26e:	8a7a      	ldrh	r2, [r7, #18]
 800a270:	89fb      	ldrh	r3, [r7, #14]
 800a272:	4293      	cmp	r3, r2
 800a274:	bf28      	it	cs
 800a276:	4613      	movcs	r3, r2
 800a278:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a27a:	89fb      	ldrh	r3, [r7, #14]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3718      	adds	r7, #24
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	08012844 	.word	0x08012844
 800a288:	08012f70 	.word	0x08012f70
 800a28c:	08012888 	.word	0x08012888

0800a290 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d119      	bne.n	800a2d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a2a4:	4b10      	ldr	r3, [pc, #64]	; (800a2e8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a2a6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800a2aa:	4910      	ldr	r1, [pc, #64]	; (800a2ec <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a2ac:	4810      	ldr	r0, [pc, #64]	; (800a2f0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a2ae:	f006 fd07 	bl	8010cc0 <iprintf>

  while (pcb != NULL) {
 800a2b2:	e011      	b.n	800a2d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d108      	bne.n	800a2d2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a2c6:	68f8      	ldr	r0, [r7, #12]
 800a2c8:	f7fe ffb6 	bl	8009238 <tcp_abort>
      pcb = next;
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	60fb      	str	r3, [r7, #12]
 800a2d0:	e002      	b.n	800a2d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d1ea      	bne.n	800a2b4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a2de:	bf00      	nop
 800a2e0:	bf00      	nop
 800a2e2:	3710      	adds	r7, #16
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	08012844 	.word	0x08012844
 800a2ec:	08012f98 	.word	0x08012f98
 800a2f0:	08012888 	.word	0x08012888

0800a2f4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d02a      	beq.n	800a35a <tcp_netif_ip_addr_changed+0x66>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d026      	beq.n	800a35a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a30c:	4b15      	ldr	r3, [pc, #84]	; (800a364 <tcp_netif_ip_addr_changed+0x70>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4619      	mov	r1, r3
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f7ff ffbc 	bl	800a290 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a318:	4b13      	ldr	r3, [pc, #76]	; (800a368 <tcp_netif_ip_addr_changed+0x74>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4619      	mov	r1, r3
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f7ff ffb6 	bl	800a290 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d017      	beq.n	800a35a <tcp_netif_ip_addr_changed+0x66>
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d013      	beq.n	800a35a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a332:	4b0e      	ldr	r3, [pc, #56]	; (800a36c <tcp_netif_ip_addr_changed+0x78>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	60fb      	str	r3, [r7, #12]
 800a338:	e00c      	b.n	800a354 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	429a      	cmp	r2, r3
 800a344:	d103      	bne.n	800a34e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	60fb      	str	r3, [r7, #12]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d1ef      	bne.n	800a33a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a35a:	bf00      	nop
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	20007f58 	.word	0x20007f58
 800a368:	20007f50 	.word	0x20007f50
 800a36c:	20007f54 	.word	0x20007f54

0800a370 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d007      	beq.n	800a390 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a384:	4618      	mov	r0, r3
 800a386:	f7ff fc2d 	bl	8009be4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a390:	bf00      	nop
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <tcp_debug_print>:
 *
 * @param tcphdr pointer to a struct tcp_hdr
 */
void
tcp_debug_print(struct tcp_hdr *tcphdr)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
                          (u16_t)(TCPH_FLAGS(tcphdr) >> 3 & 1),
                          (u16_t)(TCPH_FLAGS(tcphdr) >> 2 & 1),
                          (u16_t)(TCPH_FLAGS(tcphdr) >> 1 & 1),
                          (u16_t)(TCPH_FLAGS(tcphdr)      & 1),
                          lwip_ntohs(tcphdr->wnd)));
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	899b      	ldrh	r3, [r3, #12]
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7fc fdc4 	bl	8006f34 <lwip_htons>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f000 f80f 	bl	800a3da <tcp_debug_print_flags>
  LWIP_DEBUGF(TCP_DEBUG, ("), win)\n"));
  LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
  LWIP_DEBUGF(TCP_DEBUG, ("|    0x%04"X16_F"     |     %5"U16_F"     | (chksum, urgp)\n",
                          lwip_ntohs(tcphdr->chksum), lwip_ntohs(tcphdr->urgp)));
  LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
}
 800a3bc:	bf00      	nop
 800a3be:	3708      	adds	r7, #8
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <tcp_debug_print_state>:
 *
 * @param s enum tcp_state to print
 */
void
tcp_debug_print_state(enum tcp_state s)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	71fb      	strb	r3, [r7, #7]
  LWIP_DEBUGF(TCP_DEBUG, ("State: %s\n", tcp_state_str[s]));
}
 800a3ce:	bf00      	nop
 800a3d0:	370c      	adds	r7, #12
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr

0800a3da <tcp_debug_print_flags>:
 *
 * @param flags tcp flags, all active flags are printed
 */
void
tcp_debug_print_flags(u8_t flags)
{
 800a3da:	b480      	push	{r7}
 800a3dc:	b083      	sub	sp, #12
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	71fb      	strb	r3, [r7, #7]
  }
  if (flags & TCP_CWR) {
    LWIP_DEBUGF(TCP_DEBUG, ("CWR "));
  }
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));
}
 800a3e4:	bf00      	nop
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <tcp_pcbs_sane>:
/**
 * Check state consistency of the tcp_pcb lists.
 */
s16_t
tcp_pcbs_sane(void)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a3f6:	4b22      	ldr	r3, [pc, #136]	; (800a480 <tcp_pcbs_sane+0x90>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	607b      	str	r3, [r7, #4]
 800a3fc:	e023      	b.n	800a446 <tcp_pcbs_sane+0x56>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	7d1b      	ldrb	r3, [r3, #20]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d106      	bne.n	800a414 <tcp_pcbs_sane+0x24>
 800a406:	4b1f      	ldr	r3, [pc, #124]	; (800a484 <tcp_pcbs_sane+0x94>)
 800a408:	f640 12d9 	movw	r2, #2521	; 0x9d9
 800a40c:	491e      	ldr	r1, [pc, #120]	; (800a488 <tcp_pcbs_sane+0x98>)
 800a40e:	481f      	ldr	r0, [pc, #124]	; (800a48c <tcp_pcbs_sane+0x9c>)
 800a410:	f006 fc56 	bl	8010cc0 <iprintf>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	7d1b      	ldrb	r3, [r3, #20]
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d106      	bne.n	800a42a <tcp_pcbs_sane+0x3a>
 800a41c:	4b19      	ldr	r3, [pc, #100]	; (800a484 <tcp_pcbs_sane+0x94>)
 800a41e:	f640 12da 	movw	r2, #2522	; 0x9da
 800a422:	491b      	ldr	r1, [pc, #108]	; (800a490 <tcp_pcbs_sane+0xa0>)
 800a424:	4819      	ldr	r0, [pc, #100]	; (800a48c <tcp_pcbs_sane+0x9c>)
 800a426:	f006 fc4b 	bl	8010cc0 <iprintf>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	7d1b      	ldrb	r3, [r3, #20]
 800a42e:	2b0a      	cmp	r3, #10
 800a430:	d106      	bne.n	800a440 <tcp_pcbs_sane+0x50>
 800a432:	4b14      	ldr	r3, [pc, #80]	; (800a484 <tcp_pcbs_sane+0x94>)
 800a434:	f640 12db 	movw	r2, #2523	; 0x9db
 800a438:	4916      	ldr	r1, [pc, #88]	; (800a494 <tcp_pcbs_sane+0xa4>)
 800a43a:	4814      	ldr	r0, [pc, #80]	; (800a48c <tcp_pcbs_sane+0x9c>)
 800a43c:	f006 fc40 	bl	8010cc0 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	607b      	str	r3, [r7, #4]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1d8      	bne.n	800a3fe <tcp_pcbs_sane+0xe>
  }
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a44c:	4b12      	ldr	r3, [pc, #72]	; (800a498 <tcp_pcbs_sane+0xa8>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	607b      	str	r3, [r7, #4]
 800a452:	e00d      	b.n	800a470 <tcp_pcbs_sane+0x80>
    LWIP_ASSERT("tcp_pcbs_sane: tw pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	7d1b      	ldrb	r3, [r3, #20]
 800a458:	2b0a      	cmp	r3, #10
 800a45a:	d006      	beq.n	800a46a <tcp_pcbs_sane+0x7a>
 800a45c:	4b09      	ldr	r3, [pc, #36]	; (800a484 <tcp_pcbs_sane+0x94>)
 800a45e:	f640 12de 	movw	r2, #2526	; 0x9de
 800a462:	490e      	ldr	r1, [pc, #56]	; (800a49c <tcp_pcbs_sane+0xac>)
 800a464:	4809      	ldr	r0, [pc, #36]	; (800a48c <tcp_pcbs_sane+0x9c>)
 800a466:	f006 fc2b 	bl	8010cc0 <iprintf>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	607b      	str	r3, [r7, #4]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d1ee      	bne.n	800a454 <tcp_pcbs_sane+0x64>
  }
  return 1;
 800a476:	2301      	movs	r3, #1
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3708      	adds	r7, #8
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	20007f58 	.word	0x20007f58
 800a484:	08012844 	.word	0x08012844
 800a488:	08012fcc 	.word	0x08012fcc
 800a48c:	08012888 	.word	0x08012888
 800a490:	08012ff8 	.word	0x08012ff8
 800a494:	08013024 	.word	0x08013024
 800a498:	20007f5c 	.word	0x20007f5c
 800a49c:	08013054 	.word	0x08013054

0800a4a0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a4a0:	b590      	push	{r4, r7, lr}
 800a4a2:	b08d      	sub	sp, #52	; 0x34
 800a4a4:	af04      	add	r7, sp, #16
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d105      	bne.n	800a4bc <tcp_input+0x1c>
 800a4b0:	4b86      	ldr	r3, [pc, #536]	; (800a6cc <tcp_input+0x22c>)
 800a4b2:	2283      	movs	r2, #131	; 0x83
 800a4b4:	4986      	ldr	r1, [pc, #536]	; (800a6d0 <tcp_input+0x230>)
 800a4b6:	4887      	ldr	r0, [pc, #540]	; (800a6d4 <tcp_input+0x234>)
 800a4b8:	f006 fc02 	bl	8010cc0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	4a85      	ldr	r2, [pc, #532]	; (800a6d8 <tcp_input+0x238>)
 800a4c2:	6013      	str	r3, [r2, #0]

#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
 800a4c4:	4b84      	ldr	r3, [pc, #528]	; (800a6d8 <tcp_input+0x238>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7ff ff65 	bl	800a398 <tcp_debug_print>
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	895b      	ldrh	r3, [r3, #10]
 800a4d2:	2b13      	cmp	r3, #19
 800a4d4:	f240 83f4 	bls.w	800acc0 <tcp_input+0x820>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a4d8:	4b80      	ldr	r3, [pc, #512]	; (800a6dc <tcp_input+0x23c>)
 800a4da:	695b      	ldr	r3, [r3, #20]
 800a4dc:	4a7f      	ldr	r2, [pc, #508]	; (800a6dc <tcp_input+0x23c>)
 800a4de:	6812      	ldr	r2, [r2, #0]
 800a4e0:	4611      	mov	r1, r2
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f005 fc4d 	bl	800fd82 <ip4_addr_isbroadcast_u32>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f040 83ea 	bne.w	800acc4 <tcp_input+0x824>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a4f0:	4b7a      	ldr	r3, [pc, #488]	; (800a6dc <tcp_input+0x23c>)
 800a4f2:	695b      	ldr	r3, [r3, #20]
 800a4f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a4f8:	2be0      	cmp	r3, #224	; 0xe0
 800a4fa:	f000 83e3 	beq.w	800acc4 <tcp_input+0x824>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a4fe:	4b76      	ldr	r3, [pc, #472]	; (800a6d8 <tcp_input+0x238>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	899b      	ldrh	r3, [r3, #12]
 800a504:	b29b      	uxth	r3, r3
 800a506:	4618      	mov	r0, r3
 800a508:	f7fc fd14 	bl	8006f34 <lwip_htons>
 800a50c:	4603      	mov	r3, r0
 800a50e:	0b1b      	lsrs	r3, r3, #12
 800a510:	b29b      	uxth	r3, r3
 800a512:	b2db      	uxtb	r3, r3
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a518:	7cbb      	ldrb	r3, [r7, #18]
 800a51a:	2b13      	cmp	r3, #19
 800a51c:	f240 83d4 	bls.w	800acc8 <tcp_input+0x828>
 800a520:	7cbb      	ldrb	r3, [r7, #18]
 800a522:	b29a      	uxth	r2, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	891b      	ldrh	r3, [r3, #8]
 800a528:	429a      	cmp	r2, r3
 800a52a:	f200 83cd 	bhi.w	800acc8 <tcp_input+0x828>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a52e:	7cbb      	ldrb	r3, [r7, #18]
 800a530:	b29b      	uxth	r3, r3
 800a532:	3b14      	subs	r3, #20
 800a534:	b29a      	uxth	r2, r3
 800a536:	4b6a      	ldr	r3, [pc, #424]	; (800a6e0 <tcp_input+0x240>)
 800a538:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a53a:	4b6a      	ldr	r3, [pc, #424]	; (800a6e4 <tcp_input+0x244>)
 800a53c:	2200      	movs	r2, #0
 800a53e:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	895a      	ldrh	r2, [r3, #10]
 800a544:	7cbb      	ldrb	r3, [r7, #18]
 800a546:	b29b      	uxth	r3, r3
 800a548:	429a      	cmp	r2, r3
 800a54a:	d309      	bcc.n	800a560 <tcp_input+0xc0>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a54c:	4b64      	ldr	r3, [pc, #400]	; (800a6e0 <tcp_input+0x240>)
 800a54e:	881a      	ldrh	r2, [r3, #0]
 800a550:	4b65      	ldr	r3, [pc, #404]	; (800a6e8 <tcp_input+0x248>)
 800a552:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a554:	7cbb      	ldrb	r3, [r7, #18]
 800a556:	4619      	mov	r1, r3
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f7fe f85b 	bl	8008614 <pbuf_remove_header>
 800a55e:	e04e      	b.n	800a5fe <tcp_input+0x15e>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d105      	bne.n	800a574 <tcp_input+0xd4>
 800a568:	4b58      	ldr	r3, [pc, #352]	; (800a6cc <tcp_input+0x22c>)
 800a56a:	22c2      	movs	r2, #194	; 0xc2
 800a56c:	495f      	ldr	r1, [pc, #380]	; (800a6ec <tcp_input+0x24c>)
 800a56e:	4859      	ldr	r0, [pc, #356]	; (800a6d4 <tcp_input+0x234>)
 800a570:	f006 fba6 	bl	8010cc0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a574:	2114      	movs	r1, #20
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f7fe f84c 	bl	8008614 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	895a      	ldrh	r2, [r3, #10]
 800a580:	4b59      	ldr	r3, [pc, #356]	; (800a6e8 <tcp_input+0x248>)
 800a582:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a584:	4b56      	ldr	r3, [pc, #344]	; (800a6e0 <tcp_input+0x240>)
 800a586:	881a      	ldrh	r2, [r3, #0]
 800a588:	4b57      	ldr	r3, [pc, #348]	; (800a6e8 <tcp_input+0x248>)
 800a58a:	881b      	ldrh	r3, [r3, #0]
 800a58c:	1ad3      	subs	r3, r2, r3
 800a58e:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a590:	4b55      	ldr	r3, [pc, #340]	; (800a6e8 <tcp_input+0x248>)
 800a592:	881b      	ldrh	r3, [r3, #0]
 800a594:	4619      	mov	r1, r3
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f7fe f83c 	bl	8008614 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	895b      	ldrh	r3, [r3, #10]
 800a5a2:	8a3a      	ldrh	r2, [r7, #16]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	f200 8391 	bhi.w	800accc <tcp_input+0x82c>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	4a4c      	ldr	r2, [pc, #304]	; (800a6e4 <tcp_input+0x244>)
 800a5b2:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	8a3a      	ldrh	r2, [r7, #16]
 800a5ba:	4611      	mov	r1, r2
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7fe f829 	bl	8008614 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	891a      	ldrh	r2, [r3, #8]
 800a5c6:	8a3b      	ldrh	r3, [r7, #16]
 800a5c8:	1ad3      	subs	r3, r2, r3
 800a5ca:	b29a      	uxth	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	895b      	ldrh	r3, [r3, #10]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d005      	beq.n	800a5e4 <tcp_input+0x144>
 800a5d8:	4b3c      	ldr	r3, [pc, #240]	; (800a6cc <tcp_input+0x22c>)
 800a5da:	22df      	movs	r2, #223	; 0xdf
 800a5dc:	4944      	ldr	r1, [pc, #272]	; (800a6f0 <tcp_input+0x250>)
 800a5de:	483d      	ldr	r0, [pc, #244]	; (800a6d4 <tcp_input+0x234>)
 800a5e0:	f006 fb6e 	bl	8010cc0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	891a      	ldrh	r2, [r3, #8]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	891b      	ldrh	r3, [r3, #8]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d005      	beq.n	800a5fe <tcp_input+0x15e>
 800a5f2:	4b36      	ldr	r3, [pc, #216]	; (800a6cc <tcp_input+0x22c>)
 800a5f4:	22e0      	movs	r2, #224	; 0xe0
 800a5f6:	493f      	ldr	r1, [pc, #252]	; (800a6f4 <tcp_input+0x254>)
 800a5f8:	4836      	ldr	r0, [pc, #216]	; (800a6d4 <tcp_input+0x234>)
 800a5fa:	f006 fb61 	bl	8010cc0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a5fe:	4b36      	ldr	r3, [pc, #216]	; (800a6d8 <tcp_input+0x238>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	881b      	ldrh	r3, [r3, #0]
 800a604:	b29b      	uxth	r3, r3
 800a606:	4a34      	ldr	r2, [pc, #208]	; (800a6d8 <tcp_input+0x238>)
 800a608:	6814      	ldr	r4, [r2, #0]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7fc fc92 	bl	8006f34 <lwip_htons>
 800a610:	4603      	mov	r3, r0
 800a612:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a614:	4b30      	ldr	r3, [pc, #192]	; (800a6d8 <tcp_input+0x238>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	885b      	ldrh	r3, [r3, #2]
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	4a2e      	ldr	r2, [pc, #184]	; (800a6d8 <tcp_input+0x238>)
 800a61e:	6814      	ldr	r4, [r2, #0]
 800a620:	4618      	mov	r0, r3
 800a622:	f7fc fc87 	bl	8006f34 <lwip_htons>
 800a626:	4603      	mov	r3, r0
 800a628:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a62a:	4b2b      	ldr	r3, [pc, #172]	; (800a6d8 <tcp_input+0x238>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	4a29      	ldr	r2, [pc, #164]	; (800a6d8 <tcp_input+0x238>)
 800a632:	6814      	ldr	r4, [r2, #0]
 800a634:	4618      	mov	r0, r3
 800a636:	f7fc fc92 	bl	8006f5e <lwip_htonl>
 800a63a:	4603      	mov	r3, r0
 800a63c:	6063      	str	r3, [r4, #4]
 800a63e:	6863      	ldr	r3, [r4, #4]
 800a640:	4a2d      	ldr	r2, [pc, #180]	; (800a6f8 <tcp_input+0x258>)
 800a642:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a644:	4b24      	ldr	r3, [pc, #144]	; (800a6d8 <tcp_input+0x238>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	4a23      	ldr	r2, [pc, #140]	; (800a6d8 <tcp_input+0x238>)
 800a64c:	6814      	ldr	r4, [r2, #0]
 800a64e:	4618      	mov	r0, r3
 800a650:	f7fc fc85 	bl	8006f5e <lwip_htonl>
 800a654:	4603      	mov	r3, r0
 800a656:	60a3      	str	r3, [r4, #8]
 800a658:	68a3      	ldr	r3, [r4, #8]
 800a65a:	4a28      	ldr	r2, [pc, #160]	; (800a6fc <tcp_input+0x25c>)
 800a65c:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a65e:	4b1e      	ldr	r3, [pc, #120]	; (800a6d8 <tcp_input+0x238>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	89db      	ldrh	r3, [r3, #14]
 800a664:	b29b      	uxth	r3, r3
 800a666:	4a1c      	ldr	r2, [pc, #112]	; (800a6d8 <tcp_input+0x238>)
 800a668:	6814      	ldr	r4, [r2, #0]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7fc fc62 	bl	8006f34 <lwip_htons>
 800a670:	4603      	mov	r3, r0
 800a672:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a674:	4b18      	ldr	r3, [pc, #96]	; (800a6d8 <tcp_input+0x238>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	899b      	ldrh	r3, [r3, #12]
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7fc fc59 	bl	8006f34 <lwip_htons>
 800a682:	4603      	mov	r3, r0
 800a684:	b2db      	uxtb	r3, r3
 800a686:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a68a:	b2da      	uxtb	r2, r3
 800a68c:	4b1c      	ldr	r3, [pc, #112]	; (800a700 <tcp_input+0x260>)
 800a68e:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	891a      	ldrh	r2, [r3, #8]
 800a694:	4b1b      	ldr	r3, [pc, #108]	; (800a704 <tcp_input+0x264>)
 800a696:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a698:	4b19      	ldr	r3, [pc, #100]	; (800a700 <tcp_input+0x260>)
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	f003 0303 	and.w	r3, r3, #3
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00c      	beq.n	800a6be <tcp_input+0x21e>
    tcplen++;
 800a6a4:	4b17      	ldr	r3, [pc, #92]	; (800a704 <tcp_input+0x264>)
 800a6a6:	881b      	ldrh	r3, [r3, #0]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	4b15      	ldr	r3, [pc, #84]	; (800a704 <tcp_input+0x264>)
 800a6ae:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	891a      	ldrh	r2, [r3, #8]
 800a6b4:	4b13      	ldr	r3, [pc, #76]	; (800a704 <tcp_input+0x264>)
 800a6b6:	881b      	ldrh	r3, [r3, #0]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	f200 8309 	bhi.w	800acd0 <tcp_input+0x830>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a6c2:	4b11      	ldr	r3, [pc, #68]	; (800a708 <tcp_input+0x268>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	61fb      	str	r3, [r7, #28]
 800a6c8:	e097      	b.n	800a7fa <tcp_input+0x35a>
 800a6ca:	bf00      	nop
 800a6cc:	08013080 	.word	0x08013080
 800a6d0:	080130b4 	.word	0x080130b4
 800a6d4:	080130cc 	.word	0x080130cc
 800a6d8:	20007f74 	.word	0x20007f74
 800a6dc:	20005030 	.word	0x20005030
 800a6e0:	20007f78 	.word	0x20007f78
 800a6e4:	20007f7c 	.word	0x20007f7c
 800a6e8:	20007f7a 	.word	0x20007f7a
 800a6ec:	080130f4 	.word	0x080130f4
 800a6f0:	08013104 	.word	0x08013104
 800a6f4:	08013110 	.word	0x08013110
 800a6f8:	20007f84 	.word	0x20007f84
 800a6fc:	20007f88 	.word	0x20007f88
 800a700:	20007f90 	.word	0x20007f90
 800a704:	20007f8e 	.word	0x20007f8e
 800a708:	20007f58 	.word	0x20007f58
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	7d1b      	ldrb	r3, [r3, #20]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d105      	bne.n	800a720 <tcp_input+0x280>
 800a714:	4b88      	ldr	r3, [pc, #544]	; (800a938 <tcp_input+0x498>)
 800a716:	22fb      	movs	r2, #251	; 0xfb
 800a718:	4988      	ldr	r1, [pc, #544]	; (800a93c <tcp_input+0x49c>)
 800a71a:	4889      	ldr	r0, [pc, #548]	; (800a940 <tcp_input+0x4a0>)
 800a71c:	f006 fad0 	bl	8010cc0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	7d1b      	ldrb	r3, [r3, #20]
 800a724:	2b0a      	cmp	r3, #10
 800a726:	d105      	bne.n	800a734 <tcp_input+0x294>
 800a728:	4b83      	ldr	r3, [pc, #524]	; (800a938 <tcp_input+0x498>)
 800a72a:	22fc      	movs	r2, #252	; 0xfc
 800a72c:	4985      	ldr	r1, [pc, #532]	; (800a944 <tcp_input+0x4a4>)
 800a72e:	4884      	ldr	r0, [pc, #528]	; (800a940 <tcp_input+0x4a0>)
 800a730:	f006 fac6 	bl	8010cc0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	7d1b      	ldrb	r3, [r3, #20]
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d105      	bne.n	800a748 <tcp_input+0x2a8>
 800a73c:	4b7e      	ldr	r3, [pc, #504]	; (800a938 <tcp_input+0x498>)
 800a73e:	22fd      	movs	r2, #253	; 0xfd
 800a740:	4981      	ldr	r1, [pc, #516]	; (800a948 <tcp_input+0x4a8>)
 800a742:	487f      	ldr	r0, [pc, #508]	; (800a940 <tcp_input+0x4a0>)
 800a744:	f006 fabc 	bl	8010cc0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	7a1b      	ldrb	r3, [r3, #8]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d00c      	beq.n	800a76a <tcp_input+0x2ca>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	7a1a      	ldrb	r2, [r3, #8]
 800a754:	4b7d      	ldr	r3, [pc, #500]	; (800a94c <tcp_input+0x4ac>)
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a75c:	3301      	adds	r3, #1
 800a75e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a760:	429a      	cmp	r2, r3
 800a762:	d002      	beq.n	800a76a <tcp_input+0x2ca>
      prev = pcb;
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	61bb      	str	r3, [r7, #24]
      continue;
 800a768:	e044      	b.n	800a7f4 <tcp_input+0x354>
    }

    if (pcb->remote_port == tcphdr->src &&
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	8b1a      	ldrh	r2, [r3, #24]
 800a76e:	4b78      	ldr	r3, [pc, #480]	; (800a950 <tcp_input+0x4b0>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	881b      	ldrh	r3, [r3, #0]
 800a774:	b29b      	uxth	r3, r3
 800a776:	429a      	cmp	r2, r3
 800a778:	d13a      	bne.n	800a7f0 <tcp_input+0x350>
        pcb->local_port == tcphdr->dest &&
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	8ada      	ldrh	r2, [r3, #22]
 800a77e:	4b74      	ldr	r3, [pc, #464]	; (800a950 <tcp_input+0x4b0>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	885b      	ldrh	r3, [r3, #2]
 800a784:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a786:	429a      	cmp	r2, r3
 800a788:	d132      	bne.n	800a7f0 <tcp_input+0x350>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	685a      	ldr	r2, [r3, #4]
 800a78e:	4b6f      	ldr	r3, [pc, #444]	; (800a94c <tcp_input+0x4ac>)
 800a790:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a792:	429a      	cmp	r2, r3
 800a794:	d12c      	bne.n	800a7f0 <tcp_input+0x350>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a796:	69fb      	ldr	r3, [r7, #28]
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	4b6c      	ldr	r3, [pc, #432]	; (800a94c <tcp_input+0x4ac>)
 800a79c:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d126      	bne.n	800a7f0 <tcp_input+0x350>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	69fa      	ldr	r2, [r7, #28]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d106      	bne.n	800a7ba <tcp_input+0x31a>
 800a7ac:	4b62      	ldr	r3, [pc, #392]	; (800a938 <tcp_input+0x498>)
 800a7ae:	f240 120d 	movw	r2, #269	; 0x10d
 800a7b2:	4968      	ldr	r1, [pc, #416]	; (800a954 <tcp_input+0x4b4>)
 800a7b4:	4862      	ldr	r0, [pc, #392]	; (800a940 <tcp_input+0x4a0>)
 800a7b6:	f006 fa83 	bl	8010cc0 <iprintf>
      if (prev != NULL) {
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d00a      	beq.n	800a7d6 <tcp_input+0x336>
        prev->next = pcb->next;
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	68da      	ldr	r2, [r3, #12]
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a7c8:	4b63      	ldr	r3, [pc, #396]	; (800a958 <tcp_input+0x4b8>)
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a7d0:	4a61      	ldr	r2, [pc, #388]	; (800a958 <tcp_input+0x4b8>)
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a7d6:	69fb      	ldr	r3, [r7, #28]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	69fa      	ldr	r2, [r7, #28]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d110      	bne.n	800a802 <tcp_input+0x362>
 800a7e0:	4b55      	ldr	r3, [pc, #340]	; (800a938 <tcp_input+0x498>)
 800a7e2:	f240 1215 	movw	r2, #277	; 0x115
 800a7e6:	495d      	ldr	r1, [pc, #372]	; (800a95c <tcp_input+0x4bc>)
 800a7e8:	4855      	ldr	r0, [pc, #340]	; (800a940 <tcp_input+0x4a0>)
 800a7ea:	f006 fa69 	bl	8010cc0 <iprintf>
      break;
 800a7ee:	e008      	b.n	800a802 <tcp_input+0x362>
    }
    prev = pcb;
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a7f4:	69fb      	ldr	r3, [r7, #28]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	61fb      	str	r3, [r7, #28]
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d185      	bne.n	800a70c <tcp_input+0x26c>
 800a800:	e000      	b.n	800a804 <tcp_input+0x364>
      break;
 800a802:	bf00      	nop
  }

  if (pcb == NULL) {
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	2b00      	cmp	r3, #0
 800a808:	f040 80b0 	bne.w	800a96c <tcp_input+0x4cc>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a80c:	4b54      	ldr	r3, [pc, #336]	; (800a960 <tcp_input+0x4c0>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	61fb      	str	r3, [r7, #28]
 800a812:	e03f      	b.n	800a894 <tcp_input+0x3f4>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	7d1b      	ldrb	r3, [r3, #20]
 800a818:	2b0a      	cmp	r3, #10
 800a81a:	d006      	beq.n	800a82a <tcp_input+0x38a>
 800a81c:	4b46      	ldr	r3, [pc, #280]	; (800a938 <tcp_input+0x498>)
 800a81e:	f240 121f 	movw	r2, #287	; 0x11f
 800a822:	4950      	ldr	r1, [pc, #320]	; (800a964 <tcp_input+0x4c4>)
 800a824:	4846      	ldr	r0, [pc, #280]	; (800a940 <tcp_input+0x4a0>)
 800a826:	f006 fa4b 	bl	8010cc0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a82a:	69fb      	ldr	r3, [r7, #28]
 800a82c:	7a1b      	ldrb	r3, [r3, #8]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d009      	beq.n	800a846 <tcp_input+0x3a6>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a832:	69fb      	ldr	r3, [r7, #28]
 800a834:	7a1a      	ldrb	r2, [r3, #8]
 800a836:	4b45      	ldr	r3, [pc, #276]	; (800a94c <tcp_input+0x4ac>)
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a83e:	3301      	adds	r3, #1
 800a840:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a842:	429a      	cmp	r2, r3
 800a844:	d122      	bne.n	800a88c <tcp_input+0x3ec>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	8b1a      	ldrh	r2, [r3, #24]
 800a84a:	4b41      	ldr	r3, [pc, #260]	; (800a950 <tcp_input+0x4b0>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	881b      	ldrh	r3, [r3, #0]
 800a850:	b29b      	uxth	r3, r3
 800a852:	429a      	cmp	r2, r3
 800a854:	d11b      	bne.n	800a88e <tcp_input+0x3ee>
          pcb->local_port == tcphdr->dest &&
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	8ada      	ldrh	r2, [r3, #22]
 800a85a:	4b3d      	ldr	r3, [pc, #244]	; (800a950 <tcp_input+0x4b0>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	885b      	ldrh	r3, [r3, #2]
 800a860:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a862:	429a      	cmp	r2, r3
 800a864:	d113      	bne.n	800a88e <tcp_input+0x3ee>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	685a      	ldr	r2, [r3, #4]
 800a86a:	4b38      	ldr	r3, [pc, #224]	; (800a94c <tcp_input+0x4ac>)
 800a86c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a86e:	429a      	cmp	r2, r3
 800a870:	d10d      	bne.n	800a88e <tcp_input+0x3ee>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	4b35      	ldr	r3, [pc, #212]	; (800a94c <tcp_input+0x4ac>)
 800a878:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d107      	bne.n	800a88e <tcp_input+0x3ee>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a87e:	69f8      	ldr	r0, [r7, #28]
 800a880:	f000 fb86 	bl	800af90 <tcp_timewait_input>
        }
        pbuf_free(p);
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f7fd ff4b 	bl	8008720 <pbuf_free>
        return;
 800a88a:	e227      	b.n	800acdc <tcp_input+0x83c>
        continue;
 800a88c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	61fb      	str	r3, [r7, #28]
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d1bc      	bne.n	800a814 <tcp_input+0x374>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a89a:	2300      	movs	r3, #0
 800a89c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a89e:	4b32      	ldr	r3, [pc, #200]	; (800a968 <tcp_input+0x4c8>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	617b      	str	r3, [r7, #20]
 800a8a4:	e02a      	b.n	800a8fc <tcp_input+0x45c>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	7a1b      	ldrb	r3, [r3, #8]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d00c      	beq.n	800a8c8 <tcp_input+0x428>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	7a1a      	ldrb	r2, [r3, #8]
 800a8b2:	4b26      	ldr	r3, [pc, #152]	; (800a94c <tcp_input+0x4ac>)
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d002      	beq.n	800a8c8 <tcp_input+0x428>
        prev = (struct tcp_pcb *)lpcb;
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	61bb      	str	r3, [r7, #24]
        continue;
 800a8c6:	e016      	b.n	800a8f6 <tcp_input+0x456>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	8ada      	ldrh	r2, [r3, #22]
 800a8cc:	4b20      	ldr	r3, [pc, #128]	; (800a950 <tcp_input+0x4b0>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	885b      	ldrh	r3, [r3, #2]
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d10c      	bne.n	800a8f2 <tcp_input+0x452>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	4b1b      	ldr	r3, [pc, #108]	; (800a94c <tcp_input+0x4ac>)
 800a8de:	695b      	ldr	r3, [r3, #20]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d00f      	beq.n	800a904 <tcp_input+0x464>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d00d      	beq.n	800a906 <tcp_input+0x466>
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d009      	beq.n	800a906 <tcp_input+0x466>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	617b      	str	r3, [r7, #20]
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1d1      	bne.n	800a8a6 <tcp_input+0x406>
 800a902:	e000      	b.n	800a906 <tcp_input+0x466>
            break;
 800a904:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d02f      	beq.n	800a96c <tcp_input+0x4cc>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d00a      	beq.n	800a928 <tcp_input+0x488>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	68da      	ldr	r2, [r3, #12]
 800a916:	69bb      	ldr	r3, [r7, #24]
 800a918:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a91a:	4b13      	ldr	r3, [pc, #76]	; (800a968 <tcp_input+0x4c8>)
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a922:	4a11      	ldr	r2, [pc, #68]	; (800a968 <tcp_input+0x4c8>)
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a928:	6978      	ldr	r0, [r7, #20]
 800a92a:	f000 fa33 	bl	800ad94 <tcp_listen_input>
      }
      pbuf_free(p);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f7fd fef6 	bl	8008720 <pbuf_free>
      return;
 800a934:	e1d2      	b.n	800acdc <tcp_input+0x83c>
 800a936:	bf00      	nop
 800a938:	08013080 	.word	0x08013080
 800a93c:	08013130 	.word	0x08013130
 800a940:	080130cc 	.word	0x080130cc
 800a944:	08013158 	.word	0x08013158
 800a948:	08013184 	.word	0x08013184
 800a94c:	20005030 	.word	0x20005030
 800a950:	20007f74 	.word	0x20007f74
 800a954:	080131ac 	.word	0x080131ac
 800a958:	20007f58 	.word	0x20007f58
 800a95c:	080131d8 	.word	0x080131d8
 800a960:	20007f5c 	.word	0x20007f5c
 800a964:	08013204 	.word	0x08013204
 800a968:	20007f54 	.word	0x20007f54
    }
  }

#if TCP_INPUT_DEBUG
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("+-+-+-+-+-+-+-+-+-+-+-+-+-+- tcp_input: flags "));
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
 800a96c:	4ba0      	ldr	r3, [pc, #640]	; (800abf0 <tcp_input+0x750>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	899b      	ldrh	r3, [r3, #12]
 800a972:	b29b      	uxth	r3, r3
 800a974:	4618      	mov	r0, r3
 800a976:	f7fc fadd 	bl	8006f34 <lwip_htons>
 800a97a:	4603      	mov	r3, r0
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a982:	b2db      	uxtb	r3, r3
 800a984:	4618      	mov	r0, r3
 800a986:	f7ff fd28 	bl	800a3da <tcp_debug_print_flags>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f000 8161 	beq.w	800ac54 <tcp_input+0x7b4>
    /* The incoming segment belongs to a connection. */
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	7d1b      	ldrb	r3, [r3, #20]
 800a996:	4618      	mov	r0, r3
 800a998:	f7ff fd14 	bl	800a3c4 <tcp_debug_print_state>
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a99c:	4b95      	ldr	r3, [pc, #596]	; (800abf4 <tcp_input+0x754>)
 800a99e:	2200      	movs	r2, #0
 800a9a0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	891a      	ldrh	r2, [r3, #8]
 800a9a6:	4b93      	ldr	r3, [pc, #588]	; (800abf4 <tcp_input+0x754>)
 800a9a8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a9aa:	4a92      	ldr	r2, [pc, #584]	; (800abf4 <tcp_input+0x754>)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a9b0:	4b8f      	ldr	r3, [pc, #572]	; (800abf0 <tcp_input+0x750>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a8f      	ldr	r2, [pc, #572]	; (800abf4 <tcp_input+0x754>)
 800a9b6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a9b8:	4b8f      	ldr	r3, [pc, #572]	; (800abf8 <tcp_input+0x758>)
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a9be:	4b8f      	ldr	r3, [pc, #572]	; (800abfc <tcp_input+0x75c>)
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a9c4:	4b8e      	ldr	r3, [pc, #568]	; (800ac00 <tcp_input+0x760>)
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a9ca:	4b8e      	ldr	r3, [pc, #568]	; (800ac04 <tcp_input+0x764>)
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	f003 0308 	and.w	r3, r3, #8
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d006      	beq.n	800a9e4 <tcp_input+0x544>
      p->flags |= PBUF_FLAG_PUSH;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	7b5b      	ldrb	r3, [r3, #13]
 800a9da:	f043 0301 	orr.w	r3, r3, #1
 800a9de:	b2da      	uxtb	r2, r3
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d017      	beq.n	800aa1c <tcp_input+0x57c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a9ec:	69f8      	ldr	r0, [r7, #28]
 800a9ee:	f7ff f87d 	bl	8009aec <tcp_process_refused_data>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	f113 0f0d 	cmn.w	r3, #13
 800a9f8:	d007      	beq.n	800aa0a <tcp_input+0x56a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00c      	beq.n	800aa1c <tcp_input+0x57c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800aa02:	4b81      	ldr	r3, [pc, #516]	; (800ac08 <tcp_input+0x768>)
 800aa04:	881b      	ldrh	r3, [r3, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d008      	beq.n	800aa1c <tcp_input+0x57c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800aa0a:	69fb      	ldr	r3, [r7, #28]
 800aa0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	f040 80e8 	bne.w	800abe4 <tcp_input+0x744>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800aa14:	69f8      	ldr	r0, [r7, #28]
 800aa16:	f003 f9c9 	bl	800ddac <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800aa1a:	e0e3      	b.n	800abe4 <tcp_input+0x744>
      }
    }
    tcp_input_pcb = pcb;
 800aa1c:	4a7b      	ldr	r2, [pc, #492]	; (800ac0c <tcp_input+0x76c>)
 800aa1e:	69fb      	ldr	r3, [r7, #28]
 800aa20:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800aa22:	69f8      	ldr	r0, [r7, #28]
 800aa24:	f000 fb2e 	bl	800b084 <tcp_process>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800aa2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa30:	f113 0f0d 	cmn.w	r3, #13
 800aa34:	f000 80d8 	beq.w	800abe8 <tcp_input+0x748>
      if (recv_flags & TF_RESET) {
 800aa38:	4b70      	ldr	r3, [pc, #448]	; (800abfc <tcp_input+0x75c>)
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	f003 0308 	and.w	r3, r3, #8
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d015      	beq.n	800aa70 <tcp_input+0x5d0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d008      	beq.n	800aa60 <tcp_input+0x5c0>
 800aa4e:	69fb      	ldr	r3, [r7, #28]
 800aa50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa54:	69fa      	ldr	r2, [r7, #28]
 800aa56:	6912      	ldr	r2, [r2, #16]
 800aa58:	f06f 010d 	mvn.w	r1, #13
 800aa5c:	4610      	mov	r0, r2
 800aa5e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800aa60:	69f9      	ldr	r1, [r7, #28]
 800aa62:	486b      	ldr	r0, [pc, #428]	; (800ac10 <tcp_input+0x770>)
 800aa64:	f7ff fb12 	bl	800a08c <tcp_pcb_remove>
        tcp_free(pcb);
 800aa68:	69f8      	ldr	r0, [r7, #28]
 800aa6a:	f7fe f8f9 	bl	8008c60 <tcp_free>
 800aa6e:	e0de      	b.n	800ac2e <tcp_input+0x78e>
      } else {
        err = ERR_OK;
 800aa70:	2300      	movs	r3, #0
 800aa72:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800aa74:	4b62      	ldr	r3, [pc, #392]	; (800ac00 <tcp_input+0x760>)
 800aa76:	881b      	ldrh	r3, [r3, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d01d      	beq.n	800aab8 <tcp_input+0x618>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800aa7c:	4b60      	ldr	r3, [pc, #384]	; (800ac00 <tcp_input+0x760>)
 800aa7e:	881b      	ldrh	r3, [r3, #0]
 800aa80:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800aa82:	69fb      	ldr	r3, [r7, #28]
 800aa84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d00a      	beq.n	800aaa2 <tcp_input+0x602>
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa92:	69fa      	ldr	r2, [r7, #28]
 800aa94:	6910      	ldr	r0, [r2, #16]
 800aa96:	89fa      	ldrh	r2, [r7, #14]
 800aa98:	69f9      	ldr	r1, [r7, #28]
 800aa9a:	4798      	blx	r3
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	74fb      	strb	r3, [r7, #19]
 800aaa0:	e001      	b.n	800aaa6 <tcp_input+0x606>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800aaa6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aaaa:	f113 0f0d 	cmn.w	r3, #13
 800aaae:	f000 809d 	beq.w	800abec <tcp_input+0x74c>
              goto aborted;
            }
          }
          recv_acked = 0;
 800aab2:	4b53      	ldr	r3, [pc, #332]	; (800ac00 <tcp_input+0x760>)
 800aab4:	2200      	movs	r2, #0
 800aab6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800aab8:	69f8      	ldr	r0, [r7, #28]
 800aaba:	f000 f92b 	bl	800ad14 <tcp_input_delayed_close>
 800aabe:	4603      	mov	r3, r0
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	f040 80ad 	bne.w	800ac20 <tcp_input+0x780>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800aac6:	4b4c      	ldr	r3, [pc, #304]	; (800abf8 <tcp_input+0x758>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d041      	beq.n	800ab52 <tcp_input+0x6b2>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800aace:	69fb      	ldr	r3, [r7, #28]
 800aad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d006      	beq.n	800aae4 <tcp_input+0x644>
 800aad6:	4b4f      	ldr	r3, [pc, #316]	; (800ac14 <tcp_input+0x774>)
 800aad8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800aadc:	494e      	ldr	r1, [pc, #312]	; (800ac18 <tcp_input+0x778>)
 800aade:	484f      	ldr	r0, [pc, #316]	; (800ac1c <tcp_input+0x77c>)
 800aae0:	f006 f8ee 	bl	8010cc0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	8b5b      	ldrh	r3, [r3, #26]
 800aae8:	f003 0310 	and.w	r3, r3, #16
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d008      	beq.n	800ab02 <tcp_input+0x662>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800aaf0:	4b41      	ldr	r3, [pc, #260]	; (800abf8 <tcp_input+0x758>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7fd fe13 	bl	8008720 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800aafa:	69f8      	ldr	r0, [r7, #28]
 800aafc:	f7fe fb9c 	bl	8009238 <tcp_abort>
            goto aborted;
 800ab00:	e095      	b.n	800ac2e <tcp_input+0x78e>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d00c      	beq.n	800ab26 <tcp_input+0x686>
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	6918      	ldr	r0, [r3, #16]
 800ab16:	4b38      	ldr	r3, [pc, #224]	; (800abf8 <tcp_input+0x758>)
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	69f9      	ldr	r1, [r7, #28]
 800ab1e:	47a0      	blx	r4
 800ab20:	4603      	mov	r3, r0
 800ab22:	74fb      	strb	r3, [r7, #19]
 800ab24:	e008      	b.n	800ab38 <tcp_input+0x698>
 800ab26:	4b34      	ldr	r3, [pc, #208]	; (800abf8 <tcp_input+0x758>)
 800ab28:	681a      	ldr	r2, [r3, #0]
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	69f9      	ldr	r1, [r7, #28]
 800ab2e:	2000      	movs	r0, #0
 800ab30:	f7ff f8b4 	bl	8009c9c <tcp_recv_null>
 800ab34:	4603      	mov	r3, r0
 800ab36:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ab38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab3c:	f113 0f0d 	cmn.w	r3, #13
 800ab40:	d070      	beq.n	800ac24 <tcp_input+0x784>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ab42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d003      	beq.n	800ab52 <tcp_input+0x6b2>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ab4a:	4b2b      	ldr	r3, [pc, #172]	; (800abf8 <tcp_input+0x758>)
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	69fb      	ldr	r3, [r7, #28]
 800ab50:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ab52:	4b2a      	ldr	r3, [pc, #168]	; (800abfc <tcp_input+0x75c>)
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	f003 0320 	and.w	r3, r3, #32
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d030      	beq.n	800abc0 <tcp_input+0x720>
          if (pcb->refused_data != NULL) {
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d009      	beq.n	800ab7a <tcp_input+0x6da>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab6a:	7b5a      	ldrb	r2, [r3, #13]
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab70:	f042 0220 	orr.w	r2, r2, #32
 800ab74:	b2d2      	uxtb	r2, r2
 800ab76:	735a      	strb	r2, [r3, #13]
 800ab78:	e022      	b.n	800abc0 <tcp_input+0x720>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab7e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ab82:	d005      	beq.n	800ab90 <tcp_input+0x6f0>
              pcb->rcv_wnd++;
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab88:	3301      	adds	r3, #1
 800ab8a:	b29a      	uxth	r2, r3
 800ab8c:	69fb      	ldr	r3, [r7, #28]
 800ab8e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ab90:	69fb      	ldr	r3, [r7, #28]
 800ab92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00b      	beq.n	800abb2 <tcp_input+0x712>
 800ab9a:	69fb      	ldr	r3, [r7, #28]
 800ab9c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	6918      	ldr	r0, [r3, #16]
 800aba4:	2300      	movs	r3, #0
 800aba6:	2200      	movs	r2, #0
 800aba8:	69f9      	ldr	r1, [r7, #28]
 800abaa:	47a0      	blx	r4
 800abac:	4603      	mov	r3, r0
 800abae:	74fb      	strb	r3, [r7, #19]
 800abb0:	e001      	b.n	800abb6 <tcp_input+0x716>
 800abb2:	2300      	movs	r3, #0
 800abb4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800abb6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abba:	f113 0f0d 	cmn.w	r3, #13
 800abbe:	d033      	beq.n	800ac28 <tcp_input+0x788>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800abc0:	4b12      	ldr	r3, [pc, #72]	; (800ac0c <tcp_input+0x76c>)
 800abc2:	2200      	movs	r2, #0
 800abc4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800abc6:	69f8      	ldr	r0, [r7, #28]
 800abc8:	f000 f8a4 	bl	800ad14 <tcp_input_delayed_close>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d12c      	bne.n	800ac2c <tcp_input+0x78c>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800abd2:	69f8      	ldr	r0, [r7, #28]
 800abd4:	f002 fade 	bl	800d194 <tcp_output>
#if TCP_INPUT_DEBUG
#if TCP_DEBUG
        tcp_debug_print_state(pcb->state);
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	7d1b      	ldrb	r3, [r3, #20]
 800abdc:	4618      	mov	r0, r3
 800abde:	f7ff fbf1 	bl	800a3c4 <tcp_debug_print_state>
 800abe2:	e024      	b.n	800ac2e <tcp_input+0x78e>
        goto aborted;
 800abe4:	bf00      	nop
 800abe6:	e022      	b.n	800ac2e <tcp_input+0x78e>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800abe8:	bf00      	nop
 800abea:	e020      	b.n	800ac2e <tcp_input+0x78e>
              goto aborted;
 800abec:	bf00      	nop
 800abee:	e01e      	b.n	800ac2e <tcp_input+0x78e>
 800abf0:	20007f74 	.word	0x20007f74
 800abf4:	20007f64 	.word	0x20007f64
 800abf8:	20007f94 	.word	0x20007f94
 800abfc:	20007f91 	.word	0x20007f91
 800ac00:	20007f8c 	.word	0x20007f8c
 800ac04:	20007f90 	.word	0x20007f90
 800ac08:	20007f8e 	.word	0x20007f8e
 800ac0c:	20007f98 	.word	0x20007f98
 800ac10:	20007f58 	.word	0x20007f58
 800ac14:	08013080 	.word	0x08013080
 800ac18:	08013234 	.word	0x08013234
 800ac1c:	080130cc 	.word	0x080130cc
          goto aborted;
 800ac20:	bf00      	nop
 800ac22:	e004      	b.n	800ac2e <tcp_input+0x78e>
            goto aborted;
 800ac24:	bf00      	nop
 800ac26:	e002      	b.n	800ac2e <tcp_input+0x78e>
              goto aborted;
 800ac28:	bf00      	nop
 800ac2a:	e000      	b.n	800ac2e <tcp_input+0x78e>
          goto aborted;
 800ac2c:	bf00      	nop
    tcp_input_pcb = NULL;
 800ac2e:	4b2d      	ldr	r3, [pc, #180]	; (800ace4 <tcp_input+0x844>)
 800ac30:	2200      	movs	r2, #0
 800ac32:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ac34:	4b2c      	ldr	r3, [pc, #176]	; (800ace8 <tcp_input+0x848>)
 800ac36:	2200      	movs	r2, #0
 800ac38:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ac3a:	4b2c      	ldr	r3, [pc, #176]	; (800acec <tcp_input+0x84c>)
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d031      	beq.n	800aca6 <tcp_input+0x806>
      pbuf_free(inseg.p);
 800ac42:	4b2a      	ldr	r3, [pc, #168]	; (800acec <tcp_input+0x84c>)
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7fd fd6a 	bl	8008720 <pbuf_free>
      inseg.p = NULL;
 800ac4c:	4b27      	ldr	r3, [pc, #156]	; (800acec <tcp_input+0x84c>)
 800ac4e:	2200      	movs	r2, #0
 800ac50:	605a      	str	r2, [r3, #4]
 800ac52:	e028      	b.n	800aca6 <tcp_input+0x806>
    }
  } else {
    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ac54:	4b26      	ldr	r3, [pc, #152]	; (800acf0 <tcp_input+0x850>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	899b      	ldrh	r3, [r3, #12]
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7fc f969 	bl	8006f34 <lwip_htons>
 800ac62:	4603      	mov	r3, r0
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	f003 0304 	and.w	r3, r3, #4
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d118      	bne.n	800aca0 <tcp_input+0x800>
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac6e:	4b21      	ldr	r3, [pc, #132]	; (800acf4 <tcp_input+0x854>)
 800ac70:	6819      	ldr	r1, [r3, #0]
 800ac72:	4b21      	ldr	r3, [pc, #132]	; (800acf8 <tcp_input+0x858>)
 800ac74:	881b      	ldrh	r3, [r3, #0]
 800ac76:	461a      	mov	r2, r3
 800ac78:	4b20      	ldr	r3, [pc, #128]	; (800acfc <tcp_input+0x85c>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac7e:	4b1c      	ldr	r3, [pc, #112]	; (800acf0 <tcp_input+0x850>)
 800ac80:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac82:	885b      	ldrh	r3, [r3, #2]
 800ac84:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac86:	4a1a      	ldr	r2, [pc, #104]	; (800acf0 <tcp_input+0x850>)
 800ac88:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac8a:	8812      	ldrh	r2, [r2, #0]
 800ac8c:	b292      	uxth	r2, r2
 800ac8e:	9202      	str	r2, [sp, #8]
 800ac90:	9301      	str	r3, [sp, #4]
 800ac92:	4b1b      	ldr	r3, [pc, #108]	; (800ad00 <tcp_input+0x860>)
 800ac94:	9300      	str	r3, [sp, #0]
 800ac96:	4b1b      	ldr	r3, [pc, #108]	; (800ad04 <tcp_input+0x864>)
 800ac98:	4602      	mov	r2, r0
 800ac9a:	2000      	movs	r0, #0
 800ac9c:	f003 f834 	bl	800dd08 <tcp_rst>
    }
    pbuf_free(p);
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f7fd fd3d 	bl	8008720 <pbuf_free>
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
 800aca6:	f7ff fba3 	bl	800a3f0 <tcp_pcbs_sane>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d114      	bne.n	800acda <tcp_input+0x83a>
 800acb0:	4b15      	ldr	r3, [pc, #84]	; (800ad08 <tcp_input+0x868>)
 800acb2:	f240 2249 	movw	r2, #585	; 0x249
 800acb6:	4915      	ldr	r1, [pc, #84]	; (800ad0c <tcp_input+0x86c>)
 800acb8:	4815      	ldr	r0, [pc, #84]	; (800ad10 <tcp_input+0x870>)
 800acba:	f006 f801 	bl	8010cc0 <iprintf>
  PERF_STOP("tcp_input");
  return;
 800acbe:	e00c      	b.n	800acda <tcp_input+0x83a>
    goto dropped;
 800acc0:	bf00      	nop
 800acc2:	e006      	b.n	800acd2 <tcp_input+0x832>
    goto dropped;
 800acc4:	bf00      	nop
 800acc6:	e004      	b.n	800acd2 <tcp_input+0x832>
    goto dropped;
 800acc8:	bf00      	nop
 800acca:	e002      	b.n	800acd2 <tcp_input+0x832>
      goto dropped;
 800accc:	bf00      	nop
 800acce:	e000      	b.n	800acd2 <tcp_input+0x832>
      goto dropped;
 800acd0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f7fd fd24 	bl	8008720 <pbuf_free>
 800acd8:	e000      	b.n	800acdc <tcp_input+0x83c>
  return;
 800acda:	bf00      	nop
}
 800acdc:	3724      	adds	r7, #36	; 0x24
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd90      	pop	{r4, r7, pc}
 800ace2:	bf00      	nop
 800ace4:	20007f98 	.word	0x20007f98
 800ace8:	20007f94 	.word	0x20007f94
 800acec:	20007f64 	.word	0x20007f64
 800acf0:	20007f74 	.word	0x20007f74
 800acf4:	20007f88 	.word	0x20007f88
 800acf8:	20007f8e 	.word	0x20007f8e
 800acfc:	20007f84 	.word	0x20007f84
 800ad00:	20005040 	.word	0x20005040
 800ad04:	20005044 	.word	0x20005044
 800ad08:	08013080 	.word	0x08013080
 800ad0c:	08013250 	.word	0x08013250
 800ad10:	080130cc 	.word	0x080130cc

0800ad14 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d106      	bne.n	800ad30 <tcp_input_delayed_close+0x1c>
 800ad22:	4b17      	ldr	r3, [pc, #92]	; (800ad80 <tcp_input_delayed_close+0x6c>)
 800ad24:	f240 225a 	movw	r2, #602	; 0x25a
 800ad28:	4916      	ldr	r1, [pc, #88]	; (800ad84 <tcp_input_delayed_close+0x70>)
 800ad2a:	4817      	ldr	r0, [pc, #92]	; (800ad88 <tcp_input_delayed_close+0x74>)
 800ad2c:	f005 ffc8 	bl	8010cc0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ad30:	4b16      	ldr	r3, [pc, #88]	; (800ad8c <tcp_input_delayed_close+0x78>)
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	f003 0310 	and.w	r3, r3, #16
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d01c      	beq.n	800ad76 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	8b5b      	ldrh	r3, [r3, #26]
 800ad40:	f003 0310 	and.w	r3, r3, #16
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d10d      	bne.n	800ad64 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d008      	beq.n	800ad64 <tcp_input_delayed_close+0x50>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	6912      	ldr	r2, [r2, #16]
 800ad5c:	f06f 010e 	mvn.w	r1, #14
 800ad60:	4610      	mov	r0, r2
 800ad62:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ad64:	6879      	ldr	r1, [r7, #4]
 800ad66:	480a      	ldr	r0, [pc, #40]	; (800ad90 <tcp_input_delayed_close+0x7c>)
 800ad68:	f7ff f990 	bl	800a08c <tcp_pcb_remove>
    tcp_free(pcb);
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f7fd ff77 	bl	8008c60 <tcp_free>
    return 1;
 800ad72:	2301      	movs	r3, #1
 800ad74:	e000      	b.n	800ad78 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ad76:	2300      	movs	r3, #0
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3708      	adds	r7, #8
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	08013080 	.word	0x08013080
 800ad84:	0801326c 	.word	0x0801326c
 800ad88:	080130cc 	.word	0x080130cc
 800ad8c:	20007f91 	.word	0x20007f91
 800ad90:	20007f58 	.word	0x20007f58

0800ad94 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ad94:	b590      	push	{r4, r7, lr}
 800ad96:	b08b      	sub	sp, #44	; 0x2c
 800ad98:	af04      	add	r7, sp, #16
 800ad9a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ad9c:	4b6f      	ldr	r3, [pc, #444]	; (800af5c <tcp_listen_input+0x1c8>)
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	f003 0304 	and.w	r3, r3, #4
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f040 80d2 	bne.w	800af4e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d106      	bne.n	800adbe <tcp_listen_input+0x2a>
 800adb0:	4b6b      	ldr	r3, [pc, #428]	; (800af60 <tcp_listen_input+0x1cc>)
 800adb2:	f240 2281 	movw	r2, #641	; 0x281
 800adb6:	496b      	ldr	r1, [pc, #428]	; (800af64 <tcp_listen_input+0x1d0>)
 800adb8:	486b      	ldr	r0, [pc, #428]	; (800af68 <tcp_listen_input+0x1d4>)
 800adba:	f005 ff81 	bl	8010cc0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800adbe:	4b67      	ldr	r3, [pc, #412]	; (800af5c <tcp_listen_input+0x1c8>)
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	f003 0310 	and.w	r3, r3, #16
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d019      	beq.n	800adfe <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adca:	4b68      	ldr	r3, [pc, #416]	; (800af6c <tcp_listen_input+0x1d8>)
 800adcc:	6819      	ldr	r1, [r3, #0]
 800adce:	4b68      	ldr	r3, [pc, #416]	; (800af70 <tcp_listen_input+0x1dc>)
 800add0:	881b      	ldrh	r3, [r3, #0]
 800add2:	461a      	mov	r2, r3
 800add4:	4b67      	ldr	r3, [pc, #412]	; (800af74 <tcp_listen_input+0x1e0>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800adda:	4b67      	ldr	r3, [pc, #412]	; (800af78 <tcp_listen_input+0x1e4>)
 800addc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adde:	885b      	ldrh	r3, [r3, #2]
 800ade0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ade2:	4a65      	ldr	r2, [pc, #404]	; (800af78 <tcp_listen_input+0x1e4>)
 800ade4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ade6:	8812      	ldrh	r2, [r2, #0]
 800ade8:	b292      	uxth	r2, r2
 800adea:	9202      	str	r2, [sp, #8]
 800adec:	9301      	str	r3, [sp, #4]
 800adee:	4b63      	ldr	r3, [pc, #396]	; (800af7c <tcp_listen_input+0x1e8>)
 800adf0:	9300      	str	r3, [sp, #0]
 800adf2:	4b63      	ldr	r3, [pc, #396]	; (800af80 <tcp_listen_input+0x1ec>)
 800adf4:	4602      	mov	r2, r0
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f002 ff86 	bl	800dd08 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800adfc:	e0a9      	b.n	800af52 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800adfe:	4b57      	ldr	r3, [pc, #348]	; (800af5c <tcp_listen_input+0x1c8>)
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	f003 0302 	and.w	r3, r3, #2
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f000 80a3 	beq.w	800af52 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	7d5b      	ldrb	r3, [r3, #21]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7ff f867 	bl	8009ee4 <tcp_alloc>
 800ae16:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d111      	bne.n	800ae42 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	699b      	ldr	r3, [r3, #24]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00a      	beq.n	800ae3c <tcp_listen_input+0xa8>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	699b      	ldr	r3, [r3, #24]
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	6910      	ldr	r0, [r2, #16]
 800ae2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae32:	2100      	movs	r1, #0
 800ae34:	4798      	blx	r3
 800ae36:	4603      	mov	r3, r0
 800ae38:	73bb      	strb	r3, [r7, #14]
      return;
 800ae3a:	e08b      	b.n	800af54 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ae3c:	23f0      	movs	r3, #240	; 0xf0
 800ae3e:	73bb      	strb	r3, [r7, #14]
      return;
 800ae40:	e088      	b.n	800af54 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ae42:	4b50      	ldr	r3, [pc, #320]	; (800af84 <tcp_listen_input+0x1f0>)
 800ae44:	695a      	ldr	r2, [r3, #20]
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ae4a:	4b4e      	ldr	r3, [pc, #312]	; (800af84 <tcp_listen_input+0x1f0>)
 800ae4c:	691a      	ldr	r2, [r3, #16]
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	8ada      	ldrh	r2, [r3, #22]
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ae5a:	4b47      	ldr	r3, [pc, #284]	; (800af78 <tcp_listen_input+0x1e4>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	881b      	ldrh	r3, [r3, #0]
 800ae60:	b29a      	uxth	r2, r3
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	2203      	movs	r2, #3
 800ae6a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ae6c:	4b41      	ldr	r3, [pc, #260]	; (800af74 <tcp_listen_input+0x1e0>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	1c5a      	adds	r2, r3, #1
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ae7e:	6978      	ldr	r0, [r7, #20]
 800ae80:	f7ff f9a6 	bl	800a1d0 <tcp_next_iss>
 800ae84:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	693a      	ldr	r2, [r7, #16]
 800ae8a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	693a      	ldr	r2, [r7, #16]
 800ae90:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	693a      	ldr	r2, [r7, #16]
 800ae96:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	693a      	ldr	r2, [r7, #16]
 800ae9c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ae9e:	4b35      	ldr	r3, [pc, #212]	; (800af74 <tcp_listen_input+0x1e0>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	1e5a      	subs	r2, r3, #1
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	691a      	ldr	r2, [r3, #16]
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	7a5b      	ldrb	r3, [r3, #9]
 800aeba:	f003 030c 	and.w	r3, r3, #12
 800aebe:	b2da      	uxtb	r2, r3
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	7a1a      	ldrb	r2, [r3, #8]
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800aecc:	4b2e      	ldr	r3, [pc, #184]	; (800af88 <tcp_listen_input+0x1f4>)
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	60da      	str	r2, [r3, #12]
 800aed4:	4a2c      	ldr	r2, [pc, #176]	; (800af88 <tcp_listen_input+0x1f4>)
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	6013      	str	r3, [r2, #0]
 800aeda:	f003 f8d7 	bl	800e08c <tcp_timer_needed>
 800aede:	4b2b      	ldr	r3, [pc, #172]	; (800af8c <tcp_listen_input+0x1f8>)
 800aee0:	2201      	movs	r2, #1
 800aee2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800aee4:	6978      	ldr	r0, [r7, #20]
 800aee6:	f001 fd8f 	bl	800ca08 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800aeea:	4b23      	ldr	r3, [pc, #140]	; (800af78 <tcp_listen_input+0x1e4>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	89db      	ldrh	r3, [r3, #14]
 800aef0:	b29a      	uxth	r2, r3
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	3304      	adds	r3, #4
 800af0c:	4618      	mov	r0, r3
 800af0e:	f004 fc8b 	bl	800f828 <ip4_route>
 800af12:	4601      	mov	r1, r0
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	3304      	adds	r3, #4
 800af18:	461a      	mov	r2, r3
 800af1a:	4620      	mov	r0, r4
 800af1c:	f7ff f97e 	bl	800a21c <tcp_eff_send_mss_netif>
 800af20:	4603      	mov	r3, r0
 800af22:	461a      	mov	r2, r3
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800af28:	2112      	movs	r1, #18
 800af2a:	6978      	ldr	r0, [r7, #20]
 800af2c:	f002 f844 	bl	800cfb8 <tcp_enqueue_flags>
 800af30:	4603      	mov	r3, r0
 800af32:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800af34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d004      	beq.n	800af46 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800af3c:	2100      	movs	r1, #0
 800af3e:	6978      	ldr	r0, [r7, #20]
 800af40:	f7fe f8bc 	bl	80090bc <tcp_abandon>
      return;
 800af44:	e006      	b.n	800af54 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800af46:	6978      	ldr	r0, [r7, #20]
 800af48:	f002 f924 	bl	800d194 <tcp_output>
  return;
 800af4c:	e001      	b.n	800af52 <tcp_listen_input+0x1be>
    return;
 800af4e:	bf00      	nop
 800af50:	e000      	b.n	800af54 <tcp_listen_input+0x1c0>
  return;
 800af52:	bf00      	nop
}
 800af54:	371c      	adds	r7, #28
 800af56:	46bd      	mov	sp, r7
 800af58:	bd90      	pop	{r4, r7, pc}
 800af5a:	bf00      	nop
 800af5c:	20007f90 	.word	0x20007f90
 800af60:	08013080 	.word	0x08013080
 800af64:	08013294 	.word	0x08013294
 800af68:	080130cc 	.word	0x080130cc
 800af6c:	20007f88 	.word	0x20007f88
 800af70:	20007f8e 	.word	0x20007f8e
 800af74:	20007f84 	.word	0x20007f84
 800af78:	20007f74 	.word	0x20007f74
 800af7c:	20005040 	.word	0x20005040
 800af80:	20005044 	.word	0x20005044
 800af84:	20005030 	.word	0x20005030
 800af88:	20007f58 	.word	0x20007f58
 800af8c:	20007f60 	.word	0x20007f60

0800af90 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b086      	sub	sp, #24
 800af94:	af04      	add	r7, sp, #16
 800af96:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800af98:	4b2f      	ldr	r3, [pc, #188]	; (800b058 <tcp_timewait_input+0xc8>)
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	f003 0304 	and.w	r3, r3, #4
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d153      	bne.n	800b04c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d106      	bne.n	800afb8 <tcp_timewait_input+0x28>
 800afaa:	4b2c      	ldr	r3, [pc, #176]	; (800b05c <tcp_timewait_input+0xcc>)
 800afac:	f240 22ee 	movw	r2, #750	; 0x2ee
 800afb0:	492b      	ldr	r1, [pc, #172]	; (800b060 <tcp_timewait_input+0xd0>)
 800afb2:	482c      	ldr	r0, [pc, #176]	; (800b064 <tcp_timewait_input+0xd4>)
 800afb4:	f005 fe84 	bl	8010cc0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800afb8:	4b27      	ldr	r3, [pc, #156]	; (800b058 <tcp_timewait_input+0xc8>)
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	f003 0302 	and.w	r3, r3, #2
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d02a      	beq.n	800b01a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800afc4:	4b28      	ldr	r3, [pc, #160]	; (800b068 <tcp_timewait_input+0xd8>)
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afcc:	1ad3      	subs	r3, r2, r3
 800afce:	2b00      	cmp	r3, #0
 800afd0:	db2d      	blt.n	800b02e <tcp_timewait_input+0x9e>
 800afd2:	4b25      	ldr	r3, [pc, #148]	; (800b068 <tcp_timewait_input+0xd8>)
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afda:	6879      	ldr	r1, [r7, #4]
 800afdc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800afde:	440b      	add	r3, r1
 800afe0:	1ad3      	subs	r3, r2, r3
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	dc23      	bgt.n	800b02e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800afe6:	4b21      	ldr	r3, [pc, #132]	; (800b06c <tcp_timewait_input+0xdc>)
 800afe8:	6819      	ldr	r1, [r3, #0]
 800afea:	4b21      	ldr	r3, [pc, #132]	; (800b070 <tcp_timewait_input+0xe0>)
 800afec:	881b      	ldrh	r3, [r3, #0]
 800afee:	461a      	mov	r2, r3
 800aff0:	4b1d      	ldr	r3, [pc, #116]	; (800b068 <tcp_timewait_input+0xd8>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aff6:	4b1f      	ldr	r3, [pc, #124]	; (800b074 <tcp_timewait_input+0xe4>)
 800aff8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800affa:	885b      	ldrh	r3, [r3, #2]
 800affc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800affe:	4a1d      	ldr	r2, [pc, #116]	; (800b074 <tcp_timewait_input+0xe4>)
 800b000:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b002:	8812      	ldrh	r2, [r2, #0]
 800b004:	b292      	uxth	r2, r2
 800b006:	9202      	str	r2, [sp, #8]
 800b008:	9301      	str	r3, [sp, #4]
 800b00a:	4b1b      	ldr	r3, [pc, #108]	; (800b078 <tcp_timewait_input+0xe8>)
 800b00c:	9300      	str	r3, [sp, #0]
 800b00e:	4b1b      	ldr	r3, [pc, #108]	; (800b07c <tcp_timewait_input+0xec>)
 800b010:	4602      	mov	r2, r0
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f002 fe78 	bl	800dd08 <tcp_rst>
      return;
 800b018:	e01b      	b.n	800b052 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800b01a:	4b0f      	ldr	r3, [pc, #60]	; (800b058 <tcp_timewait_input+0xc8>)
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	f003 0301 	and.w	r3, r3, #1
 800b022:	2b00      	cmp	r3, #0
 800b024:	d003      	beq.n	800b02e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b026:	4b16      	ldr	r3, [pc, #88]	; (800b080 <tcp_timewait_input+0xf0>)
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b02e:	4b10      	ldr	r3, [pc, #64]	; (800b070 <tcp_timewait_input+0xe0>)
 800b030:	881b      	ldrh	r3, [r3, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d00c      	beq.n	800b050 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	8b5b      	ldrh	r3, [r3, #26]
 800b03a:	f043 0302 	orr.w	r3, r3, #2
 800b03e:	b29a      	uxth	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f002 f8a5 	bl	800d194 <tcp_output>
  }
  return;
 800b04a:	e001      	b.n	800b050 <tcp_timewait_input+0xc0>
    return;
 800b04c:	bf00      	nop
 800b04e:	e000      	b.n	800b052 <tcp_timewait_input+0xc2>
  return;
 800b050:	bf00      	nop
}
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}
 800b058:	20007f90 	.word	0x20007f90
 800b05c:	08013080 	.word	0x08013080
 800b060:	080132b4 	.word	0x080132b4
 800b064:	080130cc 	.word	0x080130cc
 800b068:	20007f84 	.word	0x20007f84
 800b06c:	20007f88 	.word	0x20007f88
 800b070:	20007f8e 	.word	0x20007f8e
 800b074:	20007f74 	.word	0x20007f74
 800b078:	20005040 	.word	0x20005040
 800b07c:	20005044 	.word	0x20005044
 800b080:	20007f4c 	.word	0x20007f4c

0800b084 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b084:	b590      	push	{r4, r7, lr}
 800b086:	b08d      	sub	sp, #52	; 0x34
 800b088:	af04      	add	r7, sp, #16
 800b08a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b08c:	2300      	movs	r3, #0
 800b08e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b090:	2300      	movs	r3, #0
 800b092:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d106      	bne.n	800b0a8 <tcp_process+0x24>
 800b09a:	4b9d      	ldr	r3, [pc, #628]	; (800b310 <tcp_process+0x28c>)
 800b09c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b0a0:	499c      	ldr	r1, [pc, #624]	; (800b314 <tcp_process+0x290>)
 800b0a2:	489d      	ldr	r0, [pc, #628]	; (800b318 <tcp_process+0x294>)
 800b0a4:	f005 fe0c 	bl	8010cc0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b0a8:	4b9c      	ldr	r3, [pc, #624]	; (800b31c <tcp_process+0x298>)
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	f003 0304 	and.w	r3, r3, #4
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d04e      	beq.n	800b152 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	7d1b      	ldrb	r3, [r3, #20]
 800b0b8:	2b02      	cmp	r3, #2
 800b0ba:	d108      	bne.n	800b0ce <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0c0:	4b97      	ldr	r3, [pc, #604]	; (800b320 <tcp_process+0x29c>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d123      	bne.n	800b110 <tcp_process+0x8c>
        acceptable = 1;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	76fb      	strb	r3, [r7, #27]
 800b0cc:	e020      	b.n	800b110 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0d2:	4b94      	ldr	r3, [pc, #592]	; (800b324 <tcp_process+0x2a0>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d102      	bne.n	800b0e0 <tcp_process+0x5c>
        acceptable = 1;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	76fb      	strb	r3, [r7, #27]
 800b0de:	e017      	b.n	800b110 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b0e0:	4b90      	ldr	r3, [pc, #576]	; (800b324 <tcp_process+0x2a0>)
 800b0e2:	681a      	ldr	r2, [r3, #0]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e8:	1ad3      	subs	r3, r2, r3
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	db10      	blt.n	800b110 <tcp_process+0x8c>
 800b0ee:	4b8d      	ldr	r3, [pc, #564]	; (800b324 <tcp_process+0x2a0>)
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f6:	6879      	ldr	r1, [r7, #4]
 800b0f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b0fa:	440b      	add	r3, r1
 800b0fc:	1ad3      	subs	r3, r2, r3
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	dc06      	bgt.n	800b110 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	8b5b      	ldrh	r3, [r3, #26]
 800b106:	f043 0302 	orr.w	r3, r3, #2
 800b10a:	b29a      	uxth	r2, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b110:	7efb      	ldrb	r3, [r7, #27]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d01b      	beq.n	800b14e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	7d1b      	ldrb	r3, [r3, #20]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d106      	bne.n	800b12c <tcp_process+0xa8>
 800b11e:	4b7c      	ldr	r3, [pc, #496]	; (800b310 <tcp_process+0x28c>)
 800b120:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b124:	4980      	ldr	r1, [pc, #512]	; (800b328 <tcp_process+0x2a4>)
 800b126:	487c      	ldr	r0, [pc, #496]	; (800b318 <tcp_process+0x294>)
 800b128:	f005 fdca 	bl	8010cc0 <iprintf>
      recv_flags |= TF_RESET;
 800b12c:	4b7f      	ldr	r3, [pc, #508]	; (800b32c <tcp_process+0x2a8>)
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	f043 0308 	orr.w	r3, r3, #8
 800b134:	b2da      	uxtb	r2, r3
 800b136:	4b7d      	ldr	r3, [pc, #500]	; (800b32c <tcp_process+0x2a8>)
 800b138:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	8b5b      	ldrh	r3, [r3, #26]
 800b13e:	f023 0301 	bic.w	r3, r3, #1
 800b142:	b29a      	uxth	r2, r3
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b148:	f06f 030d 	mvn.w	r3, #13
 800b14c:	e37a      	b.n	800b844 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b14e:	2300      	movs	r3, #0
 800b150:	e378      	b.n	800b844 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b152:	4b72      	ldr	r3, [pc, #456]	; (800b31c <tcp_process+0x298>)
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	f003 0302 	and.w	r3, r3, #2
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d010      	beq.n	800b180 <tcp_process+0xfc>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	7d1b      	ldrb	r3, [r3, #20]
 800b162:	2b02      	cmp	r3, #2
 800b164:	d00c      	beq.n	800b180 <tcp_process+0xfc>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	7d1b      	ldrb	r3, [r3, #20]
 800b16a:	2b03      	cmp	r3, #3
 800b16c:	d008      	beq.n	800b180 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	8b5b      	ldrh	r3, [r3, #26]
 800b172:	f043 0302 	orr.w	r3, r3, #2
 800b176:	b29a      	uxth	r2, r3
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b17c:	2300      	movs	r3, #0
 800b17e:	e361      	b.n	800b844 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	8b5b      	ldrh	r3, [r3, #26]
 800b184:	f003 0310 	and.w	r3, r3, #16
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d103      	bne.n	800b194 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b18c:	4b68      	ldr	r3, [pc, #416]	; (800b330 <tcp_process+0x2ac>)
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f001 fc2f 	bl	800ca08 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	7d1b      	ldrb	r3, [r3, #20]
 800b1ae:	3b02      	subs	r3, #2
 800b1b0:	2b07      	cmp	r3, #7
 800b1b2:	f200 8337 	bhi.w	800b824 <tcp_process+0x7a0>
 800b1b6:	a201      	add	r2, pc, #4	; (adr r2, 800b1bc <tcp_process+0x138>)
 800b1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1bc:	0800b1dd 	.word	0x0800b1dd
 800b1c0:	0800b40d 	.word	0x0800b40d
 800b1c4:	0800b585 	.word	0x0800b585
 800b1c8:	0800b5af 	.word	0x0800b5af
 800b1cc:	0800b6d3 	.word	0x0800b6d3
 800b1d0:	0800b585 	.word	0x0800b585
 800b1d4:	0800b75f 	.word	0x0800b75f
 800b1d8:	0800b7ef 	.word	0x0800b7ef
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b1dc:	4b4f      	ldr	r3, [pc, #316]	; (800b31c <tcp_process+0x298>)
 800b1de:	781b      	ldrb	r3, [r3, #0]
 800b1e0:	f003 0310 	and.w	r3, r3, #16
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f000 80e4 	beq.w	800b3b2 <tcp_process+0x32e>
 800b1ea:	4b4c      	ldr	r3, [pc, #304]	; (800b31c <tcp_process+0x298>)
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	f003 0302 	and.w	r3, r3, #2
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	f000 80dd 	beq.w	800b3b2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1fc:	1c5a      	adds	r2, r3, #1
 800b1fe:	4b48      	ldr	r3, [pc, #288]	; (800b320 <tcp_process+0x29c>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	429a      	cmp	r2, r3
 800b204:	f040 80d5 	bne.w	800b3b2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b208:	4b46      	ldr	r3, [pc, #280]	; (800b324 <tcp_process+0x2a0>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	1c5a      	adds	r2, r3, #1
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800b21a:	4b41      	ldr	r3, [pc, #260]	; (800b320 <tcp_process+0x29c>)
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b222:	4b44      	ldr	r3, [pc, #272]	; (800b334 <tcp_process+0x2b0>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	89db      	ldrh	r3, [r3, #14]
 800b228:	b29a      	uxth	r2, r3
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b23c:	4b39      	ldr	r3, [pc, #228]	; (800b324 <tcp_process+0x2a0>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	1e5a      	subs	r2, r3, #1
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2204      	movs	r2, #4
 800b24a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	3304      	adds	r3, #4
 800b254:	4618      	mov	r0, r3
 800b256:	f004 fae7 	bl	800f828 <ip4_route>
 800b25a:	4601      	mov	r1, r0
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	3304      	adds	r3, #4
 800b260:	461a      	mov	r2, r3
 800b262:	4620      	mov	r0, r4
 800b264:	f7fe ffda 	bl	800a21c <tcp_eff_send_mss_netif>
 800b268:	4603      	mov	r3, r0
 800b26a:	461a      	mov	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b274:	009a      	lsls	r2, r3, #2
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b27a:	005b      	lsls	r3, r3, #1
 800b27c:	f241 111c 	movw	r1, #4380	; 0x111c
 800b280:	428b      	cmp	r3, r1
 800b282:	bf38      	it	cc
 800b284:	460b      	movcc	r3, r1
 800b286:	429a      	cmp	r2, r3
 800b288:	d204      	bcs.n	800b294 <tcp_process+0x210>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	b29b      	uxth	r3, r3
 800b292:	e00d      	b.n	800b2b0 <tcp_process+0x22c>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b298:	005b      	lsls	r3, r3, #1
 800b29a:	f241 121c 	movw	r2, #4380	; 0x111c
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d904      	bls.n	800b2ac <tcp_process+0x228>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2a6:	005b      	lsls	r3, r3, #1
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	e001      	b.n	800b2b0 <tcp_process+0x22c>
 800b2ac:	f241 131c 	movw	r3, #4380	; 0x111c
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d106      	bne.n	800b2ce <tcp_process+0x24a>
 800b2c0:	4b13      	ldr	r3, [pc, #76]	; (800b310 <tcp_process+0x28c>)
 800b2c2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b2c6:	491c      	ldr	r1, [pc, #112]	; (800b338 <tcp_process+0x2b4>)
 800b2c8:	4813      	ldr	r0, [pc, #76]	; (800b318 <tcp_process+0x294>)
 800b2ca:	f005 fcf9 	bl	8010cc0 <iprintf>
        --pcb->snd_queuelen;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	b29a      	uxth	r2, r3
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2e2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b2e4:	69fb      	ldr	r3, [r7, #28]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d12a      	bne.n	800b340 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2ee:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d106      	bne.n	800b304 <tcp_process+0x280>
 800b2f6:	4b06      	ldr	r3, [pc, #24]	; (800b310 <tcp_process+0x28c>)
 800b2f8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b2fc:	490f      	ldr	r1, [pc, #60]	; (800b33c <tcp_process+0x2b8>)
 800b2fe:	4806      	ldr	r0, [pc, #24]	; (800b318 <tcp_process+0x294>)
 800b300:	f005 fcde 	bl	8010cc0 <iprintf>
          pcb->unsent = rseg->next;
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	66da      	str	r2, [r3, #108]	; 0x6c
 800b30c:	e01c      	b.n	800b348 <tcp_process+0x2c4>
 800b30e:	bf00      	nop
 800b310:	08013080 	.word	0x08013080
 800b314:	080132d4 	.word	0x080132d4
 800b318:	080130cc 	.word	0x080130cc
 800b31c:	20007f90 	.word	0x20007f90
 800b320:	20007f88 	.word	0x20007f88
 800b324:	20007f84 	.word	0x20007f84
 800b328:	080132f0 	.word	0x080132f0
 800b32c:	20007f91 	.word	0x20007f91
 800b330:	20007f4c 	.word	0x20007f4c
 800b334:	20007f74 	.word	0x20007f74
 800b338:	08013310 	.word	0x08013310
 800b33c:	08013328 	.word	0x08013328
        } else {
          pcb->unacked = rseg->next;
 800b340:	69fb      	ldr	r3, [r7, #28]
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800b348:	69f8      	ldr	r0, [r7, #28]
 800b34a:	f7fe fc60 	bl	8009c0e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b352:	2b00      	cmp	r3, #0
 800b354:	d104      	bne.n	800b360 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b35c:	861a      	strh	r2, [r3, #48]	; 0x30
 800b35e:	e006      	b.n	800b36e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2200      	movs	r2, #0
 800b36a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b374:	2b00      	cmp	r3, #0
 800b376:	d00a      	beq.n	800b38e <tcp_process+0x30a>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	6910      	ldr	r0, [r2, #16]
 800b382:	2200      	movs	r2, #0
 800b384:	6879      	ldr	r1, [r7, #4]
 800b386:	4798      	blx	r3
 800b388:	4603      	mov	r3, r0
 800b38a:	76bb      	strb	r3, [r7, #26]
 800b38c:	e001      	b.n	800b392 <tcp_process+0x30e>
 800b38e:	2300      	movs	r3, #0
 800b390:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b392:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b396:	f113 0f0d 	cmn.w	r3, #13
 800b39a:	d102      	bne.n	800b3a2 <tcp_process+0x31e>
          return ERR_ABRT;
 800b39c:	f06f 030c 	mvn.w	r3, #12
 800b3a0:	e250      	b.n	800b844 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	8b5b      	ldrh	r3, [r3, #26]
 800b3a6:	f043 0302 	orr.w	r3, r3, #2
 800b3aa:	b29a      	uxth	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b3b0:	e23a      	b.n	800b828 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b3b2:	4b98      	ldr	r3, [pc, #608]	; (800b614 <tcp_process+0x590>)
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	f003 0310 	and.w	r3, r3, #16
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	f000 8234 	beq.w	800b828 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3c0:	4b95      	ldr	r3, [pc, #596]	; (800b618 <tcp_process+0x594>)
 800b3c2:	6819      	ldr	r1, [r3, #0]
 800b3c4:	4b95      	ldr	r3, [pc, #596]	; (800b61c <tcp_process+0x598>)
 800b3c6:	881b      	ldrh	r3, [r3, #0]
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	4b95      	ldr	r3, [pc, #596]	; (800b620 <tcp_process+0x59c>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3d0:	4b94      	ldr	r3, [pc, #592]	; (800b624 <tcp_process+0x5a0>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3d4:	885b      	ldrh	r3, [r3, #2]
 800b3d6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3d8:	4a92      	ldr	r2, [pc, #584]	; (800b624 <tcp_process+0x5a0>)
 800b3da:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3dc:	8812      	ldrh	r2, [r2, #0]
 800b3de:	b292      	uxth	r2, r2
 800b3e0:	9202      	str	r2, [sp, #8]
 800b3e2:	9301      	str	r3, [sp, #4]
 800b3e4:	4b90      	ldr	r3, [pc, #576]	; (800b628 <tcp_process+0x5a4>)
 800b3e6:	9300      	str	r3, [sp, #0]
 800b3e8:	4b90      	ldr	r3, [pc, #576]	; (800b62c <tcp_process+0x5a8>)
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f002 fc8b 	bl	800dd08 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b3f8:	2b05      	cmp	r3, #5
 800b3fa:	f200 8215 	bhi.w	800b828 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2200      	movs	r2, #0
 800b402:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f002 fa55 	bl	800d8b4 <tcp_rexmit_rto>
      break;
 800b40a:	e20d      	b.n	800b828 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b40c:	4b81      	ldr	r3, [pc, #516]	; (800b614 <tcp_process+0x590>)
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	f003 0310 	and.w	r3, r3, #16
 800b414:	2b00      	cmp	r3, #0
 800b416:	f000 80a1 	beq.w	800b55c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b41a:	4b7f      	ldr	r3, [pc, #508]	; (800b618 <tcp_process+0x594>)
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b422:	1ad3      	subs	r3, r2, r3
 800b424:	3b01      	subs	r3, #1
 800b426:	2b00      	cmp	r3, #0
 800b428:	db7e      	blt.n	800b528 <tcp_process+0x4a4>
 800b42a:	4b7b      	ldr	r3, [pc, #492]	; (800b618 <tcp_process+0x594>)
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b432:	1ad3      	subs	r3, r2, r3
 800b434:	2b00      	cmp	r3, #0
 800b436:	dc77      	bgt.n	800b528 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2204      	movs	r2, #4
 800b43c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b442:	2b00      	cmp	r3, #0
 800b444:	d102      	bne.n	800b44c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b446:	23fa      	movs	r3, #250	; 0xfa
 800b448:	76bb      	strb	r3, [r7, #26]
 800b44a:	e01d      	b.n	800b488 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b450:	699b      	ldr	r3, [r3, #24]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d106      	bne.n	800b464 <tcp_process+0x3e0>
 800b456:	4b76      	ldr	r3, [pc, #472]	; (800b630 <tcp_process+0x5ac>)
 800b458:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b45c:	4975      	ldr	r1, [pc, #468]	; (800b634 <tcp_process+0x5b0>)
 800b45e:	4876      	ldr	r0, [pc, #472]	; (800b638 <tcp_process+0x5b4>)
 800b460:	f005 fc2e 	bl	8010cc0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b468:	699b      	ldr	r3, [r3, #24]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d00a      	beq.n	800b484 <tcp_process+0x400>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b472:	699b      	ldr	r3, [r3, #24]
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	6910      	ldr	r0, [r2, #16]
 800b478:	2200      	movs	r2, #0
 800b47a:	6879      	ldr	r1, [r7, #4]
 800b47c:	4798      	blx	r3
 800b47e:	4603      	mov	r3, r0
 800b480:	76bb      	strb	r3, [r7, #26]
 800b482:	e001      	b.n	800b488 <tcp_process+0x404>
 800b484:	23f0      	movs	r3, #240	; 0xf0
 800b486:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b488:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d00a      	beq.n	800b4a6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b490:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b494:	f113 0f0d 	cmn.w	r3, #13
 800b498:	d002      	beq.n	800b4a0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f7fd fecc 	bl	8009238 <tcp_abort>
            }
            return ERR_ABRT;
 800b4a0:	f06f 030c 	mvn.w	r3, #12
 800b4a4:	e1ce      	b.n	800b844 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 fae0 	bl	800ba6c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b4ac:	4b63      	ldr	r3, [pc, #396]	; (800b63c <tcp_process+0x5b8>)
 800b4ae:	881b      	ldrh	r3, [r3, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d005      	beq.n	800b4c0 <tcp_process+0x43c>
            recv_acked--;
 800b4b4:	4b61      	ldr	r3, [pc, #388]	; (800b63c <tcp_process+0x5b8>)
 800b4b6:	881b      	ldrh	r3, [r3, #0]
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	b29a      	uxth	r2, r3
 800b4bc:	4b5f      	ldr	r3, [pc, #380]	; (800b63c <tcp_process+0x5b8>)
 800b4be:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4c4:	009a      	lsls	r2, r3, #2
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4ca:	005b      	lsls	r3, r3, #1
 800b4cc:	f241 111c 	movw	r1, #4380	; 0x111c
 800b4d0:	428b      	cmp	r3, r1
 800b4d2:	bf38      	it	cc
 800b4d4:	460b      	movcc	r3, r1
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d204      	bcs.n	800b4e4 <tcp_process+0x460>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4de:	009b      	lsls	r3, r3, #2
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	e00d      	b.n	800b500 <tcp_process+0x47c>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4e8:	005b      	lsls	r3, r3, #1
 800b4ea:	f241 121c 	movw	r2, #4380	; 0x111c
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d904      	bls.n	800b4fc <tcp_process+0x478>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4f6:	005b      	lsls	r3, r3, #1
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	e001      	b.n	800b500 <tcp_process+0x47c>
 800b4fc:	f241 131c 	movw	r3, #4380	; 0x111c
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b506:	4b4e      	ldr	r3, [pc, #312]	; (800b640 <tcp_process+0x5bc>)
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	f003 0320 	and.w	r3, r3, #32
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d037      	beq.n	800b582 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	8b5b      	ldrh	r3, [r3, #26]
 800b516:	f043 0302 	orr.w	r3, r3, #2
 800b51a:	b29a      	uxth	r2, r3
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2207      	movs	r2, #7
 800b524:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b526:	e02c      	b.n	800b582 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b528:	4b3b      	ldr	r3, [pc, #236]	; (800b618 <tcp_process+0x594>)
 800b52a:	6819      	ldr	r1, [r3, #0]
 800b52c:	4b3b      	ldr	r3, [pc, #236]	; (800b61c <tcp_process+0x598>)
 800b52e:	881b      	ldrh	r3, [r3, #0]
 800b530:	461a      	mov	r2, r3
 800b532:	4b3b      	ldr	r3, [pc, #236]	; (800b620 <tcp_process+0x59c>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b538:	4b3a      	ldr	r3, [pc, #232]	; (800b624 <tcp_process+0x5a0>)
 800b53a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b53c:	885b      	ldrh	r3, [r3, #2]
 800b53e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b540:	4a38      	ldr	r2, [pc, #224]	; (800b624 <tcp_process+0x5a0>)
 800b542:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b544:	8812      	ldrh	r2, [r2, #0]
 800b546:	b292      	uxth	r2, r2
 800b548:	9202      	str	r2, [sp, #8]
 800b54a:	9301      	str	r3, [sp, #4]
 800b54c:	4b36      	ldr	r3, [pc, #216]	; (800b628 <tcp_process+0x5a4>)
 800b54e:	9300      	str	r3, [sp, #0]
 800b550:	4b36      	ldr	r3, [pc, #216]	; (800b62c <tcp_process+0x5a8>)
 800b552:	4602      	mov	r2, r0
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f002 fbd7 	bl	800dd08 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b55a:	e167      	b.n	800b82c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b55c:	4b2d      	ldr	r3, [pc, #180]	; (800b614 <tcp_process+0x590>)
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	f003 0302 	and.w	r3, r3, #2
 800b564:	2b00      	cmp	r3, #0
 800b566:	f000 8161 	beq.w	800b82c <tcp_process+0x7a8>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b56e:	1e5a      	subs	r2, r3, #1
 800b570:	4b2b      	ldr	r3, [pc, #172]	; (800b620 <tcp_process+0x59c>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	429a      	cmp	r2, r3
 800b576:	f040 8159 	bne.w	800b82c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f002 f9bc 	bl	800d8f8 <tcp_rexmit>
      break;
 800b580:	e154      	b.n	800b82c <tcp_process+0x7a8>
 800b582:	e153      	b.n	800b82c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 fa71 	bl	800ba6c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b58a:	4b2d      	ldr	r3, [pc, #180]	; (800b640 <tcp_process+0x5bc>)
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	f003 0320 	and.w	r3, r3, #32
 800b592:	2b00      	cmp	r3, #0
 800b594:	f000 814c 	beq.w	800b830 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	8b5b      	ldrh	r3, [r3, #26]
 800b59c:	f043 0302 	orr.w	r3, r3, #2
 800b5a0:	b29a      	uxth	r2, r3
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2207      	movs	r2, #7
 800b5aa:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b5ac:	e140      	b.n	800b830 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 fa5c 	bl	800ba6c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b5b4:	4b22      	ldr	r3, [pc, #136]	; (800b640 <tcp_process+0x5bc>)
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	f003 0320 	and.w	r3, r3, #32
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d071      	beq.n	800b6a4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b5c0:	4b14      	ldr	r3, [pc, #80]	; (800b614 <tcp_process+0x590>)
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	f003 0310 	and.w	r3, r3, #16
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d060      	beq.n	800b68e <tcp_process+0x60a>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b5d0:	4b11      	ldr	r3, [pc, #68]	; (800b618 <tcp_process+0x594>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d15a      	bne.n	800b68e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d156      	bne.n	800b68e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	8b5b      	ldrh	r3, [r3, #26]
 800b5e4:	f043 0302 	orr.w	r3, r3, #2
 800b5e8:	b29a      	uxth	r2, r3
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f7fe fcfc 	bl	8009fec <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b5f4:	4b13      	ldr	r3, [pc, #76]	; (800b644 <tcp_process+0x5c0>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d105      	bne.n	800b60a <tcp_process+0x586>
 800b5fe:	4b11      	ldr	r3, [pc, #68]	; (800b644 <tcp_process+0x5c0>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	68db      	ldr	r3, [r3, #12]
 800b604:	4a0f      	ldr	r2, [pc, #60]	; (800b644 <tcp_process+0x5c0>)
 800b606:	6013      	str	r3, [r2, #0]
 800b608:	e02e      	b.n	800b668 <tcp_process+0x5e4>
 800b60a:	4b0e      	ldr	r3, [pc, #56]	; (800b644 <tcp_process+0x5c0>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	617b      	str	r3, [r7, #20]
 800b610:	e027      	b.n	800b662 <tcp_process+0x5de>
 800b612:	bf00      	nop
 800b614:	20007f90 	.word	0x20007f90
 800b618:	20007f88 	.word	0x20007f88
 800b61c:	20007f8e 	.word	0x20007f8e
 800b620:	20007f84 	.word	0x20007f84
 800b624:	20007f74 	.word	0x20007f74
 800b628:	20005040 	.word	0x20005040
 800b62c:	20005044 	.word	0x20005044
 800b630:	08013080 	.word	0x08013080
 800b634:	0801333c 	.word	0x0801333c
 800b638:	080130cc 	.word	0x080130cc
 800b63c:	20007f8c 	.word	0x20007f8c
 800b640:	20007f91 	.word	0x20007f91
 800b644:	20007f58 	.word	0x20007f58
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	68db      	ldr	r3, [r3, #12]
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d104      	bne.n	800b65c <tcp_process+0x5d8>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	68da      	ldr	r2, [r3, #12]
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	60da      	str	r2, [r3, #12]
 800b65a:	e005      	b.n	800b668 <tcp_process+0x5e4>
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	617b      	str	r3, [r7, #20]
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d1ef      	bne.n	800b648 <tcp_process+0x5c4>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2200      	movs	r2, #0
 800b66c:	60da      	str	r2, [r3, #12]
 800b66e:	4b77      	ldr	r3, [pc, #476]	; (800b84c <tcp_process+0x7c8>)
 800b670:	2201      	movs	r2, #1
 800b672:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	220a      	movs	r2, #10
 800b678:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b67a:	4b75      	ldr	r3, [pc, #468]	; (800b850 <tcp_process+0x7cc>)
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	60da      	str	r2, [r3, #12]
 800b682:	4a73      	ldr	r2, [pc, #460]	; (800b850 <tcp_process+0x7cc>)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6013      	str	r3, [r2, #0]
 800b688:	f002 fd00 	bl	800e08c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b68c:	e0d2      	b.n	800b834 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	8b5b      	ldrh	r3, [r3, #26]
 800b692:	f043 0302 	orr.w	r3, r3, #2
 800b696:	b29a      	uxth	r2, r3
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2208      	movs	r2, #8
 800b6a0:	751a      	strb	r2, [r3, #20]
      break;
 800b6a2:	e0c7      	b.n	800b834 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b6a4:	4b6b      	ldr	r3, [pc, #428]	; (800b854 <tcp_process+0x7d0>)
 800b6a6:	781b      	ldrb	r3, [r3, #0]
 800b6a8:	f003 0310 	and.w	r3, r3, #16
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	f000 80c1 	beq.w	800b834 <tcp_process+0x7b0>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b6b6:	4b68      	ldr	r3, [pc, #416]	; (800b858 <tcp_process+0x7d4>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	f040 80ba 	bne.w	800b834 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f040 80b5 	bne.w	800b834 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2206      	movs	r2, #6
 800b6ce:	751a      	strb	r2, [r3, #20]
      break;
 800b6d0:	e0b0      	b.n	800b834 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f9ca 	bl	800ba6c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b6d8:	4b60      	ldr	r3, [pc, #384]	; (800b85c <tcp_process+0x7d8>)
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	f003 0320 	and.w	r3, r3, #32
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f000 80a9 	beq.w	800b838 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	8b5b      	ldrh	r3, [r3, #26]
 800b6ea:	f043 0302 	orr.w	r3, r3, #2
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f7fe fc79 	bl	8009fec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b6fa:	4b59      	ldr	r3, [pc, #356]	; (800b860 <tcp_process+0x7dc>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	429a      	cmp	r2, r3
 800b702:	d105      	bne.n	800b710 <tcp_process+0x68c>
 800b704:	4b56      	ldr	r3, [pc, #344]	; (800b860 <tcp_process+0x7dc>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	4a55      	ldr	r2, [pc, #340]	; (800b860 <tcp_process+0x7dc>)
 800b70c:	6013      	str	r3, [r2, #0]
 800b70e:	e013      	b.n	800b738 <tcp_process+0x6b4>
 800b710:	4b53      	ldr	r3, [pc, #332]	; (800b860 <tcp_process+0x7dc>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	613b      	str	r3, [r7, #16]
 800b716:	e00c      	b.n	800b732 <tcp_process+0x6ae>
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	68db      	ldr	r3, [r3, #12]
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	429a      	cmp	r2, r3
 800b720:	d104      	bne.n	800b72c <tcp_process+0x6a8>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	68da      	ldr	r2, [r3, #12]
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	60da      	str	r2, [r3, #12]
 800b72a:	e005      	b.n	800b738 <tcp_process+0x6b4>
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	68db      	ldr	r3, [r3, #12]
 800b730:	613b      	str	r3, [r7, #16]
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d1ef      	bne.n	800b718 <tcp_process+0x694>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	60da      	str	r2, [r3, #12]
 800b73e:	4b43      	ldr	r3, [pc, #268]	; (800b84c <tcp_process+0x7c8>)
 800b740:	2201      	movs	r2, #1
 800b742:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	220a      	movs	r2, #10
 800b748:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b74a:	4b41      	ldr	r3, [pc, #260]	; (800b850 <tcp_process+0x7cc>)
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	60da      	str	r2, [r3, #12]
 800b752:	4a3f      	ldr	r2, [pc, #252]	; (800b850 <tcp_process+0x7cc>)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6013      	str	r3, [r2, #0]
 800b758:	f002 fc98 	bl	800e08c <tcp_timer_needed>
      }
      break;
 800b75c:	e06c      	b.n	800b838 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 f984 	bl	800ba6c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b764:	4b3b      	ldr	r3, [pc, #236]	; (800b854 <tcp_process+0x7d0>)
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	f003 0310 	and.w	r3, r3, #16
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d065      	beq.n	800b83c <tcp_process+0x7b8>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b774:	4b38      	ldr	r3, [pc, #224]	; (800b858 <tcp_process+0x7d4>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d15f      	bne.n	800b83c <tcp_process+0x7b8>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b780:	2b00      	cmp	r3, #0
 800b782:	d15b      	bne.n	800b83c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f7fe fc31 	bl	8009fec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b78a:	4b35      	ldr	r3, [pc, #212]	; (800b860 <tcp_process+0x7dc>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	429a      	cmp	r2, r3
 800b792:	d105      	bne.n	800b7a0 <tcp_process+0x71c>
 800b794:	4b32      	ldr	r3, [pc, #200]	; (800b860 <tcp_process+0x7dc>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	4a31      	ldr	r2, [pc, #196]	; (800b860 <tcp_process+0x7dc>)
 800b79c:	6013      	str	r3, [r2, #0]
 800b79e:	e013      	b.n	800b7c8 <tcp_process+0x744>
 800b7a0:	4b2f      	ldr	r3, [pc, #188]	; (800b860 <tcp_process+0x7dc>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	60fb      	str	r3, [r7, #12]
 800b7a6:	e00c      	b.n	800b7c2 <tcp_process+0x73e>
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	687a      	ldr	r2, [r7, #4]
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d104      	bne.n	800b7bc <tcp_process+0x738>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	68da      	ldr	r2, [r3, #12]
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	60da      	str	r2, [r3, #12]
 800b7ba:	e005      	b.n	800b7c8 <tcp_process+0x744>
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	68db      	ldr	r3, [r3, #12]
 800b7c0:	60fb      	str	r3, [r7, #12]
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d1ef      	bne.n	800b7a8 <tcp_process+0x724>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	60da      	str	r2, [r3, #12]
 800b7ce:	4b1f      	ldr	r3, [pc, #124]	; (800b84c <tcp_process+0x7c8>)
 800b7d0:	2201      	movs	r2, #1
 800b7d2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	220a      	movs	r2, #10
 800b7d8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b7da:	4b1d      	ldr	r3, [pc, #116]	; (800b850 <tcp_process+0x7cc>)
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	60da      	str	r2, [r3, #12]
 800b7e2:	4a1b      	ldr	r2, [pc, #108]	; (800b850 <tcp_process+0x7cc>)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6013      	str	r3, [r2, #0]
 800b7e8:	f002 fc50 	bl	800e08c <tcp_timer_needed>
      }
      break;
 800b7ec:	e026      	b.n	800b83c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 f93c 	bl	800ba6c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b7f4:	4b17      	ldr	r3, [pc, #92]	; (800b854 <tcp_process+0x7d0>)
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	f003 0310 	and.w	r3, r3, #16
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d01f      	beq.n	800b840 <tcp_process+0x7bc>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b804:	4b14      	ldr	r3, [pc, #80]	; (800b858 <tcp_process+0x7d4>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	429a      	cmp	r2, r3
 800b80a:	d119      	bne.n	800b840 <tcp_process+0x7bc>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b810:	2b00      	cmp	r3, #0
 800b812:	d115      	bne.n	800b840 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b814:	4b11      	ldr	r3, [pc, #68]	; (800b85c <tcp_process+0x7d8>)
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	f043 0310 	orr.w	r3, r3, #16
 800b81c:	b2da      	uxtb	r2, r3
 800b81e:	4b0f      	ldr	r3, [pc, #60]	; (800b85c <tcp_process+0x7d8>)
 800b820:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b822:	e00d      	b.n	800b840 <tcp_process+0x7bc>
    default:
      break;
 800b824:	bf00      	nop
 800b826:	e00c      	b.n	800b842 <tcp_process+0x7be>
      break;
 800b828:	bf00      	nop
 800b82a:	e00a      	b.n	800b842 <tcp_process+0x7be>
      break;
 800b82c:	bf00      	nop
 800b82e:	e008      	b.n	800b842 <tcp_process+0x7be>
      break;
 800b830:	bf00      	nop
 800b832:	e006      	b.n	800b842 <tcp_process+0x7be>
      break;
 800b834:	bf00      	nop
 800b836:	e004      	b.n	800b842 <tcp_process+0x7be>
      break;
 800b838:	bf00      	nop
 800b83a:	e002      	b.n	800b842 <tcp_process+0x7be>
      break;
 800b83c:	bf00      	nop
 800b83e:	e000      	b.n	800b842 <tcp_process+0x7be>
      break;
 800b840:	bf00      	nop
  }
  return ERR_OK;
 800b842:	2300      	movs	r3, #0
}
 800b844:	4618      	mov	r0, r3
 800b846:	3724      	adds	r7, #36	; 0x24
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd90      	pop	{r4, r7, pc}
 800b84c:	20007f60 	.word	0x20007f60
 800b850:	20007f5c 	.word	0x20007f5c
 800b854:	20007f90 	.word	0x20007f90
 800b858:	20007f88 	.word	0x20007f88
 800b85c:	20007f91 	.word	0x20007f91
 800b860:	20007f58 	.word	0x20007f58

0800b864 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b864:	b590      	push	{r4, r7, lr}
 800b866:	b085      	sub	sp, #20
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d106      	bne.n	800b882 <tcp_oos_insert_segment+0x1e>
 800b874:	4b3b      	ldr	r3, [pc, #236]	; (800b964 <tcp_oos_insert_segment+0x100>)
 800b876:	f240 421f 	movw	r2, #1055	; 0x41f
 800b87a:	493b      	ldr	r1, [pc, #236]	; (800b968 <tcp_oos_insert_segment+0x104>)
 800b87c:	483b      	ldr	r0, [pc, #236]	; (800b96c <tcp_oos_insert_segment+0x108>)
 800b87e:	f005 fa1f 	bl	8010cc0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	68db      	ldr	r3, [r3, #12]
 800b886:	899b      	ldrh	r3, [r3, #12]
 800b888:	b29b      	uxth	r3, r3
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7fb fb52 	bl	8006f34 <lwip_htons>
 800b890:	4603      	mov	r3, r0
 800b892:	b2db      	uxtb	r3, r3
 800b894:	f003 0301 	and.w	r3, r3, #1
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d028      	beq.n	800b8ee <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b89c:	6838      	ldr	r0, [r7, #0]
 800b89e:	f7fe f9a1 	bl	8009be4 <tcp_segs_free>
    next = NULL;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	603b      	str	r3, [r7, #0]
 800b8a6:	e056      	b.n	800b956 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	68db      	ldr	r3, [r3, #12]
 800b8ac:	899b      	ldrh	r3, [r3, #12]
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f7fb fb3f 	bl	8006f34 <lwip_htons>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	f003 0301 	and.w	r3, r3, #1
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d00d      	beq.n	800b8de <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	68db      	ldr	r3, [r3, #12]
 800b8c6:	899b      	ldrh	r3, [r3, #12]
 800b8c8:	b29c      	uxth	r4, r3
 800b8ca:	2001      	movs	r0, #1
 800b8cc:	f7fb fb32 	bl	8006f34 <lwip_htons>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	4322      	orrs	r2, r4
 800b8da:	b292      	uxth	r2, r2
 800b8dc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f7fe f990 	bl	8009c0e <tcp_seg_free>
    while (next &&
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d00e      	beq.n	800b912 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	891b      	ldrh	r3, [r3, #8]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	4b1d      	ldr	r3, [pc, #116]	; (800b970 <tcp_oos_insert_segment+0x10c>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	441a      	add	r2, r3
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	68db      	ldr	r3, [r3, #12]
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	6839      	ldr	r1, [r7, #0]
 800b908:	8909      	ldrh	r1, [r1, #8]
 800b90a:	440b      	add	r3, r1
 800b90c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b90e:	2b00      	cmp	r3, #0
 800b910:	daca      	bge.n	800b8a8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d01e      	beq.n	800b956 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	891b      	ldrh	r3, [r3, #8]
 800b91c:	461a      	mov	r2, r3
 800b91e:	4b14      	ldr	r3, [pc, #80]	; (800b970 <tcp_oos_insert_segment+0x10c>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	441a      	add	r2, r3
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	dd12      	ble.n	800b956 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	b29a      	uxth	r2, r3
 800b938:	4b0d      	ldr	r3, [pc, #52]	; (800b970 <tcp_oos_insert_segment+0x10c>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	b29b      	uxth	r3, r3
 800b93e:	1ad3      	subs	r3, r2, r3
 800b940:	b29a      	uxth	r2, r3
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	685a      	ldr	r2, [r3, #4]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	891b      	ldrh	r3, [r3, #8]
 800b94e:	4619      	mov	r1, r3
 800b950:	4610      	mov	r0, r2
 800b952:	f7fc fd5f 	bl	8008414 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	683a      	ldr	r2, [r7, #0]
 800b95a:	601a      	str	r2, [r3, #0]
}
 800b95c:	bf00      	nop
 800b95e:	3714      	adds	r7, #20
 800b960:	46bd      	mov	sp, r7
 800b962:	bd90      	pop	{r4, r7, pc}
 800b964:	08013080 	.word	0x08013080
 800b968:	0801335c 	.word	0x0801335c
 800b96c:	080130cc 	.word	0x080130cc
 800b970:	20007f84 	.word	0x20007f84

0800b974 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b974:	b5b0      	push	{r4, r5, r7, lr}
 800b976:	b086      	sub	sp, #24
 800b978:	af00      	add	r7, sp, #0
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	60b9      	str	r1, [r7, #8]
 800b97e:	607a      	str	r2, [r7, #4]
 800b980:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b982:	e03e      	b.n	800ba02 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	4618      	mov	r0, r3
 800b994:	f7fc ff4c 	bl	8008830 <pbuf_clen>
 800b998:	4603      	mov	r3, r0
 800b99a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b9a2:	8a7a      	ldrh	r2, [r7, #18]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d906      	bls.n	800b9b6 <tcp_free_acked_segments+0x42>
 800b9a8:	4b2a      	ldr	r3, [pc, #168]	; (800ba54 <tcp_free_acked_segments+0xe0>)
 800b9aa:	f240 4257 	movw	r2, #1111	; 0x457
 800b9ae:	492a      	ldr	r1, [pc, #168]	; (800ba58 <tcp_free_acked_segments+0xe4>)
 800b9b0:	482a      	ldr	r0, [pc, #168]	; (800ba5c <tcp_free_acked_segments+0xe8>)
 800b9b2:	f005 f985 	bl	8010cc0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b9bc:	8a7b      	ldrh	r3, [r7, #18]
 800b9be:	1ad3      	subs	r3, r2, r3
 800b9c0:	b29a      	uxth	r2, r3
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	891a      	ldrh	r2, [r3, #8]
 800b9cc:	4b24      	ldr	r3, [pc, #144]	; (800ba60 <tcp_free_acked_segments+0xec>)
 800b9ce:	881b      	ldrh	r3, [r3, #0]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	b29a      	uxth	r2, r3
 800b9d4:	4b22      	ldr	r3, [pc, #136]	; (800ba60 <tcp_free_acked_segments+0xec>)
 800b9d6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b9d8:	6978      	ldr	r0, [r7, #20]
 800b9da:	f7fe f918 	bl	8009c0e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d00c      	beq.n	800ba02 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d109      	bne.n	800ba02 <tcp_free_acked_segments+0x8e>
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d106      	bne.n	800ba02 <tcp_free_acked_segments+0x8e>
 800b9f4:	4b17      	ldr	r3, [pc, #92]	; (800ba54 <tcp_free_acked_segments+0xe0>)
 800b9f6:	f240 4261 	movw	r2, #1121	; 0x461
 800b9fa:	491a      	ldr	r1, [pc, #104]	; (800ba64 <tcp_free_acked_segments+0xf0>)
 800b9fc:	4817      	ldr	r0, [pc, #92]	; (800ba5c <tcp_free_acked_segments+0xe8>)
 800b9fe:	f005 f95f 	bl	8010cc0 <iprintf>
  while (seg_list != NULL &&
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d020      	beq.n	800ba4a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	68db      	ldr	r3, [r3, #12]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7fb faa5 	bl	8006f5e <lwip_htonl>
 800ba14:	4604      	mov	r4, r0
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	891b      	ldrh	r3, [r3, #8]
 800ba1a:	461d      	mov	r5, r3
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	68db      	ldr	r3, [r3, #12]
 800ba20:	899b      	ldrh	r3, [r3, #12]
 800ba22:	b29b      	uxth	r3, r3
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7fb fa85 	bl	8006f34 <lwip_htons>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	f003 0303 	and.w	r3, r3, #3
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d001      	beq.n	800ba3a <tcp_free_acked_segments+0xc6>
 800ba36:	2301      	movs	r3, #1
 800ba38:	e000      	b.n	800ba3c <tcp_free_acked_segments+0xc8>
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	442b      	add	r3, r5
 800ba3e:	18e2      	adds	r2, r4, r3
 800ba40:	4b09      	ldr	r3, [pc, #36]	; (800ba68 <tcp_free_acked_segments+0xf4>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	dd9c      	ble.n	800b984 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ba4a:	68bb      	ldr	r3, [r7, #8]
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3718      	adds	r7, #24
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bdb0      	pop	{r4, r5, r7, pc}
 800ba54:	08013080 	.word	0x08013080
 800ba58:	08013384 	.word	0x08013384
 800ba5c:	080130cc 	.word	0x080130cc
 800ba60:	20007f8c 	.word	0x20007f8c
 800ba64:	080133ac 	.word	0x080133ac
 800ba68:	20007f88 	.word	0x20007f88

0800ba6c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ba6c:	b5b0      	push	{r4, r5, r7, lr}
 800ba6e:	b094      	sub	sp, #80	; 0x50
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ba74:	2300      	movs	r3, #0
 800ba76:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d106      	bne.n	800ba8c <tcp_receive+0x20>
 800ba7e:	4b91      	ldr	r3, [pc, #580]	; (800bcc4 <tcp_receive+0x258>)
 800ba80:	f240 427b 	movw	r2, #1147	; 0x47b
 800ba84:	4990      	ldr	r1, [pc, #576]	; (800bcc8 <tcp_receive+0x25c>)
 800ba86:	4891      	ldr	r0, [pc, #580]	; (800bccc <tcp_receive+0x260>)
 800ba88:	f005 f91a 	bl	8010cc0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	7d1b      	ldrb	r3, [r3, #20]
 800ba90:	2b03      	cmp	r3, #3
 800ba92:	d806      	bhi.n	800baa2 <tcp_receive+0x36>
 800ba94:	4b8b      	ldr	r3, [pc, #556]	; (800bcc4 <tcp_receive+0x258>)
 800ba96:	f240 427c 	movw	r2, #1148	; 0x47c
 800ba9a:	498d      	ldr	r1, [pc, #564]	; (800bcd0 <tcp_receive+0x264>)
 800ba9c:	488b      	ldr	r0, [pc, #556]	; (800bccc <tcp_receive+0x260>)
 800ba9e:	f005 f90f 	bl	8010cc0 <iprintf>

  if (flags & TCP_ACK) {
 800baa2:	4b8c      	ldr	r3, [pc, #560]	; (800bcd4 <tcp_receive+0x268>)
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	f003 0310 	and.w	r3, r3, #16
 800baaa:	2b00      	cmp	r3, #0
 800baac:	f000 8264 	beq.w	800bf78 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bab6:	461a      	mov	r2, r3
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800babc:	4413      	add	r3, r2
 800babe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bac4:	4b84      	ldr	r3, [pc, #528]	; (800bcd8 <tcp_receive+0x26c>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	1ad3      	subs	r3, r2, r3
 800baca:	2b00      	cmp	r3, #0
 800bacc:	db1b      	blt.n	800bb06 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bad2:	4b81      	ldr	r3, [pc, #516]	; (800bcd8 <tcp_receive+0x26c>)
 800bad4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d106      	bne.n	800bae8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bade:	4b7f      	ldr	r3, [pc, #508]	; (800bcdc <tcp_receive+0x270>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	1ad3      	subs	r3, r2, r3
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	db0e      	blt.n	800bb06 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800baec:	4b7b      	ldr	r3, [pc, #492]	; (800bcdc <tcp_receive+0x270>)
 800baee:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d125      	bne.n	800bb40 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800baf4:	4b7a      	ldr	r3, [pc, #488]	; (800bce0 <tcp_receive+0x274>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	89db      	ldrh	r3, [r3, #14]
 800bafa:	b29a      	uxth	r2, r3
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d91c      	bls.n	800bb40 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bb06:	4b76      	ldr	r3, [pc, #472]	; (800bce0 <tcp_receive+0x274>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	89db      	ldrh	r3, [r3, #14]
 800bb0c:	b29a      	uxth	r2, r3
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d205      	bcs.n	800bb30 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800bb30:	4b69      	ldr	r3, [pc, #420]	; (800bcd8 <tcp_receive+0x26c>)
 800bb32:	681a      	ldr	r2, [r3, #0]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800bb38:	4b68      	ldr	r3, [pc, #416]	; (800bcdc <tcp_receive+0x270>)
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bb40:	4b66      	ldr	r3, [pc, #408]	; (800bcdc <tcp_receive+0x270>)
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb48:	1ad3      	subs	r3, r2, r3
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	dc58      	bgt.n	800bc00 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800bb4e:	4b65      	ldr	r3, [pc, #404]	; (800bce4 <tcp_receive+0x278>)
 800bb50:	881b      	ldrh	r3, [r3, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d14b      	bne.n	800bbee <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800bb60:	4413      	add	r3, r2
 800bb62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d142      	bne.n	800bbee <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	db3d      	blt.n	800bbee <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb76:	4b59      	ldr	r3, [pc, #356]	; (800bcdc <tcp_receive+0x270>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d137      	bne.n	800bbee <tcp_receive+0x182>
              found_dupack = 1;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bb88:	2bff      	cmp	r3, #255	; 0xff
 800bb8a:	d007      	beq.n	800bb9c <tcp_receive+0x130>
                ++pcb->dupacks;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bb92:	3301      	adds	r3, #1
 800bb94:	b2da      	uxtb	r2, r3
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bba2:	2b03      	cmp	r3, #3
 800bba4:	d91b      	bls.n	800bbde <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbb0:	4413      	add	r3, r2
 800bbb2:	b29a      	uxth	r2, r3
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d30a      	bcc.n	800bbd4 <tcp_receive+0x168>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbc8:	4413      	add	r3, r2
 800bbca:	b29a      	uxth	r2, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bbd2:	e004      	b.n	800bbde <tcp_receive+0x172>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bbda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bbe4:	2b02      	cmp	r3, #2
 800bbe6:	d902      	bls.n	800bbee <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f001 fef1 	bl	800d9d0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800bbee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	f040 8161 	bne.w	800beb8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bbfe:	e15b      	b.n	800beb8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bc00:	4b36      	ldr	r3, [pc, #216]	; (800bcdc <tcp_receive+0x270>)
 800bc02:	681a      	ldr	r2, [r3, #0]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc08:	1ad3      	subs	r3, r2, r3
 800bc0a:	3b01      	subs	r3, #1
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	f2c0 814e 	blt.w	800beae <tcp_receive+0x442>
 800bc12:	4b32      	ldr	r3, [pc, #200]	; (800bcdc <tcp_receive+0x270>)
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc1a:	1ad3      	subs	r3, r2, r3
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	f300 8146 	bgt.w	800beae <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	8b5b      	ldrh	r3, [r3, #26]
 800bc26:	f003 0304 	and.w	r3, r3, #4
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d010      	beq.n	800bc50 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	8b5b      	ldrh	r3, [r3, #26]
 800bc32:	f023 0304 	bic.w	r3, r3, #4
 800bc36:	b29a      	uxth	r2, r3
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2200      	movs	r2, #0
 800bc54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bc5e:	10db      	asrs	r3, r3, #3
 800bc60:	b21b      	sxth	r3, r3
 800bc62:	b29a      	uxth	r2, r3
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	4413      	add	r3, r2
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	b21a      	sxth	r2, r3
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800bc78:	4b18      	ldr	r3, [pc, #96]	; (800bcdc <tcp_receive+0x270>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	b29a      	uxth	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	1ad3      	subs	r3, r2, r3
 800bc86:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800bc90:	4b12      	ldr	r3, [pc, #72]	; (800bcdc <tcp_receive+0x270>)
 800bc92:	681a      	ldr	r2, [r3, #0]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	7d1b      	ldrb	r3, [r3, #20]
 800bc9c:	2b03      	cmp	r3, #3
 800bc9e:	f240 8097 	bls.w	800bdd0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d245      	bcs.n	800bd3e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	8b5b      	ldrh	r3, [r3, #26]
 800bcb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d014      	beq.n	800bce8 <tcp_receive+0x27c>
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	e013      	b.n	800bcea <tcp_receive+0x27e>
 800bcc2:	bf00      	nop
 800bcc4:	08013080 	.word	0x08013080
 800bcc8:	080133cc 	.word	0x080133cc
 800bccc:	080130cc 	.word	0x080130cc
 800bcd0:	080133e8 	.word	0x080133e8
 800bcd4:	20007f90 	.word	0x20007f90
 800bcd8:	20007f84 	.word	0x20007f84
 800bcdc:	20007f88 	.word	0x20007f88
 800bce0:	20007f74 	.word	0x20007f74
 800bce4:	20007f8e 	.word	0x20007f8e
 800bce8:	2302      	movs	r3, #2
 800bcea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800bcee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800bcf2:	b29a      	uxth	r2, r3
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bcf8:	fb12 f303 	smulbb	r3, r2, r3
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bd00:	4293      	cmp	r3, r2
 800bd02:	bf28      	it	cs
 800bd04:	4613      	movcs	r3, r2
 800bd06:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bd0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bd10:	4413      	add	r3, r2
 800bd12:	b29a      	uxth	r2, r3
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d309      	bcc.n	800bd32 <tcp_receive+0x2c6>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bd24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bd26:	4413      	add	r3, r2
 800bd28:	b29a      	uxth	r2, r3
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bd30:	e04e      	b.n	800bdd0 <tcp_receive+0x364>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd38:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bd3c:	e048      	b.n	800bdd0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bd44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd46:	4413      	add	r3, r2
 800bd48:	b29a      	uxth	r2, r3
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d309      	bcc.n	800bd68 <tcp_receive+0x2fc>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bd5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd5c:	4413      	add	r3, r2
 800bd5e:	b29a      	uxth	r2, r3
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bd66:	e004      	b.n	800bd72 <tcp_receive+0x306>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d326      	bcc.n	800bdd0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bd8e:	1ad3      	subs	r3, r2, r3
 800bd90:	b29a      	uxth	r2, r3
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bda2:	4413      	add	r3, r2
 800bda4:	b29a      	uxth	r2, r3
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d30a      	bcc.n	800bdc6 <tcp_receive+0x35a>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bdba:	4413      	add	r3, r2
 800bdbc:	b29a      	uxth	r2, r3
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bdc4:	e004      	b.n	800bdd0 <tcp_receive+0x364>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdcc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdd8:	4a98      	ldr	r2, [pc, #608]	; (800c03c <tcp_receive+0x5d0>)
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f7ff fdca 	bl	800b974 <tcp_free_acked_segments>
 800bde0:	4602      	mov	r2, r0
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdee:	4a94      	ldr	r2, [pc, #592]	; (800c040 <tcp_receive+0x5d4>)
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f7ff fdbf 	bl	800b974 <tcp_free_acked_segments>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be00:	2b00      	cmp	r3, #0
 800be02:	d104      	bne.n	800be0e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be0a:	861a      	strh	r2, [r3, #48]	; 0x30
 800be0c:	e002      	b.n	800be14 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2200      	movs	r2, #0
 800be12:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2200      	movs	r2, #0
 800be18:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d103      	bne.n	800be2a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800be30:	4b84      	ldr	r3, [pc, #528]	; (800c044 <tcp_receive+0x5d8>)
 800be32:	881b      	ldrh	r3, [r3, #0]
 800be34:	4413      	add	r3, r2
 800be36:	b29a      	uxth	r2, r3
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	8b5b      	ldrh	r3, [r3, #26]
 800be42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be46:	2b00      	cmp	r3, #0
 800be48:	d035      	beq.n	800beb6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d118      	bne.n	800be84 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be56:	2b00      	cmp	r3, #0
 800be58:	d00c      	beq.n	800be74 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be62:	68db      	ldr	r3, [r3, #12]
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	4618      	mov	r0, r3
 800be68:	f7fb f879 	bl	8006f5e <lwip_htonl>
 800be6c:	4603      	mov	r3, r0
 800be6e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800be70:	2b00      	cmp	r3, #0
 800be72:	dc20      	bgt.n	800beb6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	8b5b      	ldrh	r3, [r3, #26]
 800be78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800be7c:	b29a      	uxth	r2, r3
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800be82:	e018      	b.n	800beb6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	4618      	mov	r0, r3
 800be92:	f7fb f864 	bl	8006f5e <lwip_htonl>
 800be96:	4603      	mov	r3, r0
 800be98:	1ae3      	subs	r3, r4, r3
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	dc0b      	bgt.n	800beb6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	8b5b      	ldrh	r3, [r3, #26]
 800bea2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bea6:	b29a      	uxth	r2, r3
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800beac:	e003      	b.n	800beb6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f001 ff7c 	bl	800ddac <tcp_send_empty_ack>
 800beb4:	e000      	b.n	800beb8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800beb6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d05b      	beq.n	800bf78 <tcp_receive+0x50c>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bec4:	4b60      	ldr	r3, [pc, #384]	; (800c048 <tcp_receive+0x5dc>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	1ad3      	subs	r3, r2, r3
 800beca:	2b00      	cmp	r3, #0
 800becc:	da54      	bge.n	800bf78 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800bece:	4b5f      	ldr	r3, [pc, #380]	; (800c04c <tcp_receive+0x5e0>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	b29a      	uxth	r2, r3
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bed8:	b29b      	uxth	r3, r3
 800beda:	1ad3      	subs	r3, r2, r3
 800bedc:	b29b      	uxth	r3, r3
 800bede:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800bee2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800beec:	10db      	asrs	r3, r3, #3
 800beee:	b21b      	sxth	r3, r3
 800bef0:	b29b      	uxth	r3, r3
 800bef2:	1ad3      	subs	r3, r2, r3
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bf00:	b29a      	uxth	r2, r3
 800bf02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf06:	4413      	add	r3, r2
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	b21a      	sxth	r2, r3
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800bf10:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	da05      	bge.n	800bf24 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800bf18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf1c:	425b      	negs	r3, r3
 800bf1e:	b29b      	uxth	r3, r3
 800bf20:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800bf24:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bf2e:	109b      	asrs	r3, r3, #2
 800bf30:	b21b      	sxth	r3, r3
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	1ad3      	subs	r3, r2, r3
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bf42:	b29a      	uxth	r2, r3
 800bf44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf48:	4413      	add	r3, r2
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	b21a      	sxth	r2, r3
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bf58:	10db      	asrs	r3, r3, #3
 800bf5a:	b21b      	sxth	r3, r3
 800bf5c:	b29a      	uxth	r2, r3
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	4413      	add	r3, r2
 800bf68:	b29b      	uxth	r3, r3
 800bf6a:	b21a      	sxth	r2, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2200      	movs	r2, #0
 800bf76:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800bf78:	4b35      	ldr	r3, [pc, #212]	; (800c050 <tcp_receive+0x5e4>)
 800bf7a:	881b      	ldrh	r3, [r3, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	f000 84e2 	beq.w	800c946 <tcp_receive+0xeda>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	7d1b      	ldrb	r3, [r3, #20]
 800bf86:	2b06      	cmp	r3, #6
 800bf88:	f200 84dd 	bhi.w	800c946 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf90:	4b30      	ldr	r3, [pc, #192]	; (800c054 <tcp_receive+0x5e8>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	1ad3      	subs	r3, r2, r3
 800bf96:	3b01      	subs	r3, #1
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	f2c0 808f 	blt.w	800c0bc <tcp_receive+0x650>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfa2:	4b2b      	ldr	r3, [pc, #172]	; (800c050 <tcp_receive+0x5e4>)
 800bfa4:	881b      	ldrh	r3, [r3, #0]
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	4b2a      	ldr	r3, [pc, #168]	; (800c054 <tcp_receive+0x5e8>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	440b      	add	r3, r1
 800bfae:	1ad3      	subs	r3, r2, r3
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	f300 8082 	bgt.w	800c0bc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800bfb8:	4b27      	ldr	r3, [pc, #156]	; (800c058 <tcp_receive+0x5ec>)
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfc2:	4b24      	ldr	r3, [pc, #144]	; (800c054 <tcp_receive+0x5e8>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	1ad3      	subs	r3, r2, r3
 800bfc8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800bfca:	4b23      	ldr	r3, [pc, #140]	; (800c058 <tcp_receive+0x5ec>)
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d106      	bne.n	800bfe0 <tcp_receive+0x574>
 800bfd2:	4b22      	ldr	r3, [pc, #136]	; (800c05c <tcp_receive+0x5f0>)
 800bfd4:	f240 5294 	movw	r2, #1428	; 0x594
 800bfd8:	4921      	ldr	r1, [pc, #132]	; (800c060 <tcp_receive+0x5f4>)
 800bfda:	4822      	ldr	r0, [pc, #136]	; (800c064 <tcp_receive+0x5f8>)
 800bfdc:	f004 fe70 	bl	8010cc0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800bfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d906      	bls.n	800bff8 <tcp_receive+0x58c>
 800bfea:	4b1c      	ldr	r3, [pc, #112]	; (800c05c <tcp_receive+0x5f0>)
 800bfec:	f240 5295 	movw	r2, #1429	; 0x595
 800bff0:	491d      	ldr	r1, [pc, #116]	; (800c068 <tcp_receive+0x5fc>)
 800bff2:	481c      	ldr	r0, [pc, #112]	; (800c064 <tcp_receive+0x5f8>)
 800bff4:	f004 fe64 	bl	8010cc0 <iprintf>
      off = (u16_t)off32;
 800bff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800bffe:	4b16      	ldr	r3, [pc, #88]	; (800c058 <tcp_receive+0x5ec>)
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	891b      	ldrh	r3, [r3, #8]
 800c004:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c008:	429a      	cmp	r2, r3
 800c00a:	d906      	bls.n	800c01a <tcp_receive+0x5ae>
 800c00c:	4b13      	ldr	r3, [pc, #76]	; (800c05c <tcp_receive+0x5f0>)
 800c00e:	f240 5297 	movw	r2, #1431	; 0x597
 800c012:	4916      	ldr	r1, [pc, #88]	; (800c06c <tcp_receive+0x600>)
 800c014:	4813      	ldr	r0, [pc, #76]	; (800c064 <tcp_receive+0x5f8>)
 800c016:	f004 fe53 	bl	8010cc0 <iprintf>
      inseg.len -= off;
 800c01a:	4b0f      	ldr	r3, [pc, #60]	; (800c058 <tcp_receive+0x5ec>)
 800c01c:	891a      	ldrh	r2, [r3, #8]
 800c01e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c022:	1ad3      	subs	r3, r2, r3
 800c024:	b29a      	uxth	r2, r3
 800c026:	4b0c      	ldr	r3, [pc, #48]	; (800c058 <tcp_receive+0x5ec>)
 800c028:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c02a:	4b0b      	ldr	r3, [pc, #44]	; (800c058 <tcp_receive+0x5ec>)
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	891a      	ldrh	r2, [r3, #8]
 800c030:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c034:	1ad3      	subs	r3, r2, r3
 800c036:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800c038:	e02a      	b.n	800c090 <tcp_receive+0x624>
 800c03a:	bf00      	nop
 800c03c:	08013404 	.word	0x08013404
 800c040:	0801340c 	.word	0x0801340c
 800c044:	20007f8c 	.word	0x20007f8c
 800c048:	20007f88 	.word	0x20007f88
 800c04c:	20007f4c 	.word	0x20007f4c
 800c050:	20007f8e 	.word	0x20007f8e
 800c054:	20007f84 	.word	0x20007f84
 800c058:	20007f64 	.word	0x20007f64
 800c05c:	08013080 	.word	0x08013080
 800c060:	08013414 	.word	0x08013414
 800c064:	080130cc 	.word	0x080130cc
 800c068:	08013424 	.word	0x08013424
 800c06c:	08013434 	.word	0x08013434
        off -= p->len;
 800c070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c072:	895b      	ldrh	r3, [r3, #10]
 800c074:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c078:	1ad3      	subs	r3, r2, r3
 800c07a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c07e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c080:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c082:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c086:	2200      	movs	r2, #0
 800c088:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c08a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800c090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c092:	895b      	ldrh	r3, [r3, #10]
 800c094:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c098:	429a      	cmp	r2, r3
 800c09a:	d8e9      	bhi.n	800c070 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c09c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c0a4:	f7fc fab6 	bl	8008614 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ac:	4a91      	ldr	r2, [pc, #580]	; (800c2f4 <tcp_receive+0x888>)
 800c0ae:	6013      	str	r3, [r2, #0]
 800c0b0:	4b91      	ldr	r3, [pc, #580]	; (800c2f8 <tcp_receive+0x88c>)
 800c0b2:	68db      	ldr	r3, [r3, #12]
 800c0b4:	4a8f      	ldr	r2, [pc, #572]	; (800c2f4 <tcp_receive+0x888>)
 800c0b6:	6812      	ldr	r2, [r2, #0]
 800c0b8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c0ba:	e00d      	b.n	800c0d8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c0bc:	4b8d      	ldr	r3, [pc, #564]	; (800c2f4 <tcp_receive+0x888>)
 800c0be:	681a      	ldr	r2, [r3, #0]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c4:	1ad3      	subs	r3, r2, r3
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	da06      	bge.n	800c0d8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	8b5b      	ldrh	r3, [r3, #26]
 800c0ce:	f043 0302 	orr.w	r3, r3, #2
 800c0d2:	b29a      	uxth	r2, r3
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c0d8:	4b86      	ldr	r3, [pc, #536]	; (800c2f4 <tcp_receive+0x888>)
 800c0da:	681a      	ldr	r2, [r3, #0]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e0:	1ad3      	subs	r3, r2, r3
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	f2c0 842a 	blt.w	800c93c <tcp_receive+0xed0>
 800c0e8:	4b82      	ldr	r3, [pc, #520]	; (800c2f4 <tcp_receive+0x888>)
 800c0ea:	681a      	ldr	r2, [r3, #0]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f0:	6879      	ldr	r1, [r7, #4]
 800c0f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c0f4:	440b      	add	r3, r1
 800c0f6:	1ad3      	subs	r3, r2, r3
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	f300 841e 	bgt.w	800c93c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c104:	4b7b      	ldr	r3, [pc, #492]	; (800c2f4 <tcp_receive+0x888>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	429a      	cmp	r2, r3
 800c10a:	f040 829a 	bne.w	800c642 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c10e:	4b7a      	ldr	r3, [pc, #488]	; (800c2f8 <tcp_receive+0x88c>)
 800c110:	891c      	ldrh	r4, [r3, #8]
 800c112:	4b79      	ldr	r3, [pc, #484]	; (800c2f8 <tcp_receive+0x88c>)
 800c114:	68db      	ldr	r3, [r3, #12]
 800c116:	899b      	ldrh	r3, [r3, #12]
 800c118:	b29b      	uxth	r3, r3
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7fa ff0a 	bl	8006f34 <lwip_htons>
 800c120:	4603      	mov	r3, r0
 800c122:	b2db      	uxtb	r3, r3
 800c124:	f003 0303 	and.w	r3, r3, #3
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d001      	beq.n	800c130 <tcp_receive+0x6c4>
 800c12c:	2301      	movs	r3, #1
 800c12e:	e000      	b.n	800c132 <tcp_receive+0x6c6>
 800c130:	2300      	movs	r3, #0
 800c132:	4423      	add	r3, r4
 800c134:	b29a      	uxth	r2, r3
 800c136:	4b71      	ldr	r3, [pc, #452]	; (800c2fc <tcp_receive+0x890>)
 800c138:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c13e:	4b6f      	ldr	r3, [pc, #444]	; (800c2fc <tcp_receive+0x890>)
 800c140:	881b      	ldrh	r3, [r3, #0]
 800c142:	429a      	cmp	r2, r3
 800c144:	d275      	bcs.n	800c232 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c146:	4b6c      	ldr	r3, [pc, #432]	; (800c2f8 <tcp_receive+0x88c>)
 800c148:	68db      	ldr	r3, [r3, #12]
 800c14a:	899b      	ldrh	r3, [r3, #12]
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	4618      	mov	r0, r3
 800c150:	f7fa fef0 	bl	8006f34 <lwip_htons>
 800c154:	4603      	mov	r3, r0
 800c156:	b2db      	uxtb	r3, r3
 800c158:	f003 0301 	and.w	r3, r3, #1
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d01f      	beq.n	800c1a0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c160:	4b65      	ldr	r3, [pc, #404]	; (800c2f8 <tcp_receive+0x88c>)
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	899b      	ldrh	r3, [r3, #12]
 800c166:	b29b      	uxth	r3, r3
 800c168:	b21b      	sxth	r3, r3
 800c16a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c16e:	b21c      	sxth	r4, r3
 800c170:	4b61      	ldr	r3, [pc, #388]	; (800c2f8 <tcp_receive+0x88c>)
 800c172:	68db      	ldr	r3, [r3, #12]
 800c174:	899b      	ldrh	r3, [r3, #12]
 800c176:	b29b      	uxth	r3, r3
 800c178:	4618      	mov	r0, r3
 800c17a:	f7fa fedb 	bl	8006f34 <lwip_htons>
 800c17e:	4603      	mov	r3, r0
 800c180:	b2db      	uxtb	r3, r3
 800c182:	b29b      	uxth	r3, r3
 800c184:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c188:	b29b      	uxth	r3, r3
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7fa fed2 	bl	8006f34 <lwip_htons>
 800c190:	4603      	mov	r3, r0
 800c192:	b21b      	sxth	r3, r3
 800c194:	4323      	orrs	r3, r4
 800c196:	b21a      	sxth	r2, r3
 800c198:	4b57      	ldr	r3, [pc, #348]	; (800c2f8 <tcp_receive+0x88c>)
 800c19a:	68db      	ldr	r3, [r3, #12]
 800c19c:	b292      	uxth	r2, r2
 800c19e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c1a4:	4b54      	ldr	r3, [pc, #336]	; (800c2f8 <tcp_receive+0x88c>)
 800c1a6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c1a8:	4b53      	ldr	r3, [pc, #332]	; (800c2f8 <tcp_receive+0x88c>)
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	899b      	ldrh	r3, [r3, #12]
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7fa febf 	bl	8006f34 <lwip_htons>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	f003 0302 	and.w	r3, r3, #2
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d005      	beq.n	800c1ce <tcp_receive+0x762>
            inseg.len -= 1;
 800c1c2:	4b4d      	ldr	r3, [pc, #308]	; (800c2f8 <tcp_receive+0x88c>)
 800c1c4:	891b      	ldrh	r3, [r3, #8]
 800c1c6:	3b01      	subs	r3, #1
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	4b4b      	ldr	r3, [pc, #300]	; (800c2f8 <tcp_receive+0x88c>)
 800c1cc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c1ce:	4b4a      	ldr	r3, [pc, #296]	; (800c2f8 <tcp_receive+0x88c>)
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	4a49      	ldr	r2, [pc, #292]	; (800c2f8 <tcp_receive+0x88c>)
 800c1d4:	8912      	ldrh	r2, [r2, #8]
 800c1d6:	4611      	mov	r1, r2
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7fc f91b 	bl	8008414 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c1de:	4b46      	ldr	r3, [pc, #280]	; (800c2f8 <tcp_receive+0x88c>)
 800c1e0:	891c      	ldrh	r4, [r3, #8]
 800c1e2:	4b45      	ldr	r3, [pc, #276]	; (800c2f8 <tcp_receive+0x88c>)
 800c1e4:	68db      	ldr	r3, [r3, #12]
 800c1e6:	899b      	ldrh	r3, [r3, #12]
 800c1e8:	b29b      	uxth	r3, r3
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7fa fea2 	bl	8006f34 <lwip_htons>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	f003 0303 	and.w	r3, r3, #3
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d001      	beq.n	800c200 <tcp_receive+0x794>
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	e000      	b.n	800c202 <tcp_receive+0x796>
 800c200:	2300      	movs	r3, #0
 800c202:	4423      	add	r3, r4
 800c204:	b29a      	uxth	r2, r3
 800c206:	4b3d      	ldr	r3, [pc, #244]	; (800c2fc <tcp_receive+0x890>)
 800c208:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c20a:	4b3c      	ldr	r3, [pc, #240]	; (800c2fc <tcp_receive+0x890>)
 800c20c:	881b      	ldrh	r3, [r3, #0]
 800c20e:	461a      	mov	r2, r3
 800c210:	4b38      	ldr	r3, [pc, #224]	; (800c2f4 <tcp_receive+0x888>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	441a      	add	r2, r3
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c21a:	6879      	ldr	r1, [r7, #4]
 800c21c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c21e:	440b      	add	r3, r1
 800c220:	429a      	cmp	r2, r3
 800c222:	d006      	beq.n	800c232 <tcp_receive+0x7c6>
 800c224:	4b36      	ldr	r3, [pc, #216]	; (800c300 <tcp_receive+0x894>)
 800c226:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800c22a:	4936      	ldr	r1, [pc, #216]	; (800c304 <tcp_receive+0x898>)
 800c22c:	4836      	ldr	r0, [pc, #216]	; (800c308 <tcp_receive+0x89c>)
 800c22e:	f004 fd47 	bl	8010cc0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c236:	2b00      	cmp	r3, #0
 800c238:	f000 80e7 	beq.w	800c40a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c23c:	4b2e      	ldr	r3, [pc, #184]	; (800c2f8 <tcp_receive+0x88c>)
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	899b      	ldrh	r3, [r3, #12]
 800c242:	b29b      	uxth	r3, r3
 800c244:	4618      	mov	r0, r3
 800c246:	f7fa fe75 	bl	8006f34 <lwip_htons>
 800c24a:	4603      	mov	r3, r0
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	f003 0301 	and.w	r3, r3, #1
 800c252:	2b00      	cmp	r3, #0
 800c254:	d010      	beq.n	800c278 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c256:	e00a      	b.n	800c26e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c25c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800c268:	68f8      	ldr	r0, [r7, #12]
 800c26a:	f7fd fcd0 	bl	8009c0e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c272:	2b00      	cmp	r3, #0
 800c274:	d1f0      	bne.n	800c258 <tcp_receive+0x7ec>
 800c276:	e0c8      	b.n	800c40a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c27c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c27e:	e052      	b.n	800c326 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c282:	68db      	ldr	r3, [r3, #12]
 800c284:	899b      	ldrh	r3, [r3, #12]
 800c286:	b29b      	uxth	r3, r3
 800c288:	4618      	mov	r0, r3
 800c28a:	f7fa fe53 	bl	8006f34 <lwip_htons>
 800c28e:	4603      	mov	r3, r0
 800c290:	b2db      	uxtb	r3, r3
 800c292:	f003 0301 	and.w	r3, r3, #1
 800c296:	2b00      	cmp	r3, #0
 800c298:	d03d      	beq.n	800c316 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c29a:	4b17      	ldr	r3, [pc, #92]	; (800c2f8 <tcp_receive+0x88c>)
 800c29c:	68db      	ldr	r3, [r3, #12]
 800c29e:	899b      	ldrh	r3, [r3, #12]
 800c2a0:	b29b      	uxth	r3, r3
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7fa fe46 	bl	8006f34 <lwip_htons>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	b2db      	uxtb	r3, r3
 800c2ac:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d130      	bne.n	800c316 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c2b4:	4b10      	ldr	r3, [pc, #64]	; (800c2f8 <tcp_receive+0x88c>)
 800c2b6:	68db      	ldr	r3, [r3, #12]
 800c2b8:	899b      	ldrh	r3, [r3, #12]
 800c2ba:	b29c      	uxth	r4, r3
 800c2bc:	2001      	movs	r0, #1
 800c2be:	f7fa fe39 	bl	8006f34 <lwip_htons>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	4b0c      	ldr	r3, [pc, #48]	; (800c2f8 <tcp_receive+0x88c>)
 800c2c8:	68db      	ldr	r3, [r3, #12]
 800c2ca:	4322      	orrs	r2, r4
 800c2cc:	b292      	uxth	r2, r2
 800c2ce:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c2d0:	4b09      	ldr	r3, [pc, #36]	; (800c2f8 <tcp_receive+0x88c>)
 800c2d2:	891c      	ldrh	r4, [r3, #8]
 800c2d4:	4b08      	ldr	r3, [pc, #32]	; (800c2f8 <tcp_receive+0x88c>)
 800c2d6:	68db      	ldr	r3, [r3, #12]
 800c2d8:	899b      	ldrh	r3, [r3, #12]
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f7fa fe29 	bl	8006f34 <lwip_htons>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	b2db      	uxtb	r3, r3
 800c2e6:	f003 0303 	and.w	r3, r3, #3
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d00e      	beq.n	800c30c <tcp_receive+0x8a0>
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	e00d      	b.n	800c30e <tcp_receive+0x8a2>
 800c2f2:	bf00      	nop
 800c2f4:	20007f84 	.word	0x20007f84
 800c2f8:	20007f64 	.word	0x20007f64
 800c2fc:	20007f8e 	.word	0x20007f8e
 800c300:	08013080 	.word	0x08013080
 800c304:	08013444 	.word	0x08013444
 800c308:	080130cc 	.word	0x080130cc
 800c30c:	2300      	movs	r3, #0
 800c30e:	4423      	add	r3, r4
 800c310:	b29a      	uxth	r2, r3
 800c312:	4b98      	ldr	r3, [pc, #608]	; (800c574 <tcp_receive+0xb08>)
 800c314:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c318:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c31a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800c320:	6938      	ldr	r0, [r7, #16]
 800c322:	f7fd fc74 	bl	8009c0e <tcp_seg_free>
            while (next &&
 800c326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d00e      	beq.n	800c34a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c32c:	4b91      	ldr	r3, [pc, #580]	; (800c574 <tcp_receive+0xb08>)
 800c32e:	881b      	ldrh	r3, [r3, #0]
 800c330:	461a      	mov	r2, r3
 800c332:	4b91      	ldr	r3, [pc, #580]	; (800c578 <tcp_receive+0xb0c>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	441a      	add	r2, r3
 800c338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c33a:	68db      	ldr	r3, [r3, #12]
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c340:	8909      	ldrh	r1, [r1, #8]
 800c342:	440b      	add	r3, r1
 800c344:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c346:	2b00      	cmp	r3, #0
 800c348:	da9a      	bge.n	800c280 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c34a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d059      	beq.n	800c404 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800c350:	4b88      	ldr	r3, [pc, #544]	; (800c574 <tcp_receive+0xb08>)
 800c352:	881b      	ldrh	r3, [r3, #0]
 800c354:	461a      	mov	r2, r3
 800c356:	4b88      	ldr	r3, [pc, #544]	; (800c578 <tcp_receive+0xb0c>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	441a      	add	r2, r3
 800c35c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c35e:	68db      	ldr	r3, [r3, #12]
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c364:	2b00      	cmp	r3, #0
 800c366:	dd4d      	ble.n	800c404 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c36a:	68db      	ldr	r3, [r3, #12]
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	b29a      	uxth	r2, r3
 800c370:	4b81      	ldr	r3, [pc, #516]	; (800c578 <tcp_receive+0xb0c>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	b29b      	uxth	r3, r3
 800c376:	1ad3      	subs	r3, r2, r3
 800c378:	b29a      	uxth	r2, r3
 800c37a:	4b80      	ldr	r3, [pc, #512]	; (800c57c <tcp_receive+0xb10>)
 800c37c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c37e:	4b7f      	ldr	r3, [pc, #508]	; (800c57c <tcp_receive+0xb10>)
 800c380:	68db      	ldr	r3, [r3, #12]
 800c382:	899b      	ldrh	r3, [r3, #12]
 800c384:	b29b      	uxth	r3, r3
 800c386:	4618      	mov	r0, r3
 800c388:	f7fa fdd4 	bl	8006f34 <lwip_htons>
 800c38c:	4603      	mov	r3, r0
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	f003 0302 	and.w	r3, r3, #2
 800c394:	2b00      	cmp	r3, #0
 800c396:	d005      	beq.n	800c3a4 <tcp_receive+0x938>
                inseg.len -= 1;
 800c398:	4b78      	ldr	r3, [pc, #480]	; (800c57c <tcp_receive+0xb10>)
 800c39a:	891b      	ldrh	r3, [r3, #8]
 800c39c:	3b01      	subs	r3, #1
 800c39e:	b29a      	uxth	r2, r3
 800c3a0:	4b76      	ldr	r3, [pc, #472]	; (800c57c <tcp_receive+0xb10>)
 800c3a2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c3a4:	4b75      	ldr	r3, [pc, #468]	; (800c57c <tcp_receive+0xb10>)
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	4a74      	ldr	r2, [pc, #464]	; (800c57c <tcp_receive+0xb10>)
 800c3aa:	8912      	ldrh	r2, [r2, #8]
 800c3ac:	4611      	mov	r1, r2
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7fc f830 	bl	8008414 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c3b4:	4b71      	ldr	r3, [pc, #452]	; (800c57c <tcp_receive+0xb10>)
 800c3b6:	891c      	ldrh	r4, [r3, #8]
 800c3b8:	4b70      	ldr	r3, [pc, #448]	; (800c57c <tcp_receive+0xb10>)
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	899b      	ldrh	r3, [r3, #12]
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7fa fdb7 	bl	8006f34 <lwip_htons>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	f003 0303 	and.w	r3, r3, #3
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d001      	beq.n	800c3d6 <tcp_receive+0x96a>
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	e000      	b.n	800c3d8 <tcp_receive+0x96c>
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	4423      	add	r3, r4
 800c3da:	b29a      	uxth	r2, r3
 800c3dc:	4b65      	ldr	r3, [pc, #404]	; (800c574 <tcp_receive+0xb08>)
 800c3de:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c3e0:	4b64      	ldr	r3, [pc, #400]	; (800c574 <tcp_receive+0xb08>)
 800c3e2:	881b      	ldrh	r3, [r3, #0]
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	4b64      	ldr	r3, [pc, #400]	; (800c578 <tcp_receive+0xb0c>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	441a      	add	r2, r3
 800c3ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	d006      	beq.n	800c404 <tcp_receive+0x998>
 800c3f6:	4b62      	ldr	r3, [pc, #392]	; (800c580 <tcp_receive+0xb14>)
 800c3f8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800c3fc:	4961      	ldr	r1, [pc, #388]	; (800c584 <tcp_receive+0xb18>)
 800c3fe:	4862      	ldr	r0, [pc, #392]	; (800c588 <tcp_receive+0xb1c>)
 800c400:	f004 fc5e 	bl	8010cc0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c408:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c40a:	4b5a      	ldr	r3, [pc, #360]	; (800c574 <tcp_receive+0xb08>)
 800c40c:	881b      	ldrh	r3, [r3, #0]
 800c40e:	461a      	mov	r2, r3
 800c410:	4b59      	ldr	r3, [pc, #356]	; (800c578 <tcp_receive+0xb0c>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	441a      	add	r2, r3
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c41e:	4b55      	ldr	r3, [pc, #340]	; (800c574 <tcp_receive+0xb08>)
 800c420:	881b      	ldrh	r3, [r3, #0]
 800c422:	429a      	cmp	r2, r3
 800c424:	d206      	bcs.n	800c434 <tcp_receive+0x9c8>
 800c426:	4b56      	ldr	r3, [pc, #344]	; (800c580 <tcp_receive+0xb14>)
 800c428:	f240 6207 	movw	r2, #1543	; 0x607
 800c42c:	4957      	ldr	r1, [pc, #348]	; (800c58c <tcp_receive+0xb20>)
 800c42e:	4856      	ldr	r0, [pc, #344]	; (800c588 <tcp_receive+0xb1c>)
 800c430:	f004 fc46 	bl	8010cc0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c438:	4b4e      	ldr	r3, [pc, #312]	; (800c574 <tcp_receive+0xb08>)
 800c43a:	881b      	ldrh	r3, [r3, #0]
 800c43c:	1ad3      	subs	r3, r2, r3
 800c43e:	b29a      	uxth	r2, r3
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f7fc ff03 	bl	8009250 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c44a:	4b4c      	ldr	r3, [pc, #304]	; (800c57c <tcp_receive+0xb10>)
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	891b      	ldrh	r3, [r3, #8]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d006      	beq.n	800c462 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800c454:	4b49      	ldr	r3, [pc, #292]	; (800c57c <tcp_receive+0xb10>)
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	4a4d      	ldr	r2, [pc, #308]	; (800c590 <tcp_receive+0xb24>)
 800c45a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c45c:	4b47      	ldr	r3, [pc, #284]	; (800c57c <tcp_receive+0xb10>)
 800c45e:	2200      	movs	r2, #0
 800c460:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c462:	4b46      	ldr	r3, [pc, #280]	; (800c57c <tcp_receive+0xb10>)
 800c464:	68db      	ldr	r3, [r3, #12]
 800c466:	899b      	ldrh	r3, [r3, #12]
 800c468:	b29b      	uxth	r3, r3
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7fa fd62 	bl	8006f34 <lwip_htons>
 800c470:	4603      	mov	r3, r0
 800c472:	b2db      	uxtb	r3, r3
 800c474:	f003 0301 	and.w	r3, r3, #1
 800c478:	2b00      	cmp	r3, #0
 800c47a:	f000 80b8 	beq.w	800c5ee <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c47e:	4b45      	ldr	r3, [pc, #276]	; (800c594 <tcp_receive+0xb28>)
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	f043 0320 	orr.w	r3, r3, #32
 800c486:	b2da      	uxtb	r2, r3
 800c488:	4b42      	ldr	r3, [pc, #264]	; (800c594 <tcp_receive+0xb28>)
 800c48a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c48c:	e0af      	b.n	800c5ee <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c492:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	4a36      	ldr	r2, [pc, #216]	; (800c578 <tcp_receive+0xb0c>)
 800c49e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	891b      	ldrh	r3, [r3, #8]
 800c4a4:	461c      	mov	r4, r3
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	68db      	ldr	r3, [r3, #12]
 800c4aa:	899b      	ldrh	r3, [r3, #12]
 800c4ac:	b29b      	uxth	r3, r3
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7fa fd40 	bl	8006f34 <lwip_htons>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	f003 0303 	and.w	r3, r3, #3
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d001      	beq.n	800c4c4 <tcp_receive+0xa58>
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	e000      	b.n	800c4c6 <tcp_receive+0xa5a>
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	191a      	adds	r2, r3, r4
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4cc:	441a      	add	r2, r3
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4d6:	461c      	mov	r4, r3
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	891b      	ldrh	r3, [r3, #8]
 800c4dc:	461d      	mov	r5, r3
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	68db      	ldr	r3, [r3, #12]
 800c4e2:	899b      	ldrh	r3, [r3, #12]
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7fa fd24 	bl	8006f34 <lwip_htons>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	b2db      	uxtb	r3, r3
 800c4f0:	f003 0303 	and.w	r3, r3, #3
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d001      	beq.n	800c4fc <tcp_receive+0xa90>
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	e000      	b.n	800c4fe <tcp_receive+0xa92>
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	442b      	add	r3, r5
 800c500:	429c      	cmp	r4, r3
 800c502:	d206      	bcs.n	800c512 <tcp_receive+0xaa6>
 800c504:	4b1e      	ldr	r3, [pc, #120]	; (800c580 <tcp_receive+0xb14>)
 800c506:	f240 622b 	movw	r2, #1579	; 0x62b
 800c50a:	4923      	ldr	r1, [pc, #140]	; (800c598 <tcp_receive+0xb2c>)
 800c50c:	481e      	ldr	r0, [pc, #120]	; (800c588 <tcp_receive+0xb1c>)
 800c50e:	f004 fbd7 	bl	8010cc0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	891b      	ldrh	r3, [r3, #8]
 800c516:	461c      	mov	r4, r3
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	68db      	ldr	r3, [r3, #12]
 800c51c:	899b      	ldrh	r3, [r3, #12]
 800c51e:	b29b      	uxth	r3, r3
 800c520:	4618      	mov	r0, r3
 800c522:	f7fa fd07 	bl	8006f34 <lwip_htons>
 800c526:	4603      	mov	r3, r0
 800c528:	b2db      	uxtb	r3, r3
 800c52a:	f003 0303 	and.w	r3, r3, #3
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d001      	beq.n	800c536 <tcp_receive+0xaca>
 800c532:	2301      	movs	r3, #1
 800c534:	e000      	b.n	800c538 <tcp_receive+0xacc>
 800c536:	2300      	movs	r3, #0
 800c538:	1919      	adds	r1, r3, r4
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c53e:	b28b      	uxth	r3, r1
 800c540:	1ad3      	subs	r3, r2, r3
 800c542:	b29a      	uxth	r2, r3
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f7fc fe81 	bl	8009250 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	891b      	ldrh	r3, [r3, #8]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d028      	beq.n	800c5aa <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c558:	4b0d      	ldr	r3, [pc, #52]	; (800c590 <tcp_receive+0xb24>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d01d      	beq.n	800c59c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800c560:	4b0b      	ldr	r3, [pc, #44]	; (800c590 <tcp_receive+0xb24>)
 800c562:	681a      	ldr	r2, [r3, #0]
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	4619      	mov	r1, r3
 800c56a:	4610      	mov	r0, r2
 800c56c:	f7fc f99a 	bl	80088a4 <pbuf_cat>
 800c570:	e018      	b.n	800c5a4 <tcp_receive+0xb38>
 800c572:	bf00      	nop
 800c574:	20007f8e 	.word	0x20007f8e
 800c578:	20007f84 	.word	0x20007f84
 800c57c:	20007f64 	.word	0x20007f64
 800c580:	08013080 	.word	0x08013080
 800c584:	0801347c 	.word	0x0801347c
 800c588:	080130cc 	.word	0x080130cc
 800c58c:	080134b8 	.word	0x080134b8
 800c590:	20007f94 	.word	0x20007f94
 800c594:	20007f91 	.word	0x20007f91
 800c598:	080134d8 	.word	0x080134d8
            } else {
              recv_data = cseg->p;
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	685b      	ldr	r3, [r3, #4]
 800c5a0:	4a70      	ldr	r2, [pc, #448]	; (800c764 <tcp_receive+0xcf8>)
 800c5a2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	899b      	ldrh	r3, [r3, #12]
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7fa fcbe 	bl	8006f34 <lwip_htons>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	f003 0301 	and.w	r3, r3, #1
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d00d      	beq.n	800c5e0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c5c4:	4b68      	ldr	r3, [pc, #416]	; (800c768 <tcp_receive+0xcfc>)
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	f043 0320 	orr.w	r3, r3, #32
 800c5cc:	b2da      	uxtb	r2, r3
 800c5ce:	4b66      	ldr	r3, [pc, #408]	; (800c768 <tcp_receive+0xcfc>)
 800c5d0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	7d1b      	ldrb	r3, [r3, #20]
 800c5d6:	2b04      	cmp	r3, #4
 800c5d8:	d102      	bne.n	800c5e0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2207      	movs	r2, #7
 800c5de:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	681a      	ldr	r2, [r3, #0]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800c5e8:	68b8      	ldr	r0, [r7, #8]
 800c5ea:	f7fd fb10 	bl	8009c0e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d008      	beq.n	800c608 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5fa:	68db      	ldr	r3, [r3, #12]
 800c5fc:	685a      	ldr	r2, [r3, #4]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800c602:	429a      	cmp	r2, r3
 800c604:	f43f af43 	beq.w	800c48e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	8b5b      	ldrh	r3, [r3, #26]
 800c60c:	f003 0301 	and.w	r3, r3, #1
 800c610:	2b00      	cmp	r3, #0
 800c612:	d00e      	beq.n	800c632 <tcp_receive+0xbc6>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	8b5b      	ldrh	r3, [r3, #26]
 800c618:	f023 0301 	bic.w	r3, r3, #1
 800c61c:	b29a      	uxth	r2, r3
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	835a      	strh	r2, [r3, #26]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	8b5b      	ldrh	r3, [r3, #26]
 800c626:	f043 0302 	orr.w	r3, r3, #2
 800c62a:	b29a      	uxth	r2, r3
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c630:	e188      	b.n	800c944 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	8b5b      	ldrh	r3, [r3, #26]
 800c636:	f043 0301 	orr.w	r3, r3, #1
 800c63a:	b29a      	uxth	r2, r3
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c640:	e180      	b.n	800c944 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c646:	2b00      	cmp	r3, #0
 800c648:	d106      	bne.n	800c658 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c64a:	4848      	ldr	r0, [pc, #288]	; (800c76c <tcp_receive+0xd00>)
 800c64c:	f7fd fafa 	bl	8009c44 <tcp_seg_copy>
 800c650:	4602      	mov	r2, r0
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	675a      	str	r2, [r3, #116]	; 0x74
 800c656:	e16d      	b.n	800c934 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c658:	2300      	movs	r3, #0
 800c65a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c660:	63bb      	str	r3, [r7, #56]	; 0x38
 800c662:	e157      	b.n	800c914 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800c664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c666:	68db      	ldr	r3, [r3, #12]
 800c668:	685a      	ldr	r2, [r3, #4]
 800c66a:	4b41      	ldr	r3, [pc, #260]	; (800c770 <tcp_receive+0xd04>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d11d      	bne.n	800c6ae <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c672:	4b3e      	ldr	r3, [pc, #248]	; (800c76c <tcp_receive+0xd00>)
 800c674:	891a      	ldrh	r2, [r3, #8]
 800c676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c678:	891b      	ldrh	r3, [r3, #8]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	f240 814f 	bls.w	800c91e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c680:	483a      	ldr	r0, [pc, #232]	; (800c76c <tcp_receive+0xd00>)
 800c682:	f7fd fadf 	bl	8009c44 <tcp_seg_copy>
 800c686:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	f000 8149 	beq.w	800c922 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800c690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c692:	2b00      	cmp	r3, #0
 800c694:	d003      	beq.n	800c69e <tcp_receive+0xc32>
                    prev->next = cseg;
 800c696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c698:	697a      	ldr	r2, [r7, #20]
 800c69a:	601a      	str	r2, [r3, #0]
 800c69c:	e002      	b.n	800c6a4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	697a      	ldr	r2, [r7, #20]
 800c6a2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c6a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c6a6:	6978      	ldr	r0, [r7, #20]
 800c6a8:	f7ff f8dc 	bl	800b864 <tcp_oos_insert_segment>
                }
                break;
 800c6ac:	e139      	b.n	800c922 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d117      	bne.n	800c6e4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c6b4:	4b2e      	ldr	r3, [pc, #184]	; (800c770 <tcp_receive+0xd04>)
 800c6b6:	681a      	ldr	r2, [r3, #0]
 800c6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ba:	68db      	ldr	r3, [r3, #12]
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	1ad3      	subs	r3, r2, r3
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	da57      	bge.n	800c774 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c6c4:	4829      	ldr	r0, [pc, #164]	; (800c76c <tcp_receive+0xd00>)
 800c6c6:	f7fd fabd 	bl	8009c44 <tcp_seg_copy>
 800c6ca:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c6cc:	69bb      	ldr	r3, [r7, #24]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	f000 8129 	beq.w	800c926 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	69ba      	ldr	r2, [r7, #24]
 800c6d8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c6da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c6dc:	69b8      	ldr	r0, [r7, #24]
 800c6de:	f7ff f8c1 	bl	800b864 <tcp_oos_insert_segment>
                  }
                  break;
 800c6e2:	e120      	b.n	800c926 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c6e4:	4b22      	ldr	r3, [pc, #136]	; (800c770 <tcp_receive+0xd04>)
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ea:	68db      	ldr	r3, [r3, #12]
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	1ad3      	subs	r3, r2, r3
 800c6f0:	3b01      	subs	r3, #1
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	db3e      	blt.n	800c774 <tcp_receive+0xd08>
 800c6f6:	4b1e      	ldr	r3, [pc, #120]	; (800c770 <tcp_receive+0xd04>)
 800c6f8:	681a      	ldr	r2, [r3, #0]
 800c6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6fc:	68db      	ldr	r3, [r3, #12]
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	1ad3      	subs	r3, r2, r3
 800c702:	3301      	adds	r3, #1
 800c704:	2b00      	cmp	r3, #0
 800c706:	dc35      	bgt.n	800c774 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c708:	4818      	ldr	r0, [pc, #96]	; (800c76c <tcp_receive+0xd00>)
 800c70a:	f7fd fa9b 	bl	8009c44 <tcp_seg_copy>
 800c70e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c710:	69fb      	ldr	r3, [r7, #28]
 800c712:	2b00      	cmp	r3, #0
 800c714:	f000 8109 	beq.w	800c92a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c71a:	68db      	ldr	r3, [r3, #12]
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c720:	8912      	ldrh	r2, [r2, #8]
 800c722:	441a      	add	r2, r3
 800c724:	4b12      	ldr	r3, [pc, #72]	; (800c770 <tcp_receive+0xd04>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	1ad3      	subs	r3, r2, r3
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	dd12      	ble.n	800c754 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c72e:	4b10      	ldr	r3, [pc, #64]	; (800c770 <tcp_receive+0xd04>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	b29a      	uxth	r2, r3
 800c734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c736:	68db      	ldr	r3, [r3, #12]
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	1ad3      	subs	r3, r2, r3
 800c73e:	b29a      	uxth	r2, r3
 800c740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c742:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c746:	685a      	ldr	r2, [r3, #4]
 800c748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c74a:	891b      	ldrh	r3, [r3, #8]
 800c74c:	4619      	mov	r1, r3
 800c74e:	4610      	mov	r0, r2
 800c750:	f7fb fe60 	bl	8008414 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c756:	69fa      	ldr	r2, [r7, #28]
 800c758:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c75a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c75c:	69f8      	ldr	r0, [r7, #28]
 800c75e:	f7ff f881 	bl	800b864 <tcp_oos_insert_segment>
                  }
                  break;
 800c762:	e0e2      	b.n	800c92a <tcp_receive+0xebe>
 800c764:	20007f94 	.word	0x20007f94
 800c768:	20007f91 	.word	0x20007f91
 800c76c:	20007f64 	.word	0x20007f64
 800c770:	20007f84 	.word	0x20007f84
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c776:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	f040 80c6 	bne.w	800c90e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c782:	4b80      	ldr	r3, [pc, #512]	; (800c984 <tcp_receive+0xf18>)
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	685b      	ldr	r3, [r3, #4]
 800c78c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c78e:	2b00      	cmp	r3, #0
 800c790:	f340 80bd 	ble.w	800c90e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c796:	68db      	ldr	r3, [r3, #12]
 800c798:	899b      	ldrh	r3, [r3, #12]
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7fa fbc9 	bl	8006f34 <lwip_htons>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	f003 0301 	and.w	r3, r3, #1
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	f040 80bf 	bne.w	800c92e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c7b0:	4875      	ldr	r0, [pc, #468]	; (800c988 <tcp_receive+0xf1c>)
 800c7b2:	f7fd fa47 	bl	8009c44 <tcp_seg_copy>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ba:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	f000 80b6 	beq.w	800c932 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c8:	68db      	ldr	r3, [r3, #12]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7ce:	8912      	ldrh	r2, [r2, #8]
 800c7d0:	441a      	add	r2, r3
 800c7d2:	4b6c      	ldr	r3, [pc, #432]	; (800c984 <tcp_receive+0xf18>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	1ad3      	subs	r3, r2, r3
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	dd12      	ble.n	800c802 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c7dc:	4b69      	ldr	r3, [pc, #420]	; (800c984 <tcp_receive+0xf18>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	b29a      	uxth	r2, r3
 800c7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e4:	68db      	ldr	r3, [r3, #12]
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	1ad3      	subs	r3, r2, r3
 800c7ec:	b29a      	uxth	r2, r3
 800c7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f4:	685a      	ldr	r2, [r3, #4]
 800c7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f8:	891b      	ldrh	r3, [r3, #8]
 800c7fa:	4619      	mov	r1, r3
 800c7fc:	4610      	mov	r0, r2
 800c7fe:	f7fb fe09 	bl	8008414 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c802:	4b62      	ldr	r3, [pc, #392]	; (800c98c <tcp_receive+0xf20>)
 800c804:	881b      	ldrh	r3, [r3, #0]
 800c806:	461a      	mov	r2, r3
 800c808:	4b5e      	ldr	r3, [pc, #376]	; (800c984 <tcp_receive+0xf18>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	441a      	add	r2, r3
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c812:	6879      	ldr	r1, [r7, #4]
 800c814:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c816:	440b      	add	r3, r1
 800c818:	1ad3      	subs	r3, r2, r3
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	f340 8089 	ble.w	800c932 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	68db      	ldr	r3, [r3, #12]
 800c826:	899b      	ldrh	r3, [r3, #12]
 800c828:	b29b      	uxth	r3, r3
 800c82a:	4618      	mov	r0, r3
 800c82c:	f7fa fb82 	bl	8006f34 <lwip_htons>
 800c830:	4603      	mov	r3, r0
 800c832:	b2db      	uxtb	r3, r3
 800c834:	f003 0301 	and.w	r3, r3, #1
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d022      	beq.n	800c882 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	68db      	ldr	r3, [r3, #12]
 800c842:	899b      	ldrh	r3, [r3, #12]
 800c844:	b29b      	uxth	r3, r3
 800c846:	b21b      	sxth	r3, r3
 800c848:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c84c:	b21c      	sxth	r4, r3
 800c84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	899b      	ldrh	r3, [r3, #12]
 800c856:	b29b      	uxth	r3, r3
 800c858:	4618      	mov	r0, r3
 800c85a:	f7fa fb6b 	bl	8006f34 <lwip_htons>
 800c85e:	4603      	mov	r3, r0
 800c860:	b2db      	uxtb	r3, r3
 800c862:	b29b      	uxth	r3, r3
 800c864:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c868:	b29b      	uxth	r3, r3
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7fa fb62 	bl	8006f34 <lwip_htons>
 800c870:	4603      	mov	r3, r0
 800c872:	b21b      	sxth	r3, r3
 800c874:	4323      	orrs	r3, r4
 800c876:	b21a      	sxth	r2, r3
 800c878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	68db      	ldr	r3, [r3, #12]
 800c87e:	b292      	uxth	r2, r2
 800c880:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c886:	b29a      	uxth	r2, r3
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c88c:	4413      	add	r3, r2
 800c88e:	b299      	uxth	r1, r3
 800c890:	4b3c      	ldr	r3, [pc, #240]	; (800c984 <tcp_receive+0xf18>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	b29a      	uxth	r2, r3
 800c896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	1a8a      	subs	r2, r1, r2
 800c89c:	b292      	uxth	r2, r2
 800c89e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	685a      	ldr	r2, [r3, #4]
 800c8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	891b      	ldrh	r3, [r3, #8]
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	4610      	mov	r0, r2
 800c8b0:	f7fb fdb0 	bl	8008414 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	891c      	ldrh	r4, [r3, #8]
 800c8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	899b      	ldrh	r3, [r3, #12]
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7fa fb35 	bl	8006f34 <lwip_htons>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	f003 0303 	and.w	r3, r3, #3
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d001      	beq.n	800c8da <tcp_receive+0xe6e>
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	e000      	b.n	800c8dc <tcp_receive+0xe70>
 800c8da:	2300      	movs	r3, #0
 800c8dc:	4423      	add	r3, r4
 800c8de:	b29a      	uxth	r2, r3
 800c8e0:	4b2a      	ldr	r3, [pc, #168]	; (800c98c <tcp_receive+0xf20>)
 800c8e2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c8e4:	4b29      	ldr	r3, [pc, #164]	; (800c98c <tcp_receive+0xf20>)
 800c8e6:	881b      	ldrh	r3, [r3, #0]
 800c8e8:	461a      	mov	r2, r3
 800c8ea:	4b26      	ldr	r3, [pc, #152]	; (800c984 <tcp_receive+0xf18>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	441a      	add	r2, r3
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f4:	6879      	ldr	r1, [r7, #4]
 800c8f6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c8f8:	440b      	add	r3, r1
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d019      	beq.n	800c932 <tcp_receive+0xec6>
 800c8fe:	4b24      	ldr	r3, [pc, #144]	; (800c990 <tcp_receive+0xf24>)
 800c900:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800c904:	4923      	ldr	r1, [pc, #140]	; (800c994 <tcp_receive+0xf28>)
 800c906:	4824      	ldr	r0, [pc, #144]	; (800c998 <tcp_receive+0xf2c>)
 800c908:	f004 f9da 	bl	8010cc0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c90c:	e011      	b.n	800c932 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	63bb      	str	r3, [r7, #56]	; 0x38
 800c914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c916:	2b00      	cmp	r3, #0
 800c918:	f47f aea4 	bne.w	800c664 <tcp_receive+0xbf8>
 800c91c:	e00a      	b.n	800c934 <tcp_receive+0xec8>
                break;
 800c91e:	bf00      	nop
 800c920:	e008      	b.n	800c934 <tcp_receive+0xec8>
                break;
 800c922:	bf00      	nop
 800c924:	e006      	b.n	800c934 <tcp_receive+0xec8>
                  break;
 800c926:	bf00      	nop
 800c928:	e004      	b.n	800c934 <tcp_receive+0xec8>
                  break;
 800c92a:	bf00      	nop
 800c92c:	e002      	b.n	800c934 <tcp_receive+0xec8>
                  break;
 800c92e:	bf00      	nop
 800c930:	e000      	b.n	800c934 <tcp_receive+0xec8>
                break;
 800c932:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f001 fa39 	bl	800ddac <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c93a:	e003      	b.n	800c944 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f001 fa35 	bl	800ddac <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c942:	e01a      	b.n	800c97a <tcp_receive+0xf0e>
 800c944:	e019      	b.n	800c97a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c946:	4b0f      	ldr	r3, [pc, #60]	; (800c984 <tcp_receive+0xf18>)
 800c948:	681a      	ldr	r2, [r3, #0]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c94e:	1ad3      	subs	r3, r2, r3
 800c950:	2b00      	cmp	r3, #0
 800c952:	db0a      	blt.n	800c96a <tcp_receive+0xefe>
 800c954:	4b0b      	ldr	r3, [pc, #44]	; (800c984 <tcp_receive+0xf18>)
 800c956:	681a      	ldr	r2, [r3, #0]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c95c:	6879      	ldr	r1, [r7, #4]
 800c95e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c960:	440b      	add	r3, r1
 800c962:	1ad3      	subs	r3, r2, r3
 800c964:	3301      	adds	r3, #1
 800c966:	2b00      	cmp	r3, #0
 800c968:	dd07      	ble.n	800c97a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	8b5b      	ldrh	r3, [r3, #26]
 800c96e:	f043 0302 	orr.w	r3, r3, #2
 800c972:	b29a      	uxth	r2, r3
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c978:	e7ff      	b.n	800c97a <tcp_receive+0xf0e>
 800c97a:	bf00      	nop
 800c97c:	3750      	adds	r7, #80	; 0x50
 800c97e:	46bd      	mov	sp, r7
 800c980:	bdb0      	pop	{r4, r5, r7, pc}
 800c982:	bf00      	nop
 800c984:	20007f84 	.word	0x20007f84
 800c988:	20007f64 	.word	0x20007f64
 800c98c:	20007f8e 	.word	0x20007f8e
 800c990:	08013080 	.word	0x08013080
 800c994:	08013444 	.word	0x08013444
 800c998:	080130cc 	.word	0x080130cc

0800c99c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c9a2:	4b15      	ldr	r3, [pc, #84]	; (800c9f8 <tcp_get_next_optbyte+0x5c>)
 800c9a4:	881b      	ldrh	r3, [r3, #0]
 800c9a6:	1c5a      	adds	r2, r3, #1
 800c9a8:	b291      	uxth	r1, r2
 800c9aa:	4a13      	ldr	r2, [pc, #76]	; (800c9f8 <tcp_get_next_optbyte+0x5c>)
 800c9ac:	8011      	strh	r1, [r2, #0]
 800c9ae:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c9b0:	4b12      	ldr	r3, [pc, #72]	; (800c9fc <tcp_get_next_optbyte+0x60>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d004      	beq.n	800c9c2 <tcp_get_next_optbyte+0x26>
 800c9b8:	4b11      	ldr	r3, [pc, #68]	; (800ca00 <tcp_get_next_optbyte+0x64>)
 800c9ba:	881b      	ldrh	r3, [r3, #0]
 800c9bc:	88fa      	ldrh	r2, [r7, #6]
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d208      	bcs.n	800c9d4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c9c2:	4b10      	ldr	r3, [pc, #64]	; (800ca04 <tcp_get_next_optbyte+0x68>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	3314      	adds	r3, #20
 800c9c8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c9ca:	88fb      	ldrh	r3, [r7, #6]
 800c9cc:	683a      	ldr	r2, [r7, #0]
 800c9ce:	4413      	add	r3, r2
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	e00b      	b.n	800c9ec <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c9d4:	88fb      	ldrh	r3, [r7, #6]
 800c9d6:	b2da      	uxtb	r2, r3
 800c9d8:	4b09      	ldr	r3, [pc, #36]	; (800ca00 <tcp_get_next_optbyte+0x64>)
 800c9da:	881b      	ldrh	r3, [r3, #0]
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	1ad3      	subs	r3, r2, r3
 800c9e0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c9e2:	4b06      	ldr	r3, [pc, #24]	; (800c9fc <tcp_get_next_optbyte+0x60>)
 800c9e4:	681a      	ldr	r2, [r3, #0]
 800c9e6:	797b      	ldrb	r3, [r7, #5]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	370c      	adds	r7, #12
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr
 800c9f8:	20007f80 	.word	0x20007f80
 800c9fc:	20007f7c 	.word	0x20007f7c
 800ca00:	20007f7a 	.word	0x20007f7a
 800ca04:	20007f74 	.word	0x20007f74

0800ca08 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b084      	sub	sp, #16
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d106      	bne.n	800ca24 <tcp_parseopt+0x1c>
 800ca16:	4b32      	ldr	r3, [pc, #200]	; (800cae0 <tcp_parseopt+0xd8>)
 800ca18:	f240 727d 	movw	r2, #1917	; 0x77d
 800ca1c:	4931      	ldr	r1, [pc, #196]	; (800cae4 <tcp_parseopt+0xdc>)
 800ca1e:	4832      	ldr	r0, [pc, #200]	; (800cae8 <tcp_parseopt+0xe0>)
 800ca20:	f004 f94e 	bl	8010cc0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ca24:	4b31      	ldr	r3, [pc, #196]	; (800caec <tcp_parseopt+0xe4>)
 800ca26:	881b      	ldrh	r3, [r3, #0]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d055      	beq.n	800cad8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ca2c:	4b30      	ldr	r3, [pc, #192]	; (800caf0 <tcp_parseopt+0xe8>)
 800ca2e:	2200      	movs	r2, #0
 800ca30:	801a      	strh	r2, [r3, #0]
 800ca32:	e045      	b.n	800cac0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800ca34:	f7ff ffb2 	bl	800c99c <tcp_get_next_optbyte>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ca3c:	7bfb      	ldrb	r3, [r7, #15]
 800ca3e:	2b02      	cmp	r3, #2
 800ca40:	d006      	beq.n	800ca50 <tcp_parseopt+0x48>
 800ca42:	2b02      	cmp	r3, #2
 800ca44:	dc2b      	bgt.n	800ca9e <tcp_parseopt+0x96>
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d041      	beq.n	800cace <tcp_parseopt+0xc6>
 800ca4a:	2b01      	cmp	r3, #1
 800ca4c:	d127      	bne.n	800ca9e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800ca4e:	e037      	b.n	800cac0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ca50:	f7ff ffa4 	bl	800c99c <tcp_get_next_optbyte>
 800ca54:	4603      	mov	r3, r0
 800ca56:	2b04      	cmp	r3, #4
 800ca58:	d13b      	bne.n	800cad2 <tcp_parseopt+0xca>
 800ca5a:	4b25      	ldr	r3, [pc, #148]	; (800caf0 <tcp_parseopt+0xe8>)
 800ca5c:	881b      	ldrh	r3, [r3, #0]
 800ca5e:	3301      	adds	r3, #1
 800ca60:	4a22      	ldr	r2, [pc, #136]	; (800caec <tcp_parseopt+0xe4>)
 800ca62:	8812      	ldrh	r2, [r2, #0]
 800ca64:	4293      	cmp	r3, r2
 800ca66:	da34      	bge.n	800cad2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ca68:	f7ff ff98 	bl	800c99c <tcp_get_next_optbyte>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	b29b      	uxth	r3, r3
 800ca70:	021b      	lsls	r3, r3, #8
 800ca72:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ca74:	f7ff ff92 	bl	800c99c <tcp_get_next_optbyte>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	b29a      	uxth	r2, r3
 800ca7c:	89bb      	ldrh	r3, [r7, #12]
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ca82:	89bb      	ldrh	r3, [r7, #12]
 800ca84:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ca88:	d804      	bhi.n	800ca94 <tcp_parseopt+0x8c>
 800ca8a:	89bb      	ldrh	r3, [r7, #12]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d001      	beq.n	800ca94 <tcp_parseopt+0x8c>
 800ca90:	89ba      	ldrh	r2, [r7, #12]
 800ca92:	e001      	b.n	800ca98 <tcp_parseopt+0x90>
 800ca94:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800ca9c:	e010      	b.n	800cac0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ca9e:	f7ff ff7d 	bl	800c99c <tcp_get_next_optbyte>
 800caa2:	4603      	mov	r3, r0
 800caa4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800caa6:	7afb      	ldrb	r3, [r7, #11]
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d914      	bls.n	800cad6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800caac:	7afb      	ldrb	r3, [r7, #11]
 800caae:	b29a      	uxth	r2, r3
 800cab0:	4b0f      	ldr	r3, [pc, #60]	; (800caf0 <tcp_parseopt+0xe8>)
 800cab2:	881b      	ldrh	r3, [r3, #0]
 800cab4:	4413      	add	r3, r2
 800cab6:	b29b      	uxth	r3, r3
 800cab8:	3b02      	subs	r3, #2
 800caba:	b29a      	uxth	r2, r3
 800cabc:	4b0c      	ldr	r3, [pc, #48]	; (800caf0 <tcp_parseopt+0xe8>)
 800cabe:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cac0:	4b0b      	ldr	r3, [pc, #44]	; (800caf0 <tcp_parseopt+0xe8>)
 800cac2:	881a      	ldrh	r2, [r3, #0]
 800cac4:	4b09      	ldr	r3, [pc, #36]	; (800caec <tcp_parseopt+0xe4>)
 800cac6:	881b      	ldrh	r3, [r3, #0]
 800cac8:	429a      	cmp	r2, r3
 800caca:	d3b3      	bcc.n	800ca34 <tcp_parseopt+0x2c>
 800cacc:	e004      	b.n	800cad8 <tcp_parseopt+0xd0>
          return;
 800cace:	bf00      	nop
 800cad0:	e002      	b.n	800cad8 <tcp_parseopt+0xd0>
            return;
 800cad2:	bf00      	nop
 800cad4:	e000      	b.n	800cad8 <tcp_parseopt+0xd0>
            return;
 800cad6:	bf00      	nop
      }
    }
  }
}
 800cad8:	3710      	adds	r7, #16
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	08013080 	.word	0x08013080
 800cae4:	08013500 	.word	0x08013500
 800cae8:	080130cc 	.word	0x080130cc
 800caec:	20007f78 	.word	0x20007f78
 800caf0:	20007f80 	.word	0x20007f80

0800caf4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800caf4:	b480      	push	{r7}
 800caf6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800caf8:	4b05      	ldr	r3, [pc, #20]	; (800cb10 <tcp_trigger_input_pcb_close+0x1c>)
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	f043 0310 	orr.w	r3, r3, #16
 800cb00:	b2da      	uxtb	r2, r3
 800cb02:	4b03      	ldr	r3, [pc, #12]	; (800cb10 <tcp_trigger_input_pcb_close+0x1c>)
 800cb04:	701a      	strb	r2, [r3, #0]
}
 800cb06:	bf00      	nop
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr
 800cb10:	20007f91 	.word	0x20007f91

0800cb14 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b084      	sub	sp, #16
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	60f8      	str	r0, [r7, #12]
 800cb1c:	60b9      	str	r1, [r7, #8]
 800cb1e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d00a      	beq.n	800cb3c <tcp_route+0x28>
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	7a1b      	ldrb	r3, [r3, #8]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d006      	beq.n	800cb3c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	7a1b      	ldrb	r3, [r3, #8]
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7fb fab4 	bl	80080a0 <netif_get_by_index>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	e003      	b.n	800cb44 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f002 fe73 	bl	800f828 <ip4_route>
 800cb42:	4603      	mov	r3, r0
  }
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3710      	adds	r7, #16
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}

0800cb4c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800cb4c:	b590      	push	{r4, r7, lr}
 800cb4e:	b087      	sub	sp, #28
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	60f8      	str	r0, [r7, #12]
 800cb54:	60b9      	str	r1, [r7, #8]
 800cb56:	603b      	str	r3, [r7, #0]
 800cb58:	4613      	mov	r3, r2
 800cb5a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d105      	bne.n	800cb6e <tcp_create_segment+0x22>
 800cb62:	4b44      	ldr	r3, [pc, #272]	; (800cc74 <tcp_create_segment+0x128>)
 800cb64:	22a3      	movs	r2, #163	; 0xa3
 800cb66:	4944      	ldr	r1, [pc, #272]	; (800cc78 <tcp_create_segment+0x12c>)
 800cb68:	4844      	ldr	r0, [pc, #272]	; (800cc7c <tcp_create_segment+0x130>)
 800cb6a:	f004 f8a9 	bl	8010cc0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d105      	bne.n	800cb80 <tcp_create_segment+0x34>
 800cb74:	4b3f      	ldr	r3, [pc, #252]	; (800cc74 <tcp_create_segment+0x128>)
 800cb76:	22a4      	movs	r2, #164	; 0xa4
 800cb78:	4941      	ldr	r1, [pc, #260]	; (800cc80 <tcp_create_segment+0x134>)
 800cb7a:	4840      	ldr	r0, [pc, #256]	; (800cc7c <tcp_create_segment+0x130>)
 800cb7c:	f004 f8a0 	bl	8010cc0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cb80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	b2db      	uxtb	r3, r3
 800cb88:	f003 0304 	and.w	r3, r3, #4
 800cb8c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800cb8e:	2003      	movs	r0, #3
 800cb90:	f7fa ff00 	bl	8007994 <memp_malloc>
 800cb94:	6138      	str	r0, [r7, #16]
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d104      	bne.n	800cba6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800cb9c:	68b8      	ldr	r0, [r7, #8]
 800cb9e:	f7fb fdbf 	bl	8008720 <pbuf_free>
    return NULL;
 800cba2:	2300      	movs	r3, #0
 800cba4:	e061      	b.n	800cc6a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800cbac:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	68ba      	ldr	r2, [r7, #8]
 800cbb8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	891a      	ldrh	r2, [r3, #8]
 800cbbe:	7dfb      	ldrb	r3, [r7, #23]
 800cbc0:	b29b      	uxth	r3, r3
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d205      	bcs.n	800cbd2 <tcp_create_segment+0x86>
 800cbc6:	4b2b      	ldr	r3, [pc, #172]	; (800cc74 <tcp_create_segment+0x128>)
 800cbc8:	22b0      	movs	r2, #176	; 0xb0
 800cbca:	492e      	ldr	r1, [pc, #184]	; (800cc84 <tcp_create_segment+0x138>)
 800cbcc:	482b      	ldr	r0, [pc, #172]	; (800cc7c <tcp_create_segment+0x130>)
 800cbce:	f004 f877 	bl	8010cc0 <iprintf>
  seg->len = p->tot_len - optlen;
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	891a      	ldrh	r2, [r3, #8]
 800cbd6:	7dfb      	ldrb	r3, [r7, #23]
 800cbd8:	b29b      	uxth	r3, r3
 800cbda:	1ad3      	subs	r3, r2, r3
 800cbdc:	b29a      	uxth	r2, r3
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800cbe2:	2114      	movs	r1, #20
 800cbe4:	68b8      	ldr	r0, [r7, #8]
 800cbe6:	f7fb fd05 	bl	80085f4 <pbuf_add_header>
 800cbea:	4603      	mov	r3, r0
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d004      	beq.n	800cbfa <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800cbf0:	6938      	ldr	r0, [r7, #16]
 800cbf2:	f7fd f80c 	bl	8009c0e <tcp_seg_free>
    return NULL;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	e037      	b.n	800cc6a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	685a      	ldr	r2, [r3, #4]
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	8ada      	ldrh	r2, [r3, #22]
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	68dc      	ldr	r4, [r3, #12]
 800cc0c:	4610      	mov	r0, r2
 800cc0e:	f7fa f991 	bl	8006f34 <lwip_htons>
 800cc12:	4603      	mov	r3, r0
 800cc14:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	8b1a      	ldrh	r2, [r3, #24]
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	68dc      	ldr	r4, [r3, #12]
 800cc1e:	4610      	mov	r0, r2
 800cc20:	f7fa f988 	bl	8006f34 <lwip_htons>
 800cc24:	4603      	mov	r3, r0
 800cc26:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	68dc      	ldr	r4, [r3, #12]
 800cc2c:	6838      	ldr	r0, [r7, #0]
 800cc2e:	f7fa f996 	bl	8006f5e <lwip_htonl>
 800cc32:	4603      	mov	r3, r0
 800cc34:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800cc36:	7dfb      	ldrb	r3, [r7, #23]
 800cc38:	089b      	lsrs	r3, r3, #2
 800cc3a:	b2db      	uxtb	r3, r3
 800cc3c:	b29b      	uxth	r3, r3
 800cc3e:	3305      	adds	r3, #5
 800cc40:	b29b      	uxth	r3, r3
 800cc42:	031b      	lsls	r3, r3, #12
 800cc44:	b29a      	uxth	r2, r3
 800cc46:	79fb      	ldrb	r3, [r7, #7]
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	b29a      	uxth	r2, r3
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	68dc      	ldr	r4, [r3, #12]
 800cc52:	4610      	mov	r0, r2
 800cc54:	f7fa f96e 	bl	8006f34 <lwip_htons>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	68db      	ldr	r3, [r3, #12]
 800cc60:	2200      	movs	r2, #0
 800cc62:	749a      	strb	r2, [r3, #18]
 800cc64:	2200      	movs	r2, #0
 800cc66:	74da      	strb	r2, [r3, #19]
  return seg;
 800cc68:	693b      	ldr	r3, [r7, #16]
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	371c      	adds	r7, #28
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd90      	pop	{r4, r7, pc}
 800cc72:	bf00      	nop
 800cc74:	0801351c 	.word	0x0801351c
 800cc78:	08013550 	.word	0x08013550
 800cc7c:	08013570 	.word	0x08013570
 800cc80:	08013598 	.word	0x08013598
 800cc84:	080135bc 	.word	0x080135bc

0800cc88 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800cc88:	b590      	push	{r4, r7, lr}
 800cc8a:	b08b      	sub	sp, #44	; 0x2c
 800cc8c:	af02      	add	r7, sp, #8
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	460b      	mov	r3, r1
 800cc92:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800cc94:	2300      	movs	r3, #0
 800cc96:	61fb      	str	r3, [r7, #28]
 800cc98:	2300      	movs	r3, #0
 800cc9a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d106      	bne.n	800ccb4 <tcp_split_unsent_seg+0x2c>
 800cca6:	4b95      	ldr	r3, [pc, #596]	; (800cefc <tcp_split_unsent_seg+0x274>)
 800cca8:	f240 324b 	movw	r2, #843	; 0x34b
 800ccac:	4994      	ldr	r1, [pc, #592]	; (800cf00 <tcp_split_unsent_seg+0x278>)
 800ccae:	4895      	ldr	r0, [pc, #596]	; (800cf04 <tcp_split_unsent_seg+0x27c>)
 800ccb0:	f004 f806 	bl	8010cc0 <iprintf>

  useg = pcb->unsent;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccb8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d102      	bne.n	800ccc6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ccc0:	f04f 33ff 	mov.w	r3, #4294967295
 800ccc4:	e116      	b.n	800cef4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ccc6:	887b      	ldrh	r3, [r7, #2]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d109      	bne.n	800cce0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800cccc:	4b8b      	ldr	r3, [pc, #556]	; (800cefc <tcp_split_unsent_seg+0x274>)
 800ccce:	f240 3253 	movw	r2, #851	; 0x353
 800ccd2:	498d      	ldr	r1, [pc, #564]	; (800cf08 <tcp_split_unsent_seg+0x280>)
 800ccd4:	488b      	ldr	r0, [pc, #556]	; (800cf04 <tcp_split_unsent_seg+0x27c>)
 800ccd6:	f003 fff3 	bl	8010cc0 <iprintf>
    return ERR_VAL;
 800ccda:	f06f 0305 	mvn.w	r3, #5
 800ccde:	e109      	b.n	800cef4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	891b      	ldrh	r3, [r3, #8]
 800cce4:	887a      	ldrh	r2, [r7, #2]
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d301      	bcc.n	800ccee <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ccea:	2300      	movs	r3, #0
 800ccec:	e102      	b.n	800cef4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ccf2:	887a      	ldrh	r2, [r7, #2]
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d906      	bls.n	800cd06 <tcp_split_unsent_seg+0x7e>
 800ccf8:	4b80      	ldr	r3, [pc, #512]	; (800cefc <tcp_split_unsent_seg+0x274>)
 800ccfa:	f240 325b 	movw	r2, #859	; 0x35b
 800ccfe:	4983      	ldr	r1, [pc, #524]	; (800cf0c <tcp_split_unsent_seg+0x284>)
 800cd00:	4880      	ldr	r0, [pc, #512]	; (800cf04 <tcp_split_unsent_seg+0x27c>)
 800cd02:	f003 ffdd 	bl	8010cc0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	891b      	ldrh	r3, [r3, #8]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d106      	bne.n	800cd1c <tcp_split_unsent_seg+0x94>
 800cd0e:	4b7b      	ldr	r3, [pc, #492]	; (800cefc <tcp_split_unsent_seg+0x274>)
 800cd10:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800cd14:	497e      	ldr	r1, [pc, #504]	; (800cf10 <tcp_split_unsent_seg+0x288>)
 800cd16:	487b      	ldr	r0, [pc, #492]	; (800cf04 <tcp_split_unsent_seg+0x27c>)
 800cd18:	f003 ffd2 	bl	8010cc0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	7a9b      	ldrb	r3, [r3, #10]
 800cd20:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800cd22:	7bfb      	ldrb	r3, [r7, #15]
 800cd24:	009b      	lsls	r3, r3, #2
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	f003 0304 	and.w	r3, r3, #4
 800cd2c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	891a      	ldrh	r2, [r3, #8]
 800cd32:	887b      	ldrh	r3, [r7, #2]
 800cd34:	1ad3      	subs	r3, r2, r3
 800cd36:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800cd38:	7bbb      	ldrb	r3, [r7, #14]
 800cd3a:	b29a      	uxth	r2, r3
 800cd3c:	89bb      	ldrh	r3, [r7, #12]
 800cd3e:	4413      	add	r3, r2
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cd46:	4619      	mov	r1, r3
 800cd48:	2036      	movs	r0, #54	; 0x36
 800cd4a:	f7fb fa05 	bl	8008158 <pbuf_alloc>
 800cd4e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	f000 80b7 	beq.w	800cec6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	891a      	ldrh	r2, [r3, #8]
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	891b      	ldrh	r3, [r3, #8]
 800cd62:	1ad3      	subs	r3, r2, r3
 800cd64:	b29a      	uxth	r2, r3
 800cd66:	887b      	ldrh	r3, [r7, #2]
 800cd68:	4413      	add	r3, r2
 800cd6a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	6858      	ldr	r0, [r3, #4]
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	685a      	ldr	r2, [r3, #4]
 800cd74:	7bbb      	ldrb	r3, [r7, #14]
 800cd76:	18d1      	adds	r1, r2, r3
 800cd78:	897b      	ldrh	r3, [r7, #10]
 800cd7a:	89ba      	ldrh	r2, [r7, #12]
 800cd7c:	f7fb feba 	bl	8008af4 <pbuf_copy_partial>
 800cd80:	4603      	mov	r3, r0
 800cd82:	461a      	mov	r2, r3
 800cd84:	89bb      	ldrh	r3, [r7, #12]
 800cd86:	4293      	cmp	r3, r2
 800cd88:	f040 809f 	bne.w	800ceca <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	68db      	ldr	r3, [r3, #12]
 800cd90:	899b      	ldrh	r3, [r3, #12]
 800cd92:	b29b      	uxth	r3, r3
 800cd94:	4618      	mov	r0, r3
 800cd96:	f7fa f8cd 	bl	8006f34 <lwip_htons>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	b2db      	uxtb	r3, r3
 800cd9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cda2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800cda4:	2300      	movs	r3, #0
 800cda6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800cda8:	7efb      	ldrb	r3, [r7, #27]
 800cdaa:	f003 0308 	and.w	r3, r3, #8
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d007      	beq.n	800cdc2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800cdb2:	7efb      	ldrb	r3, [r7, #27]
 800cdb4:	f023 0308 	bic.w	r3, r3, #8
 800cdb8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800cdba:	7ebb      	ldrb	r3, [r7, #26]
 800cdbc:	f043 0308 	orr.w	r3, r3, #8
 800cdc0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800cdc2:	7efb      	ldrb	r3, [r7, #27]
 800cdc4:	f003 0301 	and.w	r3, r3, #1
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d007      	beq.n	800cddc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800cdcc:	7efb      	ldrb	r3, [r7, #27]
 800cdce:	f023 0301 	bic.w	r3, r3, #1
 800cdd2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800cdd4:	7ebb      	ldrb	r3, [r7, #26]
 800cdd6:	f043 0301 	orr.w	r3, r3, #1
 800cdda:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	68db      	ldr	r3, [r3, #12]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7fa f8bb 	bl	8006f5e <lwip_htonl>
 800cde8:	4602      	mov	r2, r0
 800cdea:	887b      	ldrh	r3, [r7, #2]
 800cdec:	18d1      	adds	r1, r2, r3
 800cdee:	7eba      	ldrb	r2, [r7, #26]
 800cdf0:	7bfb      	ldrb	r3, [r7, #15]
 800cdf2:	9300      	str	r3, [sp, #0]
 800cdf4:	460b      	mov	r3, r1
 800cdf6:	6939      	ldr	r1, [r7, #16]
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f7ff fea7 	bl	800cb4c <tcp_create_segment>
 800cdfe:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d063      	beq.n	800cece <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7fb fd10 	bl	8008830 <pbuf_clen>
 800ce10:	4603      	mov	r3, r0
 800ce12:	461a      	mov	r2, r3
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ce1a:	1a9b      	subs	r3, r3, r2
 800ce1c:	b29a      	uxth	r2, r3
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	6858      	ldr	r0, [r3, #4]
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	891a      	ldrh	r2, [r3, #8]
 800ce2e:	89bb      	ldrh	r3, [r7, #12]
 800ce30:	1ad3      	subs	r3, r2, r3
 800ce32:	b29b      	uxth	r3, r3
 800ce34:	4619      	mov	r1, r3
 800ce36:	f7fb faed 	bl	8008414 <pbuf_realloc>
  useg->len -= remainder;
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	891a      	ldrh	r2, [r3, #8]
 800ce3e:	89bb      	ldrh	r3, [r7, #12]
 800ce40:	1ad3      	subs	r3, r2, r3
 800ce42:	b29a      	uxth	r2, r3
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	68db      	ldr	r3, [r3, #12]
 800ce4c:	899b      	ldrh	r3, [r3, #12]
 800ce4e:	b29c      	uxth	r4, r3
 800ce50:	7efb      	ldrb	r3, [r7, #27]
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7fa f86d 	bl	8006f34 <lwip_htons>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	68db      	ldr	r3, [r3, #12]
 800ce62:	4322      	orrs	r2, r4
 800ce64:	b292      	uxth	r2, r2
 800ce66:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7fb fcdf 	bl	8008830 <pbuf_clen>
 800ce72:	4603      	mov	r3, r0
 800ce74:	461a      	mov	r2, r3
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ce7c:	4413      	add	r3, r2
 800ce7e:	b29a      	uxth	r2, r3
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ce86:	69fb      	ldr	r3, [r7, #28]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f7fb fcd0 	bl	8008830 <pbuf_clen>
 800ce90:	4603      	mov	r3, r0
 800ce92:	461a      	mov	r2, r3
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ce9a:	4413      	add	r3, r2
 800ce9c:	b29a      	uxth	r2, r3
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	69fa      	ldr	r2, [r7, #28]
 800ceb0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ceb2:	69fb      	ldr	r3, [r7, #28]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d103      	bne.n	800cec2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2200      	movs	r2, #0
 800cebe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800cec2:	2300      	movs	r3, #0
 800cec4:	e016      	b.n	800cef4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800cec6:	bf00      	nop
 800cec8:	e002      	b.n	800ced0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ceca:	bf00      	nop
 800cecc:	e000      	b.n	800ced0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cece:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ced0:	69fb      	ldr	r3, [r7, #28]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d006      	beq.n	800cee4 <tcp_split_unsent_seg+0x25c>
 800ced6:	4b09      	ldr	r3, [pc, #36]	; (800cefc <tcp_split_unsent_seg+0x274>)
 800ced8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800cedc:	490d      	ldr	r1, [pc, #52]	; (800cf14 <tcp_split_unsent_seg+0x28c>)
 800cede:	4809      	ldr	r0, [pc, #36]	; (800cf04 <tcp_split_unsent_seg+0x27c>)
 800cee0:	f003 feee 	bl	8010cc0 <iprintf>
  if (p != NULL) {
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d002      	beq.n	800cef0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ceea:	6938      	ldr	r0, [r7, #16]
 800ceec:	f7fb fc18 	bl	8008720 <pbuf_free>
  }

  return ERR_MEM;
 800cef0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3724      	adds	r7, #36	; 0x24
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd90      	pop	{r4, r7, pc}
 800cefc:	0801351c 	.word	0x0801351c
 800cf00:	080138b0 	.word	0x080138b0
 800cf04:	08013570 	.word	0x08013570
 800cf08:	080138d4 	.word	0x080138d4
 800cf0c:	080138f8 	.word	0x080138f8
 800cf10:	08013908 	.word	0x08013908
 800cf14:	08013918 	.word	0x08013918

0800cf18 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800cf18:	b590      	push	{r4, r7, lr}
 800cf1a:	b085      	sub	sp, #20
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d106      	bne.n	800cf34 <tcp_send_fin+0x1c>
 800cf26:	4b21      	ldr	r3, [pc, #132]	; (800cfac <tcp_send_fin+0x94>)
 800cf28:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800cf2c:	4920      	ldr	r1, [pc, #128]	; (800cfb0 <tcp_send_fin+0x98>)
 800cf2e:	4821      	ldr	r0, [pc, #132]	; (800cfb4 <tcp_send_fin+0x9c>)
 800cf30:	f003 fec6 	bl	8010cc0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d02e      	beq.n	800cf9a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf40:	60fb      	str	r3, [r7, #12]
 800cf42:	e002      	b.n	800cf4a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d1f8      	bne.n	800cf44 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	68db      	ldr	r3, [r3, #12]
 800cf56:	899b      	ldrh	r3, [r3, #12]
 800cf58:	b29b      	uxth	r3, r3
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7f9 ffea 	bl	8006f34 <lwip_htons>
 800cf60:	4603      	mov	r3, r0
 800cf62:	b2db      	uxtb	r3, r3
 800cf64:	f003 0307 	and.w	r3, r3, #7
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d116      	bne.n	800cf9a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	899b      	ldrh	r3, [r3, #12]
 800cf72:	b29c      	uxth	r4, r3
 800cf74:	2001      	movs	r0, #1
 800cf76:	f7f9 ffdd 	bl	8006f34 <lwip_htons>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	68db      	ldr	r3, [r3, #12]
 800cf82:	4322      	orrs	r2, r4
 800cf84:	b292      	uxth	r2, r2
 800cf86:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	8b5b      	ldrh	r3, [r3, #26]
 800cf8c:	f043 0320 	orr.w	r3, r3, #32
 800cf90:	b29a      	uxth	r2, r3
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800cf96:	2300      	movs	r3, #0
 800cf98:	e004      	b.n	800cfa4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cf9a:	2101      	movs	r1, #1
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 f80b 	bl	800cfb8 <tcp_enqueue_flags>
 800cfa2:	4603      	mov	r3, r0
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3714      	adds	r7, #20
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd90      	pop	{r4, r7, pc}
 800cfac:	0801351c 	.word	0x0801351c
 800cfb0:	08013924 	.word	0x08013924
 800cfb4:	08013570 	.word	0x08013570

0800cfb8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b08a      	sub	sp, #40	; 0x28
 800cfbc:	af02      	add	r7, sp, #8
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cfcc:	78fb      	ldrb	r3, [r7, #3]
 800cfce:	f003 0303 	and.w	r3, r3, #3
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d106      	bne.n	800cfe4 <tcp_enqueue_flags+0x2c>
 800cfd6:	4b67      	ldr	r3, [pc, #412]	; (800d174 <tcp_enqueue_flags+0x1bc>)
 800cfd8:	f240 4211 	movw	r2, #1041	; 0x411
 800cfdc:	4966      	ldr	r1, [pc, #408]	; (800d178 <tcp_enqueue_flags+0x1c0>)
 800cfde:	4867      	ldr	r0, [pc, #412]	; (800d17c <tcp_enqueue_flags+0x1c4>)
 800cfe0:	f003 fe6e 	bl	8010cc0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d106      	bne.n	800cff8 <tcp_enqueue_flags+0x40>
 800cfea:	4b62      	ldr	r3, [pc, #392]	; (800d174 <tcp_enqueue_flags+0x1bc>)
 800cfec:	f240 4213 	movw	r2, #1043	; 0x413
 800cff0:	4963      	ldr	r1, [pc, #396]	; (800d180 <tcp_enqueue_flags+0x1c8>)
 800cff2:	4862      	ldr	r0, [pc, #392]	; (800d17c <tcp_enqueue_flags+0x1c4>)
 800cff4:	f003 fe64 	bl	8010cc0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800cff8:	78fb      	ldrb	r3, [r7, #3]
 800cffa:	f003 0302 	and.w	r3, r3, #2
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d001      	beq.n	800d006 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800d002:	2301      	movs	r3, #1
 800d004:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d006:	7ffb      	ldrb	r3, [r7, #31]
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	b2db      	uxtb	r3, r3
 800d00c:	f003 0304 	and.w	r3, r3, #4
 800d010:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d012:	7dfb      	ldrb	r3, [r7, #23]
 800d014:	b29b      	uxth	r3, r3
 800d016:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d01a:	4619      	mov	r1, r3
 800d01c:	2036      	movs	r0, #54	; 0x36
 800d01e:	f7fb f89b 	bl	8008158 <pbuf_alloc>
 800d022:	6138      	str	r0, [r7, #16]
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d109      	bne.n	800d03e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	8b5b      	ldrh	r3, [r3, #26]
 800d02e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d032:	b29a      	uxth	r2, r3
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d038:	f04f 33ff 	mov.w	r3, #4294967295
 800d03c:	e095      	b.n	800d16a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	895a      	ldrh	r2, [r3, #10]
 800d042:	7dfb      	ldrb	r3, [r7, #23]
 800d044:	b29b      	uxth	r3, r3
 800d046:	429a      	cmp	r2, r3
 800d048:	d206      	bcs.n	800d058 <tcp_enqueue_flags+0xa0>
 800d04a:	4b4a      	ldr	r3, [pc, #296]	; (800d174 <tcp_enqueue_flags+0x1bc>)
 800d04c:	f240 4239 	movw	r2, #1081	; 0x439
 800d050:	494c      	ldr	r1, [pc, #304]	; (800d184 <tcp_enqueue_flags+0x1cc>)
 800d052:	484a      	ldr	r0, [pc, #296]	; (800d17c <tcp_enqueue_flags+0x1c4>)
 800d054:	f003 fe34 	bl	8010cc0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800d05c:	78fa      	ldrb	r2, [r7, #3]
 800d05e:	7ffb      	ldrb	r3, [r7, #31]
 800d060:	9300      	str	r3, [sp, #0]
 800d062:	460b      	mov	r3, r1
 800d064:	6939      	ldr	r1, [r7, #16]
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f7ff fd70 	bl	800cb4c <tcp_create_segment>
 800d06c:	60f8      	str	r0, [r7, #12]
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d109      	bne.n	800d088 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	8b5b      	ldrh	r3, [r3, #26]
 800d078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d07c:	b29a      	uxth	r2, r3
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d082:	f04f 33ff 	mov.w	r3, #4294967295
 800d086:	e070      	b.n	800d16a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	68db      	ldr	r3, [r3, #12]
 800d08c:	f003 0303 	and.w	r3, r3, #3
 800d090:	2b00      	cmp	r3, #0
 800d092:	d006      	beq.n	800d0a2 <tcp_enqueue_flags+0xea>
 800d094:	4b37      	ldr	r3, [pc, #220]	; (800d174 <tcp_enqueue_flags+0x1bc>)
 800d096:	f240 4242 	movw	r2, #1090	; 0x442
 800d09a:	493b      	ldr	r1, [pc, #236]	; (800d188 <tcp_enqueue_flags+0x1d0>)
 800d09c:	4837      	ldr	r0, [pc, #220]	; (800d17c <tcp_enqueue_flags+0x1c4>)
 800d09e:	f003 fe0f 	bl	8010cc0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	891b      	ldrh	r3, [r3, #8]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d006      	beq.n	800d0b8 <tcp_enqueue_flags+0x100>
 800d0aa:	4b32      	ldr	r3, [pc, #200]	; (800d174 <tcp_enqueue_flags+0x1bc>)
 800d0ac:	f240 4243 	movw	r2, #1091	; 0x443
 800d0b0:	4936      	ldr	r1, [pc, #216]	; (800d18c <tcp_enqueue_flags+0x1d4>)
 800d0b2:	4832      	ldr	r0, [pc, #200]	; (800d17c <tcp_enqueue_flags+0x1c4>)
 800d0b4:	f003 fe04 	bl	8010cc0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d103      	bne.n	800d0c8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	68fa      	ldr	r2, [r7, #12]
 800d0c4:	66da      	str	r2, [r3, #108]	; 0x6c
 800d0c6:	e00d      	b.n	800d0e4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0cc:	61bb      	str	r3, [r7, #24]
 800d0ce:	e002      	b.n	800d0d6 <tcp_enqueue_flags+0x11e>
 800d0d0:	69bb      	ldr	r3, [r7, #24]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	61bb      	str	r3, [r7, #24]
 800d0d6:	69bb      	ldr	r3, [r7, #24]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d1f8      	bne.n	800d0d0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800d0de:	69bb      	ldr	r3, [r7, #24]
 800d0e0:	68fa      	ldr	r2, [r7, #12]
 800d0e2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d0ec:	78fb      	ldrb	r3, [r7, #3]
 800d0ee:	f003 0302 	and.w	r3, r3, #2
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d104      	bne.n	800d100 <tcp_enqueue_flags+0x148>
 800d0f6:	78fb      	ldrb	r3, [r7, #3]
 800d0f8:	f003 0301 	and.w	r3, r3, #1
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d004      	beq.n	800d10a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d104:	1c5a      	adds	r2, r3, #1
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d10a:	78fb      	ldrb	r3, [r7, #3]
 800d10c:	f003 0301 	and.w	r3, r3, #1
 800d110:	2b00      	cmp	r3, #0
 800d112:	d006      	beq.n	800d122 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	8b5b      	ldrh	r3, [r3, #26]
 800d118:	f043 0320 	orr.w	r3, r3, #32
 800d11c:	b29a      	uxth	r2, r3
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	685b      	ldr	r3, [r3, #4]
 800d126:	4618      	mov	r0, r3
 800d128:	f7fb fb82 	bl	8008830 <pbuf_clen>
 800d12c:	4603      	mov	r3, r0
 800d12e:	461a      	mov	r2, r3
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d136:	4413      	add	r3, r2
 800d138:	b29a      	uxth	r2, r3
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d146:	2b00      	cmp	r3, #0
 800d148:	d00e      	beq.n	800d168 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d10a      	bne.n	800d168 <tcp_enqueue_flags+0x1b0>
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d156:	2b00      	cmp	r3, #0
 800d158:	d106      	bne.n	800d168 <tcp_enqueue_flags+0x1b0>
 800d15a:	4b06      	ldr	r3, [pc, #24]	; (800d174 <tcp_enqueue_flags+0x1bc>)
 800d15c:	f240 4265 	movw	r2, #1125	; 0x465
 800d160:	490b      	ldr	r1, [pc, #44]	; (800d190 <tcp_enqueue_flags+0x1d8>)
 800d162:	4806      	ldr	r0, [pc, #24]	; (800d17c <tcp_enqueue_flags+0x1c4>)
 800d164:	f003 fdac 	bl	8010cc0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d168:	2300      	movs	r3, #0
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3720      	adds	r7, #32
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
 800d172:	bf00      	nop
 800d174:	0801351c 	.word	0x0801351c
 800d178:	08013940 	.word	0x08013940
 800d17c:	08013570 	.word	0x08013570
 800d180:	08013998 	.word	0x08013998
 800d184:	080139b8 	.word	0x080139b8
 800d188:	080139f4 	.word	0x080139f4
 800d18c:	08013a0c 	.word	0x08013a0c
 800d190:	08013a38 	.word	0x08013a38

0800d194 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d194:	b5b0      	push	{r4, r5, r7, lr}
 800d196:	b08c      	sub	sp, #48	; 0x30
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg, *useg;
  u32_t wnd, snd_nxt;
  err_t err;
  struct netif *netif;
#if TCP_CWND_DEBUG
  s16_t i = 0;
 800d19c:	2300      	movs	r3, #0
 800d19e:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d106      	bne.n	800d1b4 <tcp_output+0x20>
 800d1a6:	4b8c      	ldr	r3, [pc, #560]	; (800d3d8 <tcp_output+0x244>)
 800d1a8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d1ac:	498b      	ldr	r1, [pc, #556]	; (800d3dc <tcp_output+0x248>)
 800d1ae:	488c      	ldr	r0, [pc, #560]	; (800d3e0 <tcp_output+0x24c>)
 800d1b0:	f003 fd86 	bl	8010cc0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	7d1b      	ldrb	r3, [r3, #20]
 800d1b8:	2b01      	cmp	r3, #1
 800d1ba:	d106      	bne.n	800d1ca <tcp_output+0x36>
 800d1bc:	4b86      	ldr	r3, [pc, #536]	; (800d3d8 <tcp_output+0x244>)
 800d1be:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d1c2:	4988      	ldr	r1, [pc, #544]	; (800d3e4 <tcp_output+0x250>)
 800d1c4:	4886      	ldr	r0, [pc, #536]	; (800d3e0 <tcp_output+0x24c>)
 800d1c6:	f003 fd7b 	bl	8010cc0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d1ca:	4b87      	ldr	r3, [pc, #540]	; (800d3e8 <tcp_output+0x254>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	687a      	ldr	r2, [r7, #4]
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d101      	bne.n	800d1d8 <tcp_output+0x44>
    return ERR_OK;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	e1d2      	b.n	800d57e <tcp_output+0x3ea>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	bf28      	it	cs
 800d1e8:	4613      	movcs	r3, r2
 800d1ea:	b29b      	uxth	r3, r3
 800d1ec:	61fb      	str	r3, [r7, #28]

  seg = pcb->unsent;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (seg == NULL) {
 800d1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d10b      	bne.n	800d212 <tcp_output+0x7e>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	8b5b      	ldrh	r3, [r3, #26]
 800d1fe:	f003 0302 	and.w	r3, r3, #2
 800d202:	2b00      	cmp	r3, #0
 800d204:	f000 81ae 	beq.w	800d564 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f000 fdcf 	bl	800ddac <tcp_send_empty_ack>
 800d20e:	4603      	mov	r3, r0
 800d210:	e1b5      	b.n	800d57e <tcp_output+0x3ea>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d212:	6879      	ldr	r1, [r7, #4]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	3304      	adds	r3, #4
 800d218:	461a      	mov	r2, r3
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f7ff fc7a 	bl	800cb14 <tcp_route>
 800d220:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 800d222:	69bb      	ldr	r3, [r7, #24]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d102      	bne.n	800d22e <tcp_output+0x9a>
    return ERR_RTE;
 800d228:	f06f 0303 	mvn.w	r3, #3
 800d22c:	e1a7      	b.n	800d57e <tcp_output+0x3ea>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d003      	beq.n	800d23c <tcp_output+0xa8>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d111      	bne.n	800d260 <tcp_output+0xcc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d23c:	69bb      	ldr	r3, [r7, #24]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d002      	beq.n	800d248 <tcp_output+0xb4>
 800d242:	69bb      	ldr	r3, [r7, #24]
 800d244:	3304      	adds	r3, #4
 800d246:	e000      	b.n	800d24a <tcp_output+0xb6>
 800d248:	2300      	movs	r3, #0
 800d24a:	617b      	str	r3, [r7, #20]
    if (local_ip == NULL) {
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d102      	bne.n	800d258 <tcp_output+0xc4>
      return ERR_RTE;
 800d252:	f06f 0303 	mvn.w	r3, #3
 800d256:	e192      	b.n	800d57e <tcp_output+0x3ea>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	681a      	ldr	r2, [r3, #0]
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d262:	68db      	ldr	r3, [r3, #12]
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	4618      	mov	r0, r3
 800d268:	f7f9 fe79 	bl	8006f5e <lwip_htonl>
 800d26c:	4602      	mov	r2, r0
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d272:	1ad3      	subs	r3, r2, r3
 800d274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d276:	8912      	ldrh	r2, [r2, #8]
 800d278:	4413      	add	r3, r2
 800d27a:	69fa      	ldr	r2, [r7, #28]
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d227      	bcs.n	800d2d0 <tcp_output+0x13c>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d286:	461a      	mov	r2, r3
 800d288:	69fb      	ldr	r3, [r7, #28]
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d114      	bne.n	800d2b8 <tcp_output+0x124>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d292:	2b00      	cmp	r3, #0
 800d294:	d110      	bne.n	800d2b8 <tcp_output+0x124>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d10b      	bne.n	800d2b8 <tcp_output+0x124>
      pcb->persist_cnt = 0;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	8b5b      	ldrh	r3, [r3, #26]
 800d2bc:	f003 0302 	and.w	r3, r3, #2
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	f000 8151 	beq.w	800d568 <tcp_output+0x3d4>
      return tcp_send_empty_ack(pcb);
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f000 fd70 	bl	800ddac <tcp_send_empty_ack>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	e156      	b.n	800d57e <tcp_output+0x3ea>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (useg != NULL) {
 800d2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	f000 8120 	beq.w	800d526 <tcp_output+0x392>
    for (; useg->next != NULL; useg = useg->next);
 800d2e6:	e002      	b.n	800d2ee <tcp_output+0x15a>
 800d2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800d2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d1f8      	bne.n	800d2e8 <tcp_output+0x154>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d2f6:	e116      	b.n	800d526 <tcp_output+0x392>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fa:	68db      	ldr	r3, [r3, #12]
 800d2fc:	899b      	ldrh	r3, [r3, #12]
 800d2fe:	b29b      	uxth	r3, r3
 800d300:	4618      	mov	r0, r3
 800d302:	f7f9 fe17 	bl	8006f34 <lwip_htons>
 800d306:	4603      	mov	r3, r0
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	f003 0304 	and.w	r3, r3, #4
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d006      	beq.n	800d320 <tcp_output+0x18c>
 800d312:	4b31      	ldr	r3, [pc, #196]	; (800d3d8 <tcp_output+0x244>)
 800d314:	f240 5236 	movw	r2, #1334	; 0x536
 800d318:	4934      	ldr	r1, [pc, #208]	; (800d3ec <tcp_output+0x258>)
 800d31a:	4831      	ldr	r0, [pc, #196]	; (800d3e0 <tcp_output+0x24c>)
 800d31c:	f003 fcd0 	bl	8010cc0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d324:	2b00      	cmp	r3, #0
 800d326:	d01f      	beq.n	800d368 <tcp_output+0x1d4>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	8b5b      	ldrh	r3, [r3, #26]
 800d32c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d330:	2b00      	cmp	r3, #0
 800d332:	d119      	bne.n	800d368 <tcp_output+0x1d4>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d00b      	beq.n	800d354 <tcp_output+0x1c0>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d110      	bne.n	800d368 <tcp_output+0x1d4>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d34a:	891a      	ldrh	r2, [r3, #8]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d350:	429a      	cmp	r2, r3
 800d352:	d209      	bcs.n	800d368 <tcp_output+0x1d4>
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d004      	beq.n	800d368 <tcp_output+0x1d4>
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d364:	2b08      	cmp	r3, #8
 800d366:	d901      	bls.n	800d36c <tcp_output+0x1d8>
 800d368:	2301      	movs	r3, #1
 800d36a:	e000      	b.n	800d36e <tcp_output+0x1da>
 800d36c:	2300      	movs	r3, #0
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d106      	bne.n	800d380 <tcp_output+0x1ec>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	8b5b      	ldrh	r3, [r3, #26]
 800d376:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	f000 80e8 	beq.w	800d550 <tcp_output+0x3bc>
    LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_output: snd_wnd %"TCPWNDSIZE_F", cwnd %"TCPWNDSIZE_F", wnd %"U32_F", effwnd %"U32_F", seq %"U32_F", ack %"U32_F", i %"S16_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd,
                                 lwip_ntohl(seg->tcphdr->seqno) + seg->len -
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
 800d380:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d382:	3301      	adds	r3, #1
 800d384:	b29b      	uxth	r3, r3
 800d386:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	7d1b      	ldrb	r3, [r3, #20]
 800d38c:	2b02      	cmp	r3, #2
 800d38e:	d00d      	beq.n	800d3ac <tcp_output+0x218>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d392:	68db      	ldr	r3, [r3, #12]
 800d394:	899b      	ldrh	r3, [r3, #12]
 800d396:	b29c      	uxth	r4, r3
 800d398:	2010      	movs	r0, #16
 800d39a:	f7f9 fdcb 	bl	8006f34 <lwip_htons>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a4:	68db      	ldr	r3, [r3, #12]
 800d3a6:	4322      	orrs	r2, r4
 800d3a8:	b292      	uxth	r2, r2
 800d3aa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d3ac:	69ba      	ldr	r2, [r7, #24]
 800d3ae:	6879      	ldr	r1, [r7, #4]
 800d3b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3b2:	f000 f909 	bl	800d5c8 <tcp_output_segment>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800d3ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d016      	beq.n	800d3f0 <tcp_output+0x25c>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	8b5b      	ldrh	r3, [r3, #26]
 800d3c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3ca:	b29a      	uxth	r2, r3
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	835a      	strh	r2, [r3, #26]
      return err;
 800d3d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d3d4:	e0d3      	b.n	800d57e <tcp_output+0x3ea>
 800d3d6:	bf00      	nop
 800d3d8:	0801351c 	.word	0x0801351c
 800d3dc:	08013a60 	.word	0x08013a60
 800d3e0:	08013570 	.word	0x08013570
 800d3e4:	08013a78 	.word	0x08013a78
 800d3e8:	20007f98 	.word	0x20007f98
 800d3ec:	08013aa0 	.word	0x08013aa0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f2:	681a      	ldr	r2, [r3, #0]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	7d1b      	ldrb	r3, [r3, #20]
 800d3fc:	2b02      	cmp	r3, #2
 800d3fe:	d006      	beq.n	800d40e <tcp_output+0x27a>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	8b5b      	ldrh	r3, [r3, #26]
 800d404:	f023 0303 	bic.w	r3, r3, #3
 800d408:	b29a      	uxth	r2, r3
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d410:	68db      	ldr	r3, [r3, #12]
 800d412:	685b      	ldr	r3, [r3, #4]
 800d414:	4618      	mov	r0, r3
 800d416:	f7f9 fda2 	bl	8006f5e <lwip_htonl>
 800d41a:	4604      	mov	r4, r0
 800d41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41e:	891b      	ldrh	r3, [r3, #8]
 800d420:	461d      	mov	r5, r3
 800d422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	899b      	ldrh	r3, [r3, #12]
 800d428:	b29b      	uxth	r3, r3
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7f9 fd82 	bl	8006f34 <lwip_htons>
 800d430:	4603      	mov	r3, r0
 800d432:	b2db      	uxtb	r3, r3
 800d434:	f003 0303 	and.w	r3, r3, #3
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d001      	beq.n	800d440 <tcp_output+0x2ac>
 800d43c:	2301      	movs	r3, #1
 800d43e:	e000      	b.n	800d442 <tcp_output+0x2ae>
 800d440:	2300      	movs	r3, #0
 800d442:	442b      	add	r3, r5
 800d444:	4423      	add	r3, r4
 800d446:	60fb      	str	r3, [r7, #12]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	1ad3      	subs	r3, r2, r3
 800d450:	2b00      	cmp	r3, #0
 800d452:	da02      	bge.n	800d45a <tcp_output+0x2c6>
      pcb->snd_nxt = snd_nxt;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	68fa      	ldr	r2, [r7, #12]
 800d458:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d45c:	891b      	ldrh	r3, [r3, #8]
 800d45e:	461c      	mov	r4, r3
 800d460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d462:	68db      	ldr	r3, [r3, #12]
 800d464:	899b      	ldrh	r3, [r3, #12]
 800d466:	b29b      	uxth	r3, r3
 800d468:	4618      	mov	r0, r3
 800d46a:	f7f9 fd63 	bl	8006f34 <lwip_htons>
 800d46e:	4603      	mov	r3, r0
 800d470:	b2db      	uxtb	r3, r3
 800d472:	f003 0303 	and.w	r3, r3, #3
 800d476:	2b00      	cmp	r3, #0
 800d478:	d001      	beq.n	800d47e <tcp_output+0x2ea>
 800d47a:	2301      	movs	r3, #1
 800d47c:	e000      	b.n	800d480 <tcp_output+0x2ec>
 800d47e:	2300      	movs	r3, #0
 800d480:	4423      	add	r3, r4
 800d482:	2b00      	cmp	r3, #0
 800d484:	d049      	beq.n	800d51a <tcp_output+0x386>
      seg->next = NULL;
 800d486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d488:	2200      	movs	r2, #0
 800d48a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d490:	2b00      	cmp	r3, #0
 800d492:	d105      	bne.n	800d4a0 <tcp_output+0x30c>
        pcb->unacked = seg;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d498:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800d49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d49c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d49e:	e03f      	b.n	800d520 <tcp_output+0x38c>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a2:	68db      	ldr	r3, [r3, #12]
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7f9 fd59 	bl	8006f5e <lwip_htonl>
 800d4ac:	4604      	mov	r4, r0
 800d4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b0:	68db      	ldr	r3, [r3, #12]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f7f9 fd52 	bl	8006f5e <lwip_htonl>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	1ae3      	subs	r3, r4, r3
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	da24      	bge.n	800d50c <tcp_output+0x378>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	3370      	adds	r3, #112	; 0x70
 800d4c6:	623b      	str	r3, [r7, #32]
          while (*cur_seg &&
 800d4c8:	e002      	b.n	800d4d0 <tcp_output+0x33c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d4ca:	6a3b      	ldr	r3, [r7, #32]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	623b      	str	r3, [r7, #32]
          while (*cur_seg &&
 800d4d0:	6a3b      	ldr	r3, [r7, #32]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d011      	beq.n	800d4fc <tcp_output+0x368>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d4d8:	6a3b      	ldr	r3, [r7, #32]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	68db      	ldr	r3, [r3, #12]
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7f9 fd3c 	bl	8006f5e <lwip_htonl>
 800d4e6:	4604      	mov	r4, r0
 800d4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ea:	68db      	ldr	r3, [r3, #12]
 800d4ec:	685b      	ldr	r3, [r3, #4]
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7f9 fd35 	bl	8006f5e <lwip_htonl>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	dbe6      	blt.n	800d4ca <tcp_output+0x336>
          }
          seg->next = (*cur_seg);
 800d4fc:	6a3b      	ldr	r3, [r7, #32]
 800d4fe:	681a      	ldr	r2, [r3, #0]
 800d500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d502:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d504:	6a3b      	ldr	r3, [r7, #32]
 800d506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d508:	601a      	str	r2, [r3, #0]
 800d50a:	e009      	b.n	800d520 <tcp_output+0x38c>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d50e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d510:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	62bb      	str	r3, [r7, #40]	; 0x28
 800d518:	e002      	b.n	800d520 <tcp_output+0x38c>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d51a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d51c:	f7fc fb77 	bl	8009c0e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d524:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (seg != NULL &&
 800d526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d012      	beq.n	800d552 <tcp_output+0x3be>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d52e:	68db      	ldr	r3, [r3, #12]
 800d530:	685b      	ldr	r3, [r3, #4]
 800d532:	4618      	mov	r0, r3
 800d534:	f7f9 fd13 	bl	8006f5e <lwip_htonl>
 800d538:	4602      	mov	r2, r0
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d53e:	1ad3      	subs	r3, r2, r3
 800d540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d542:	8912      	ldrh	r2, [r2, #8]
 800d544:	4413      	add	r3, r2
  while (seg != NULL &&
 800d546:	69fa      	ldr	r2, [r7, #28]
 800d548:	429a      	cmp	r2, r3
 800d54a:	f4bf aed5 	bcs.w	800d2f8 <tcp_output+0x164>
 800d54e:	e000      	b.n	800d552 <tcp_output+0x3be>
      break;
 800d550:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d556:	2b00      	cmp	r3, #0
 800d558:	d108      	bne.n	800d56c <tcp_output+0x3d8>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2200      	movs	r2, #0
 800d55e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d562:	e004      	b.n	800d56e <tcp_output+0x3da>
    goto output_done;
 800d564:	bf00      	nop
 800d566:	e002      	b.n	800d56e <tcp_output+0x3da>
    goto output_done;
 800d568:	bf00      	nop
 800d56a:	e000      	b.n	800d56e <tcp_output+0x3da>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d56c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	8b5b      	ldrh	r3, [r3, #26]
 800d572:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d576:	b29a      	uxth	r2, r3
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d57c:	2300      	movs	r3, #0
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3730      	adds	r7, #48	; 0x30
 800d582:	46bd      	mov	sp, r7
 800d584:	bdb0      	pop	{r4, r5, r7, pc}
 800d586:	bf00      	nop

0800d588 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d106      	bne.n	800d5a4 <tcp_output_segment_busy+0x1c>
 800d596:	4b09      	ldr	r3, [pc, #36]	; (800d5bc <tcp_output_segment_busy+0x34>)
 800d598:	f240 529a 	movw	r2, #1434	; 0x59a
 800d59c:	4908      	ldr	r1, [pc, #32]	; (800d5c0 <tcp_output_segment_busy+0x38>)
 800d59e:	4809      	ldr	r0, [pc, #36]	; (800d5c4 <tcp_output_segment_busy+0x3c>)
 800d5a0:	f003 fb8e 	bl	8010cc0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	685b      	ldr	r3, [r3, #4]
 800d5a8:	7b9b      	ldrb	r3, [r3, #14]
 800d5aa:	2b01      	cmp	r3, #1
 800d5ac:	d001      	beq.n	800d5b2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	e000      	b.n	800d5b4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d5b2:	2300      	movs	r3, #0
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3708      	adds	r7, #8
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}
 800d5bc:	0801351c 	.word	0x0801351c
 800d5c0:	08013ab8 	.word	0x08013ab8
 800d5c4:	08013570 	.word	0x08013570

0800d5c8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d5c8:	b5b0      	push	{r4, r5, r7, lr}
 800d5ca:	b08c      	sub	sp, #48	; 0x30
 800d5cc:	af04      	add	r7, sp, #16
 800d5ce:	60f8      	str	r0, [r7, #12]
 800d5d0:	60b9      	str	r1, [r7, #8]
 800d5d2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d106      	bne.n	800d5e8 <tcp_output_segment+0x20>
 800d5da:	4b63      	ldr	r3, [pc, #396]	; (800d768 <tcp_output_segment+0x1a0>)
 800d5dc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800d5e0:	4962      	ldr	r1, [pc, #392]	; (800d76c <tcp_output_segment+0x1a4>)
 800d5e2:	4863      	ldr	r0, [pc, #396]	; (800d770 <tcp_output_segment+0x1a8>)
 800d5e4:	f003 fb6c 	bl	8010cc0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d106      	bne.n	800d5fc <tcp_output_segment+0x34>
 800d5ee:	4b5e      	ldr	r3, [pc, #376]	; (800d768 <tcp_output_segment+0x1a0>)
 800d5f0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d5f4:	495f      	ldr	r1, [pc, #380]	; (800d774 <tcp_output_segment+0x1ac>)
 800d5f6:	485e      	ldr	r0, [pc, #376]	; (800d770 <tcp_output_segment+0x1a8>)
 800d5f8:	f003 fb62 	bl	8010cc0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d106      	bne.n	800d610 <tcp_output_segment+0x48>
 800d602:	4b59      	ldr	r3, [pc, #356]	; (800d768 <tcp_output_segment+0x1a0>)
 800d604:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800d608:	495b      	ldr	r1, [pc, #364]	; (800d778 <tcp_output_segment+0x1b0>)
 800d60a:	4859      	ldr	r0, [pc, #356]	; (800d770 <tcp_output_segment+0x1a8>)
 800d60c:	f003 fb58 	bl	8010cc0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d610:	68f8      	ldr	r0, [r7, #12]
 800d612:	f7ff ffb9 	bl	800d588 <tcp_output_segment_busy>
 800d616:	4603      	mov	r3, r0
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d001      	beq.n	800d620 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d61c:	2300      	movs	r3, #0
 800d61e:	e09f      	b.n	800d760 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	68dc      	ldr	r4, [r3, #12]
 800d628:	4610      	mov	r0, r2
 800d62a:	f7f9 fc98 	bl	8006f5e <lwip_htonl>
 800d62e:	4603      	mov	r3, r0
 800d630:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	68dc      	ldr	r4, [r3, #12]
 800d63a:	4610      	mov	r0, r2
 800d63c:	f7f9 fc7a 	bl	8006f34 <lwip_htons>
 800d640:	4603      	mov	r3, r0
 800d642:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d648:	68ba      	ldr	r2, [r7, #8]
 800d64a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d64c:	441a      	add	r2, r3
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	68db      	ldr	r3, [r3, #12]
 800d656:	3314      	adds	r3, #20
 800d658:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	7a9b      	ldrb	r3, [r3, #10]
 800d65e:	f003 0301 	and.w	r3, r3, #1
 800d662:	2b00      	cmp	r3, #0
 800d664:	d015      	beq.n	800d692 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	3304      	adds	r3, #4
 800d66a:	461a      	mov	r2, r3
 800d66c:	6879      	ldr	r1, [r7, #4]
 800d66e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d672:	f7fc fdd3 	bl	800a21c <tcp_eff_send_mss_netif>
 800d676:	4603      	mov	r3, r0
 800d678:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d67a:	8b7b      	ldrh	r3, [r7, #26]
 800d67c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d680:	4618      	mov	r0, r3
 800d682:	f7f9 fc6c 	bl	8006f5e <lwip_htonl>
 800d686:	4602      	mov	r2, r0
 800d688:	69fb      	ldr	r3, [r7, #28]
 800d68a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d68c:	69fb      	ldr	r3, [r7, #28]
 800d68e:	3304      	adds	r3, #4
 800d690:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d698:	2b00      	cmp	r3, #0
 800d69a:	da02      	bge.n	800d6a2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d10c      	bne.n	800d6c4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d6aa:	4b34      	ldr	r3, [pc, #208]	; (800d77c <tcp_output_segment+0x1b4>)
 800d6ac:	681a      	ldr	r2, [r3, #0]
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	68db      	ldr	r3, [r3, #12]
 800d6b6:	685b      	ldr	r3, [r3, #4]
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f7f9 fc50 	bl	8006f5e <lwip_htonl>
 800d6be:	4602      	mov	r2, r0
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	68da      	ldr	r2, [r3, #12]
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	685b      	ldr	r3, [r3, #4]
 800d6ce:	1ad3      	subs	r3, r2, r3
 800d6d0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	8959      	ldrh	r1, [r3, #10]
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	685b      	ldr	r3, [r3, #4]
 800d6dc:	8b3a      	ldrh	r2, [r7, #24]
 800d6de:	1a8a      	subs	r2, r1, r2
 800d6e0:	b292      	uxth	r2, r2
 800d6e2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	685b      	ldr	r3, [r3, #4]
 800d6e8:	8919      	ldrh	r1, [r3, #8]
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	685b      	ldr	r3, [r3, #4]
 800d6ee:	8b3a      	ldrh	r2, [r7, #24]
 800d6f0:	1a8a      	subs	r2, r1, r2
 800d6f2:	b292      	uxth	r2, r2
 800d6f4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	685b      	ldr	r3, [r3, #4]
 800d6fa:	68fa      	ldr	r2, [r7, #12]
 800d6fc:	68d2      	ldr	r2, [r2, #12]
 800d6fe:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	68db      	ldr	r3, [r3, #12]
 800d704:	2200      	movs	r2, #0
 800d706:	741a      	strb	r2, [r3, #16]
 800d708:	2200      	movs	r2, #0
 800d70a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	68db      	ldr	r3, [r3, #12]
 800d710:	f103 0214 	add.w	r2, r3, #20
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	7a9b      	ldrb	r3, [r3, #10]
 800d718:	009b      	lsls	r3, r3, #2
 800d71a:	f003 0304 	and.w	r3, r3, #4
 800d71e:	4413      	add	r3, r2
 800d720:	69fa      	ldr	r2, [r7, #28]
 800d722:	429a      	cmp	r2, r3
 800d724:	d006      	beq.n	800d734 <tcp_output_segment+0x16c>
 800d726:	4b10      	ldr	r3, [pc, #64]	; (800d768 <tcp_output_segment+0x1a0>)
 800d728:	f240 621c 	movw	r2, #1564	; 0x61c
 800d72c:	4914      	ldr	r1, [pc, #80]	; (800d780 <tcp_output_segment+0x1b8>)
 800d72e:	4810      	ldr	r0, [pc, #64]	; (800d770 <tcp_output_segment+0x1a8>)
 800d730:	f003 fac6 	bl	8010cc0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	6858      	ldr	r0, [r3, #4]
 800d738:	68b9      	ldr	r1, [r7, #8]
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	1d1c      	adds	r4, r3, #4
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	7add      	ldrb	r5, [r3, #11]
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	7a9b      	ldrb	r3, [r3, #10]
 800d746:	687a      	ldr	r2, [r7, #4]
 800d748:	9202      	str	r2, [sp, #8]
 800d74a:	2206      	movs	r2, #6
 800d74c:	9201      	str	r2, [sp, #4]
 800d74e:	9300      	str	r3, [sp, #0]
 800d750:	462b      	mov	r3, r5
 800d752:	4622      	mov	r2, r4
 800d754:	f002 fa2c 	bl	800fbb0 <ip4_output_if>
 800d758:	4603      	mov	r3, r0
 800d75a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d75c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d760:	4618      	mov	r0, r3
 800d762:	3720      	adds	r7, #32
 800d764:	46bd      	mov	sp, r7
 800d766:	bdb0      	pop	{r4, r5, r7, pc}
 800d768:	0801351c 	.word	0x0801351c
 800d76c:	08013ae0 	.word	0x08013ae0
 800d770:	08013570 	.word	0x08013570
 800d774:	08013b00 	.word	0x08013b00
 800d778:	08013b20 	.word	0x08013b20
 800d77c:	20007f4c 	.word	0x20007f4c
 800d780:	08013b44 	.word	0x08013b44

0800d784 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d784:	b5b0      	push	{r4, r5, r7, lr}
 800d786:	b084      	sub	sp, #16
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d106      	bne.n	800d7a0 <tcp_rexmit_rto_prepare+0x1c>
 800d792:	4b31      	ldr	r3, [pc, #196]	; (800d858 <tcp_rexmit_rto_prepare+0xd4>)
 800d794:	f240 6263 	movw	r2, #1635	; 0x663
 800d798:	4930      	ldr	r1, [pc, #192]	; (800d85c <tcp_rexmit_rto_prepare+0xd8>)
 800d79a:	4831      	ldr	r0, [pc, #196]	; (800d860 <tcp_rexmit_rto_prepare+0xdc>)
 800d79c:	f003 fa90 	bl	8010cc0 <iprintf>

  if (pcb->unacked == NULL) {
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d102      	bne.n	800d7ae <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d7a8:	f06f 0305 	mvn.w	r3, #5
 800d7ac:	e050      	b.n	800d850 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7b2:	60fb      	str	r3, [r7, #12]
 800d7b4:	e00b      	b.n	800d7ce <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d7b6:	68f8      	ldr	r0, [r7, #12]
 800d7b8:	f7ff fee6 	bl	800d588 <tcp_output_segment_busy>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d002      	beq.n	800d7c8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d7c2:	f06f 0305 	mvn.w	r3, #5
 800d7c6:	e043      	b.n	800d850 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	60fb      	str	r3, [r7, #12]
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d1ef      	bne.n	800d7b6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d7d6:	68f8      	ldr	r0, [r7, #12]
 800d7d8:	f7ff fed6 	bl	800d588 <tcp_output_segment_busy>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d002      	beq.n	800d7e8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d7e2:	f06f 0305 	mvn.w	r3, #5
 800d7e6:	e033      	b.n	800d850 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	8b5b      	ldrh	r3, [r3, #26]
 800d802:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d806:	b29a      	uxth	r2, r3
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	68db      	ldr	r3, [r3, #12]
 800d810:	685b      	ldr	r3, [r3, #4]
 800d812:	4618      	mov	r0, r3
 800d814:	f7f9 fba3 	bl	8006f5e <lwip_htonl>
 800d818:	4604      	mov	r4, r0
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	891b      	ldrh	r3, [r3, #8]
 800d81e:	461d      	mov	r5, r3
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	68db      	ldr	r3, [r3, #12]
 800d824:	899b      	ldrh	r3, [r3, #12]
 800d826:	b29b      	uxth	r3, r3
 800d828:	4618      	mov	r0, r3
 800d82a:	f7f9 fb83 	bl	8006f34 <lwip_htons>
 800d82e:	4603      	mov	r3, r0
 800d830:	b2db      	uxtb	r3, r3
 800d832:	f003 0303 	and.w	r3, r3, #3
 800d836:	2b00      	cmp	r3, #0
 800d838:	d001      	beq.n	800d83e <tcp_rexmit_rto_prepare+0xba>
 800d83a:	2301      	movs	r3, #1
 800d83c:	e000      	b.n	800d840 <tcp_rexmit_rto_prepare+0xbc>
 800d83e:	2300      	movs	r3, #0
 800d840:	442b      	add	r3, r5
 800d842:	18e2      	adds	r2, r4, r3
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2200      	movs	r2, #0
 800d84c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800d84e:	2300      	movs	r3, #0
}
 800d850:	4618      	mov	r0, r3
 800d852:	3710      	adds	r7, #16
 800d854:	46bd      	mov	sp, r7
 800d856:	bdb0      	pop	{r4, r5, r7, pc}
 800d858:	0801351c 	.word	0x0801351c
 800d85c:	08013b58 	.word	0x08013b58
 800d860:	08013570 	.word	0x08013570

0800d864 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b082      	sub	sp, #8
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d106      	bne.n	800d880 <tcp_rexmit_rto_commit+0x1c>
 800d872:	4b0d      	ldr	r3, [pc, #52]	; (800d8a8 <tcp_rexmit_rto_commit+0x44>)
 800d874:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d878:	490c      	ldr	r1, [pc, #48]	; (800d8ac <tcp_rexmit_rto_commit+0x48>)
 800d87a:	480d      	ldr	r0, [pc, #52]	; (800d8b0 <tcp_rexmit_rto_commit+0x4c>)
 800d87c:	f003 fa20 	bl	8010cc0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d886:	2bff      	cmp	r3, #255	; 0xff
 800d888:	d007      	beq.n	800d89a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d890:	3301      	adds	r3, #1
 800d892:	b2da      	uxtb	r2, r3
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d89a:	6878      	ldr	r0, [r7, #4]
 800d89c:	f7ff fc7a 	bl	800d194 <tcp_output>
}
 800d8a0:	bf00      	nop
 800d8a2:	3708      	adds	r7, #8
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}
 800d8a8:	0801351c 	.word	0x0801351c
 800d8ac:	08013b7c 	.word	0x08013b7c
 800d8b0:	08013570 	.word	0x08013570

0800d8b4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b082      	sub	sp, #8
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d106      	bne.n	800d8d0 <tcp_rexmit_rto+0x1c>
 800d8c2:	4b0a      	ldr	r3, [pc, #40]	; (800d8ec <tcp_rexmit_rto+0x38>)
 800d8c4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d8c8:	4909      	ldr	r1, [pc, #36]	; (800d8f0 <tcp_rexmit_rto+0x3c>)
 800d8ca:	480a      	ldr	r0, [pc, #40]	; (800d8f4 <tcp_rexmit_rto+0x40>)
 800d8cc:	f003 f9f8 	bl	8010cc0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f7ff ff57 	bl	800d784 <tcp_rexmit_rto_prepare>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d102      	bne.n	800d8e2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f7ff ffc1 	bl	800d864 <tcp_rexmit_rto_commit>
  }
}
 800d8e2:	bf00      	nop
 800d8e4:	3708      	adds	r7, #8
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
 800d8ea:	bf00      	nop
 800d8ec:	0801351c 	.word	0x0801351c
 800d8f0:	08013ba0 	.word	0x08013ba0
 800d8f4:	08013570 	.word	0x08013570

0800d8f8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d8f8:	b590      	push	{r4, r7, lr}
 800d8fa:	b085      	sub	sp, #20
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d106      	bne.n	800d914 <tcp_rexmit+0x1c>
 800d906:	4b2f      	ldr	r3, [pc, #188]	; (800d9c4 <tcp_rexmit+0xcc>)
 800d908:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d90c:	492e      	ldr	r1, [pc, #184]	; (800d9c8 <tcp_rexmit+0xd0>)
 800d90e:	482f      	ldr	r0, [pc, #188]	; (800d9cc <tcp_rexmit+0xd4>)
 800d910:	f003 f9d6 	bl	8010cc0 <iprintf>

  if (pcb->unacked == NULL) {
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d102      	bne.n	800d922 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d91c:	f06f 0305 	mvn.w	r3, #5
 800d920:	e04c      	b.n	800d9bc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d926:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d928:	68b8      	ldr	r0, [r7, #8]
 800d92a:	f7ff fe2d 	bl	800d588 <tcp_output_segment_busy>
 800d92e:	4603      	mov	r3, r0
 800d930:	2b00      	cmp	r3, #0
 800d932:	d002      	beq.n	800d93a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d934:	f06f 0305 	mvn.w	r3, #5
 800d938:	e040      	b.n	800d9bc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	681a      	ldr	r2, [r3, #0]
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	336c      	adds	r3, #108	; 0x6c
 800d946:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d948:	e002      	b.n	800d950 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d011      	beq.n	800d97c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	68db      	ldr	r3, [r3, #12]
 800d95e:	685b      	ldr	r3, [r3, #4]
 800d960:	4618      	mov	r0, r3
 800d962:	f7f9 fafc 	bl	8006f5e <lwip_htonl>
 800d966:	4604      	mov	r4, r0
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	68db      	ldr	r3, [r3, #12]
 800d96c:	685b      	ldr	r3, [r3, #4]
 800d96e:	4618      	mov	r0, r3
 800d970:	f7f9 faf5 	bl	8006f5e <lwip_htonl>
 800d974:	4603      	mov	r3, r0
 800d976:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d978:	2b00      	cmp	r3, #0
 800d97a:	dbe6      	blt.n	800d94a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	681a      	ldr	r2, [r3, #0]
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	68ba      	ldr	r2, [r7, #8]
 800d988:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d103      	bne.n	800d99a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2200      	movs	r2, #0
 800d996:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d9a0:	2bff      	cmp	r3, #255	; 0xff
 800d9a2:	d007      	beq.n	800d9b4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	b2da      	uxtb	r2, r3
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d9ba:	2300      	movs	r3, #0
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3714      	adds	r7, #20
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd90      	pop	{r4, r7, pc}
 800d9c4:	0801351c 	.word	0x0801351c
 800d9c8:	08013bbc 	.word	0x08013bbc
 800d9cc:	08013570 	.word	0x08013570

0800d9d0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b082      	sub	sp, #8
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d106      	bne.n	800d9ec <tcp_rexmit_fast+0x1c>
 800d9de:	4b2a      	ldr	r3, [pc, #168]	; (800da88 <tcp_rexmit_fast+0xb8>)
 800d9e0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d9e4:	4929      	ldr	r1, [pc, #164]	; (800da8c <tcp_rexmit_fast+0xbc>)
 800d9e6:	482a      	ldr	r0, [pc, #168]	; (800da90 <tcp_rexmit_fast+0xc0>)
 800d9e8:	f003 f96a 	bl	8010cc0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d044      	beq.n	800da7e <tcp_rexmit_fast+0xae>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	8b5b      	ldrh	r3, [r3, #26]
 800d9f8:	f003 0304 	and.w	r3, r3, #4
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d13e      	bne.n	800da7e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f7ff ff79 	bl	800d8f8 <tcp_rexmit>
 800da06:	4603      	mov	r3, r0
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d138      	bne.n	800da7e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800da18:	4293      	cmp	r3, r2
 800da1a:	bf28      	it	cs
 800da1c:	4613      	movcs	r3, r2
 800da1e:	b29b      	uxth	r3, r3
 800da20:	0fda      	lsrs	r2, r3, #31
 800da22:	4413      	add	r3, r2
 800da24:	105b      	asrs	r3, r3, #1
 800da26:	b29a      	uxth	r2, r3
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800da34:	461a      	mov	r2, r3
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da3a:	005b      	lsls	r3, r3, #1
 800da3c:	429a      	cmp	r2, r3
 800da3e:	d206      	bcs.n	800da4e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da44:	005b      	lsls	r3, r3, #1
 800da46:	b29a      	uxth	r2, r3
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da58:	4619      	mov	r1, r3
 800da5a:	0049      	lsls	r1, r1, #1
 800da5c:	440b      	add	r3, r1
 800da5e:	b29b      	uxth	r3, r3
 800da60:	4413      	add	r3, r2
 800da62:	b29a      	uxth	r2, r3
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	8b5b      	ldrh	r3, [r3, #26]
 800da6e:	f043 0304 	orr.w	r3, r3, #4
 800da72:	b29a      	uxth	r2, r3
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2200      	movs	r2, #0
 800da7c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800da7e:	bf00      	nop
 800da80:	3708      	adds	r7, #8
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	0801351c 	.word	0x0801351c
 800da8c:	08013bd4 	.word	0x08013bd4
 800da90:	08013570 	.word	0x08013570

0800da94 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b086      	sub	sp, #24
 800da98:	af00      	add	r7, sp, #0
 800da9a:	60f8      	str	r0, [r7, #12]
 800da9c:	607b      	str	r3, [r7, #4]
 800da9e:	460b      	mov	r3, r1
 800daa0:	817b      	strh	r3, [r7, #10]
 800daa2:	4613      	mov	r3, r2
 800daa4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800daa6:	897a      	ldrh	r2, [r7, #10]
 800daa8:	893b      	ldrh	r3, [r7, #8]
 800daaa:	4413      	add	r3, r2
 800daac:	b29b      	uxth	r3, r3
 800daae:	3314      	adds	r3, #20
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dab6:	4619      	mov	r1, r3
 800dab8:	2022      	movs	r0, #34	; 0x22
 800daba:	f7fa fb4d 	bl	8008158 <pbuf_alloc>
 800dabe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d04d      	beq.n	800db62 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800dac6:	897b      	ldrh	r3, [r7, #10]
 800dac8:	3313      	adds	r3, #19
 800daca:	697a      	ldr	r2, [r7, #20]
 800dacc:	8952      	ldrh	r2, [r2, #10]
 800dace:	4293      	cmp	r3, r2
 800dad0:	db06      	blt.n	800dae0 <tcp_output_alloc_header_common+0x4c>
 800dad2:	4b26      	ldr	r3, [pc, #152]	; (800db6c <tcp_output_alloc_header_common+0xd8>)
 800dad4:	f240 7223 	movw	r2, #1827	; 0x723
 800dad8:	4925      	ldr	r1, [pc, #148]	; (800db70 <tcp_output_alloc_header_common+0xdc>)
 800dada:	4826      	ldr	r0, [pc, #152]	; (800db74 <tcp_output_alloc_header_common+0xe0>)
 800dadc:	f003 f8f0 	bl	8010cc0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	685b      	ldr	r3, [r3, #4]
 800dae4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800dae6:	8c3b      	ldrh	r3, [r7, #32]
 800dae8:	4618      	mov	r0, r3
 800daea:	f7f9 fa23 	bl	8006f34 <lwip_htons>
 800daee:	4603      	mov	r3, r0
 800daf0:	461a      	mov	r2, r3
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800daf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800daf8:	4618      	mov	r0, r3
 800dafa:	f7f9 fa1b 	bl	8006f34 <lwip_htons>
 800dafe:	4603      	mov	r3, r0
 800db00:	461a      	mov	r2, r3
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800db06:	693b      	ldr	r3, [r7, #16]
 800db08:	687a      	ldr	r2, [r7, #4]
 800db0a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800db0c:	68f8      	ldr	r0, [r7, #12]
 800db0e:	f7f9 fa26 	bl	8006f5e <lwip_htonl>
 800db12:	4602      	mov	r2, r0
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800db18:	897b      	ldrh	r3, [r7, #10]
 800db1a:	089b      	lsrs	r3, r3, #2
 800db1c:	b29b      	uxth	r3, r3
 800db1e:	3305      	adds	r3, #5
 800db20:	b29b      	uxth	r3, r3
 800db22:	031b      	lsls	r3, r3, #12
 800db24:	b29a      	uxth	r2, r3
 800db26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800db2a:	b29b      	uxth	r3, r3
 800db2c:	4313      	orrs	r3, r2
 800db2e:	b29b      	uxth	r3, r3
 800db30:	4618      	mov	r0, r3
 800db32:	f7f9 f9ff 	bl	8006f34 <lwip_htons>
 800db36:	4603      	mov	r3, r0
 800db38:	461a      	mov	r2, r3
 800db3a:	693b      	ldr	r3, [r7, #16]
 800db3c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800db3e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800db40:	4618      	mov	r0, r3
 800db42:	f7f9 f9f7 	bl	8006f34 <lwip_htons>
 800db46:	4603      	mov	r3, r0
 800db48:	461a      	mov	r2, r3
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	2200      	movs	r2, #0
 800db52:	741a      	strb	r2, [r3, #16]
 800db54:	2200      	movs	r2, #0
 800db56:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	2200      	movs	r2, #0
 800db5c:	749a      	strb	r2, [r3, #18]
 800db5e:	2200      	movs	r2, #0
 800db60:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800db62:	697b      	ldr	r3, [r7, #20]
}
 800db64:	4618      	mov	r0, r3
 800db66:	3718      	adds	r7, #24
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}
 800db6c:	0801351c 	.word	0x0801351c
 800db70:	08013bf4 	.word	0x08013bf4
 800db74:	08013570 	.word	0x08013570

0800db78 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800db78:	b5b0      	push	{r4, r5, r7, lr}
 800db7a:	b08a      	sub	sp, #40	; 0x28
 800db7c:	af04      	add	r7, sp, #16
 800db7e:	60f8      	str	r0, [r7, #12]
 800db80:	607b      	str	r3, [r7, #4]
 800db82:	460b      	mov	r3, r1
 800db84:	817b      	strh	r3, [r7, #10]
 800db86:	4613      	mov	r3, r2
 800db88:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d106      	bne.n	800db9e <tcp_output_alloc_header+0x26>
 800db90:	4b15      	ldr	r3, [pc, #84]	; (800dbe8 <tcp_output_alloc_header+0x70>)
 800db92:	f240 7242 	movw	r2, #1858	; 0x742
 800db96:	4915      	ldr	r1, [pc, #84]	; (800dbec <tcp_output_alloc_header+0x74>)
 800db98:	4815      	ldr	r0, [pc, #84]	; (800dbf0 <tcp_output_alloc_header+0x78>)
 800db9a:	f003 f891 	bl	8010cc0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	8adb      	ldrh	r3, [r3, #22]
 800dba6:	68fa      	ldr	r2, [r7, #12]
 800dba8:	8b12      	ldrh	r2, [r2, #24]
 800dbaa:	68f9      	ldr	r1, [r7, #12]
 800dbac:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800dbae:	893d      	ldrh	r5, [r7, #8]
 800dbb0:	897c      	ldrh	r4, [r7, #10]
 800dbb2:	9103      	str	r1, [sp, #12]
 800dbb4:	2110      	movs	r1, #16
 800dbb6:	9102      	str	r1, [sp, #8]
 800dbb8:	9201      	str	r2, [sp, #4]
 800dbba:	9300      	str	r3, [sp, #0]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	462a      	mov	r2, r5
 800dbc0:	4621      	mov	r1, r4
 800dbc2:	f7ff ff67 	bl	800da94 <tcp_output_alloc_header_common>
 800dbc6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d006      	beq.n	800dbdc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbd2:	68fa      	ldr	r2, [r7, #12]
 800dbd4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800dbd6:	441a      	add	r2, r3
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800dbdc:	697b      	ldr	r3, [r7, #20]
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3718      	adds	r7, #24
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bdb0      	pop	{r4, r5, r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	0801351c 	.word	0x0801351c
 800dbec:	08013c24 	.word	0x08013c24
 800dbf0:	08013570 	.word	0x08013570

0800dbf4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b088      	sub	sp, #32
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	60f8      	str	r0, [r7, #12]
 800dbfc:	60b9      	str	r1, [r7, #8]
 800dbfe:	4611      	mov	r1, r2
 800dc00:	461a      	mov	r2, r3
 800dc02:	460b      	mov	r3, r1
 800dc04:	71fb      	strb	r3, [r7, #7]
 800dc06:	4613      	mov	r3, r2
 800dc08:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d106      	bne.n	800dc22 <tcp_output_fill_options+0x2e>
 800dc14:	4b13      	ldr	r3, [pc, #76]	; (800dc64 <tcp_output_fill_options+0x70>)
 800dc16:	f240 7256 	movw	r2, #1878	; 0x756
 800dc1a:	4913      	ldr	r1, [pc, #76]	; (800dc68 <tcp_output_fill_options+0x74>)
 800dc1c:	4813      	ldr	r0, [pc, #76]	; (800dc6c <tcp_output_fill_options+0x78>)
 800dc1e:	f003 f84f 	bl	8010cc0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	685b      	ldr	r3, [r3, #4]
 800dc26:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800dc28:	69bb      	ldr	r3, [r7, #24]
 800dc2a:	3314      	adds	r3, #20
 800dc2c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800dc2e:	69bb      	ldr	r3, [r7, #24]
 800dc30:	f103 0214 	add.w	r2, r3, #20
 800dc34:	8bfb      	ldrh	r3, [r7, #30]
 800dc36:	009b      	lsls	r3, r3, #2
 800dc38:	4619      	mov	r1, r3
 800dc3a:	79fb      	ldrb	r3, [r7, #7]
 800dc3c:	009b      	lsls	r3, r3, #2
 800dc3e:	f003 0304 	and.w	r3, r3, #4
 800dc42:	440b      	add	r3, r1
 800dc44:	4413      	add	r3, r2
 800dc46:	697a      	ldr	r2, [r7, #20]
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d006      	beq.n	800dc5a <tcp_output_fill_options+0x66>
 800dc4c:	4b05      	ldr	r3, [pc, #20]	; (800dc64 <tcp_output_fill_options+0x70>)
 800dc4e:	f240 7275 	movw	r2, #1909	; 0x775
 800dc52:	4907      	ldr	r1, [pc, #28]	; (800dc70 <tcp_output_fill_options+0x7c>)
 800dc54:	4805      	ldr	r0, [pc, #20]	; (800dc6c <tcp_output_fill_options+0x78>)
 800dc56:	f003 f833 	bl	8010cc0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800dc5a:	bf00      	nop
 800dc5c:	3720      	adds	r7, #32
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop
 800dc64:	0801351c 	.word	0x0801351c
 800dc68:	08013c4c 	.word	0x08013c4c
 800dc6c:	08013570 	.word	0x08013570
 800dc70:	08013b44 	.word	0x08013b44

0800dc74 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b08a      	sub	sp, #40	; 0x28
 800dc78:	af04      	add	r7, sp, #16
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	60b9      	str	r1, [r7, #8]
 800dc7e:	607a      	str	r2, [r7, #4]
 800dc80:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d106      	bne.n	800dc96 <tcp_output_control_segment+0x22>
 800dc88:	4b1c      	ldr	r3, [pc, #112]	; (800dcfc <tcp_output_control_segment+0x88>)
 800dc8a:	f240 7287 	movw	r2, #1927	; 0x787
 800dc8e:	491c      	ldr	r1, [pc, #112]	; (800dd00 <tcp_output_control_segment+0x8c>)
 800dc90:	481c      	ldr	r0, [pc, #112]	; (800dd04 <tcp_output_control_segment+0x90>)
 800dc92:	f003 f815 	bl	8010cc0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800dc96:	683a      	ldr	r2, [r7, #0]
 800dc98:	6879      	ldr	r1, [r7, #4]
 800dc9a:	68f8      	ldr	r0, [r7, #12]
 800dc9c:	f7fe ff3a 	bl	800cb14 <tcp_route>
 800dca0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d102      	bne.n	800dcae <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800dca8:	23fc      	movs	r3, #252	; 0xfc
 800dcaa:	75fb      	strb	r3, [r7, #23]
 800dcac:	e01c      	b.n	800dce8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d006      	beq.n	800dcc2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	7adb      	ldrb	r3, [r3, #11]
 800dcb8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	7a9b      	ldrb	r3, [r3, #10]
 800dcbe:	757b      	strb	r3, [r7, #21]
 800dcc0:	e003      	b.n	800dcca <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800dcc2:	23ff      	movs	r3, #255	; 0xff
 800dcc4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800dcca:	7dba      	ldrb	r2, [r7, #22]
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	9302      	str	r3, [sp, #8]
 800dcd0:	2306      	movs	r3, #6
 800dcd2:	9301      	str	r3, [sp, #4]
 800dcd4:	7d7b      	ldrb	r3, [r7, #21]
 800dcd6:	9300      	str	r3, [sp, #0]
 800dcd8:	4613      	mov	r3, r2
 800dcda:	683a      	ldr	r2, [r7, #0]
 800dcdc:	6879      	ldr	r1, [r7, #4]
 800dcde:	68b8      	ldr	r0, [r7, #8]
 800dce0:	f001 ff66 	bl	800fbb0 <ip4_output_if>
 800dce4:	4603      	mov	r3, r0
 800dce6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800dce8:	68b8      	ldr	r0, [r7, #8]
 800dcea:	f7fa fd19 	bl	8008720 <pbuf_free>
  return err;
 800dcee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3718      	adds	r7, #24
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	0801351c 	.word	0x0801351c
 800dd00:	08013c74 	.word	0x08013c74
 800dd04:	08013570 	.word	0x08013570

0800dd08 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800dd08:	b590      	push	{r4, r7, lr}
 800dd0a:	b08b      	sub	sp, #44	; 0x2c
 800dd0c:	af04      	add	r7, sp, #16
 800dd0e:	60f8      	str	r0, [r7, #12]
 800dd10:	60b9      	str	r1, [r7, #8]
 800dd12:	607a      	str	r2, [r7, #4]
 800dd14:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d106      	bne.n	800dd2a <tcp_rst+0x22>
 800dd1c:	4b1f      	ldr	r3, [pc, #124]	; (800dd9c <tcp_rst+0x94>)
 800dd1e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800dd22:	491f      	ldr	r1, [pc, #124]	; (800dda0 <tcp_rst+0x98>)
 800dd24:	481f      	ldr	r0, [pc, #124]	; (800dda4 <tcp_rst+0x9c>)
 800dd26:	f002 ffcb 	bl	8010cc0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800dd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d106      	bne.n	800dd3e <tcp_rst+0x36>
 800dd30:	4b1a      	ldr	r3, [pc, #104]	; (800dd9c <tcp_rst+0x94>)
 800dd32:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800dd36:	491c      	ldr	r1, [pc, #112]	; (800dda8 <tcp_rst+0xa0>)
 800dd38:	481a      	ldr	r0, [pc, #104]	; (800dda4 <tcp_rst+0x9c>)
 800dd3a:	f002 ffc1 	bl	8010cc0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dd3e:	2300      	movs	r3, #0
 800dd40:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800dd42:	f246 0308 	movw	r3, #24584	; 0x6008
 800dd46:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800dd48:	7dfb      	ldrb	r3, [r7, #23]
 800dd4a:	b29c      	uxth	r4, r3
 800dd4c:	68b8      	ldr	r0, [r7, #8]
 800dd4e:	f7f9 f906 	bl	8006f5e <lwip_htonl>
 800dd52:	4602      	mov	r2, r0
 800dd54:	8abb      	ldrh	r3, [r7, #20]
 800dd56:	9303      	str	r3, [sp, #12]
 800dd58:	2314      	movs	r3, #20
 800dd5a:	9302      	str	r3, [sp, #8]
 800dd5c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dd5e:	9301      	str	r3, [sp, #4]
 800dd60:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dd62:	9300      	str	r3, [sp, #0]
 800dd64:	4613      	mov	r3, r2
 800dd66:	2200      	movs	r2, #0
 800dd68:	4621      	mov	r1, r4
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f7ff fe92 	bl	800da94 <tcp_output_alloc_header_common>
 800dd70:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d00c      	beq.n	800dd92 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dd78:	7dfb      	ldrb	r3, [r7, #23]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	6939      	ldr	r1, [r7, #16]
 800dd7e:	68f8      	ldr	r0, [r7, #12]
 800dd80:	f7ff ff38 	bl	800dbf4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800dd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd86:	683a      	ldr	r2, [r7, #0]
 800dd88:	6939      	ldr	r1, [r7, #16]
 800dd8a:	68f8      	ldr	r0, [r7, #12]
 800dd8c:	f7ff ff72 	bl	800dc74 <tcp_output_control_segment>
 800dd90:	e000      	b.n	800dd94 <tcp_rst+0x8c>
    return;
 800dd92:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800dd94:	371c      	adds	r7, #28
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd90      	pop	{r4, r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	0801351c 	.word	0x0801351c
 800dda0:	08013ca0 	.word	0x08013ca0
 800dda4:	08013570 	.word	0x08013570
 800dda8:	08013cbc 	.word	0x08013cbc

0800ddac <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ddac:	b590      	push	{r4, r7, lr}
 800ddae:	b087      	sub	sp, #28
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d106      	bne.n	800ddd0 <tcp_send_empty_ack+0x24>
 800ddc2:	4b28      	ldr	r3, [pc, #160]	; (800de64 <tcp_send_empty_ack+0xb8>)
 800ddc4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800ddc8:	4927      	ldr	r1, [pc, #156]	; (800de68 <tcp_send_empty_ack+0xbc>)
 800ddca:	4828      	ldr	r0, [pc, #160]	; (800de6c <tcp_send_empty_ack+0xc0>)
 800ddcc:	f002 ff78 	bl	8010cc0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ddd0:	7dfb      	ldrb	r3, [r7, #23]
 800ddd2:	009b      	lsls	r3, r3, #2
 800ddd4:	b2db      	uxtb	r3, r3
 800ddd6:	f003 0304 	and.w	r3, r3, #4
 800ddda:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800dddc:	7d7b      	ldrb	r3, [r7, #21]
 800ddde:	b29c      	uxth	r4, r3
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dde4:	4618      	mov	r0, r3
 800dde6:	f7f9 f8ba 	bl	8006f5e <lwip_htonl>
 800ddea:	4603      	mov	r3, r0
 800ddec:	2200      	movs	r2, #0
 800ddee:	4621      	mov	r1, r4
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f7ff fec1 	bl	800db78 <tcp_output_alloc_header>
 800ddf6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d109      	bne.n	800de12 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	8b5b      	ldrh	r3, [r3, #26]
 800de02:	f043 0303 	orr.w	r3, r3, #3
 800de06:	b29a      	uxth	r2, r3
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800de0c:	f06f 0301 	mvn.w	r3, #1
 800de10:	e023      	b.n	800de5a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800de12:	7dbb      	ldrb	r3, [r7, #22]
 800de14:	7dfa      	ldrb	r2, [r7, #23]
 800de16:	6939      	ldr	r1, [r7, #16]
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f7ff feeb 	bl	800dbf4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800de1e:	687a      	ldr	r2, [r7, #4]
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	3304      	adds	r3, #4
 800de24:	6939      	ldr	r1, [r7, #16]
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f7ff ff24 	bl	800dc74 <tcp_output_control_segment>
 800de2c:	4603      	mov	r3, r0
 800de2e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800de30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d007      	beq.n	800de48 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	8b5b      	ldrh	r3, [r3, #26]
 800de3c:	f043 0303 	orr.w	r3, r3, #3
 800de40:	b29a      	uxth	r2, r3
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	835a      	strh	r2, [r3, #26]
 800de46:	e006      	b.n	800de56 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	8b5b      	ldrh	r3, [r3, #26]
 800de4c:	f023 0303 	bic.w	r3, r3, #3
 800de50:	b29a      	uxth	r2, r3
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800de56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	371c      	adds	r7, #28
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd90      	pop	{r4, r7, pc}
 800de62:	bf00      	nop
 800de64:	0801351c 	.word	0x0801351c
 800de68:	08013cd8 	.word	0x08013cd8
 800de6c:	08013570 	.word	0x08013570

0800de70 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800de70:	b590      	push	{r4, r7, lr}
 800de72:	b087      	sub	sp, #28
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800de78:	2300      	movs	r3, #0
 800de7a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d106      	bne.n	800de90 <tcp_keepalive+0x20>
 800de82:	4b18      	ldr	r3, [pc, #96]	; (800dee4 <tcp_keepalive+0x74>)
 800de84:	f640 0224 	movw	r2, #2084	; 0x824
 800de88:	4917      	ldr	r1, [pc, #92]	; (800dee8 <tcp_keepalive+0x78>)
 800de8a:	4818      	ldr	r0, [pc, #96]	; (800deec <tcp_keepalive+0x7c>)
 800de8c:	f002 ff18 	bl	8010cc0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800de90:	7dfb      	ldrb	r3, [r7, #23]
 800de92:	b29c      	uxth	r4, r3
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de98:	3b01      	subs	r3, #1
 800de9a:	4618      	mov	r0, r3
 800de9c:	f7f9 f85f 	bl	8006f5e <lwip_htonl>
 800dea0:	4603      	mov	r3, r0
 800dea2:	2200      	movs	r2, #0
 800dea4:	4621      	mov	r1, r4
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f7ff fe66 	bl	800db78 <tcp_output_alloc_header>
 800deac:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d102      	bne.n	800deba <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800deb4:	f04f 33ff 	mov.w	r3, #4294967295
 800deb8:	e010      	b.n	800dedc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800deba:	7dfb      	ldrb	r3, [r7, #23]
 800debc:	2200      	movs	r2, #0
 800debe:	6939      	ldr	r1, [r7, #16]
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f7ff fe97 	bl	800dbf4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dec6:	687a      	ldr	r2, [r7, #4]
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	3304      	adds	r3, #4
 800decc:	6939      	ldr	r1, [r7, #16]
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f7ff fed0 	bl	800dc74 <tcp_output_control_segment>
 800ded4:	4603      	mov	r3, r0
 800ded6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ded8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dedc:	4618      	mov	r0, r3
 800dede:	371c      	adds	r7, #28
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd90      	pop	{r4, r7, pc}
 800dee4:	0801351c 	.word	0x0801351c
 800dee8:	08013cf8 	.word	0x08013cf8
 800deec:	08013570 	.word	0x08013570

0800def0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800def0:	b590      	push	{r4, r7, lr}
 800def2:	b08b      	sub	sp, #44	; 0x2c
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800def8:	2300      	movs	r3, #0
 800defa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d106      	bne.n	800df12 <tcp_zero_window_probe+0x22>
 800df04:	4b4c      	ldr	r3, [pc, #304]	; (800e038 <tcp_zero_window_probe+0x148>)
 800df06:	f640 024f 	movw	r2, #2127	; 0x84f
 800df0a:	494c      	ldr	r1, [pc, #304]	; (800e03c <tcp_zero_window_probe+0x14c>)
 800df0c:	484c      	ldr	r0, [pc, #304]	; (800e040 <tcp_zero_window_probe+0x150>)
 800df0e:	f002 fed7 	bl	8010cc0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df16:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800df18:	6a3b      	ldr	r3, [r7, #32]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d101      	bne.n	800df22 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800df1e:	2300      	movs	r3, #0
 800df20:	e086      	b.n	800e030 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800df28:	2bff      	cmp	r3, #255	; 0xff
 800df2a:	d007      	beq.n	800df3c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800df32:	3301      	adds	r3, #1
 800df34:	b2da      	uxtb	r2, r3
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800df3c:	6a3b      	ldr	r3, [r7, #32]
 800df3e:	68db      	ldr	r3, [r3, #12]
 800df40:	899b      	ldrh	r3, [r3, #12]
 800df42:	b29b      	uxth	r3, r3
 800df44:	4618      	mov	r0, r3
 800df46:	f7f8 fff5 	bl	8006f34 <lwip_htons>
 800df4a:	4603      	mov	r3, r0
 800df4c:	b2db      	uxtb	r3, r3
 800df4e:	f003 0301 	and.w	r3, r3, #1
 800df52:	2b00      	cmp	r3, #0
 800df54:	d005      	beq.n	800df62 <tcp_zero_window_probe+0x72>
 800df56:	6a3b      	ldr	r3, [r7, #32]
 800df58:	891b      	ldrh	r3, [r3, #8]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d101      	bne.n	800df62 <tcp_zero_window_probe+0x72>
 800df5e:	2301      	movs	r3, #1
 800df60:	e000      	b.n	800df64 <tcp_zero_window_probe+0x74>
 800df62:	2300      	movs	r3, #0
 800df64:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800df66:	7ffb      	ldrb	r3, [r7, #31]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	bf0c      	ite	eq
 800df6c:	2301      	moveq	r3, #1
 800df6e:	2300      	movne	r3, #0
 800df70:	b2db      	uxtb	r3, r3
 800df72:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800df74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df78:	b299      	uxth	r1, r3
 800df7a:	6a3b      	ldr	r3, [r7, #32]
 800df7c:	68db      	ldr	r3, [r3, #12]
 800df7e:	685b      	ldr	r3, [r3, #4]
 800df80:	8bba      	ldrh	r2, [r7, #28]
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f7ff fdf8 	bl	800db78 <tcp_output_alloc_header>
 800df88:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800df8a:	69bb      	ldr	r3, [r7, #24]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d102      	bne.n	800df96 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800df90:	f04f 33ff 	mov.w	r3, #4294967295
 800df94:	e04c      	b.n	800e030 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800df96:	69bb      	ldr	r3, [r7, #24]
 800df98:	685b      	ldr	r3, [r3, #4]
 800df9a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800df9c:	7ffb      	ldrb	r3, [r7, #31]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d011      	beq.n	800dfc6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	899b      	ldrh	r3, [r3, #12]
 800dfa6:	b29b      	uxth	r3, r3
 800dfa8:	b21b      	sxth	r3, r3
 800dfaa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dfae:	b21c      	sxth	r4, r3
 800dfb0:	2011      	movs	r0, #17
 800dfb2:	f7f8 ffbf 	bl	8006f34 <lwip_htons>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	b21b      	sxth	r3, r3
 800dfba:	4323      	orrs	r3, r4
 800dfbc:	b21b      	sxth	r3, r3
 800dfbe:	b29a      	uxth	r2, r3
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	819a      	strh	r2, [r3, #12]
 800dfc4:	e010      	b.n	800dfe8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800dfc6:	69bb      	ldr	r3, [r7, #24]
 800dfc8:	685b      	ldr	r3, [r3, #4]
 800dfca:	3314      	adds	r3, #20
 800dfcc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800dfce:	6a3b      	ldr	r3, [r7, #32]
 800dfd0:	6858      	ldr	r0, [r3, #4]
 800dfd2:	6a3b      	ldr	r3, [r7, #32]
 800dfd4:	685b      	ldr	r3, [r3, #4]
 800dfd6:	891a      	ldrh	r2, [r3, #8]
 800dfd8:	6a3b      	ldr	r3, [r7, #32]
 800dfda:	891b      	ldrh	r3, [r3, #8]
 800dfdc:	1ad3      	subs	r3, r2, r3
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	2201      	movs	r2, #1
 800dfe2:	6939      	ldr	r1, [r7, #16]
 800dfe4:	f7fa fd86 	bl	8008af4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800dfe8:	6a3b      	ldr	r3, [r7, #32]
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7f8 ffb5 	bl	8006f5e <lwip_htonl>
 800dff4:	4603      	mov	r3, r0
 800dff6:	3301      	adds	r3, #1
 800dff8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	1ad3      	subs	r3, r2, r3
 800e002:	2b00      	cmp	r3, #0
 800e004:	da02      	bge.n	800e00c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	68fa      	ldr	r2, [r7, #12]
 800e00a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e00c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e010:	2200      	movs	r2, #0
 800e012:	69b9      	ldr	r1, [r7, #24]
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f7ff fded 	bl	800dbf4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e01a:	687a      	ldr	r2, [r7, #4]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	3304      	adds	r3, #4
 800e020:	69b9      	ldr	r1, [r7, #24]
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f7ff fe26 	bl	800dc74 <tcp_output_control_segment>
 800e028:	4603      	mov	r3, r0
 800e02a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e02c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e030:	4618      	mov	r0, r3
 800e032:	372c      	adds	r7, #44	; 0x2c
 800e034:	46bd      	mov	sp, r7
 800e036:	bd90      	pop	{r4, r7, pc}
 800e038:	0801351c 	.word	0x0801351c
 800e03c:	08013d14 	.word	0x08013d14
 800e040:	08013570 	.word	0x08013570

0800e044 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b082      	sub	sp, #8
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e04c:	f7fa fe40 	bl	8008cd0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e050:	4b0a      	ldr	r3, [pc, #40]	; (800e07c <tcpip_tcp_timer+0x38>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d103      	bne.n	800e060 <tcpip_tcp_timer+0x1c>
 800e058:	4b09      	ldr	r3, [pc, #36]	; (800e080 <tcpip_tcp_timer+0x3c>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d005      	beq.n	800e06c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e060:	2200      	movs	r2, #0
 800e062:	4908      	ldr	r1, [pc, #32]	; (800e084 <tcpip_tcp_timer+0x40>)
 800e064:	20fa      	movs	r0, #250	; 0xfa
 800e066:	f000 f8f3 	bl	800e250 <sys_timeout>
 800e06a:	e003      	b.n	800e074 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e06c:	4b06      	ldr	r3, [pc, #24]	; (800e088 <tcpip_tcp_timer+0x44>)
 800e06e:	2200      	movs	r2, #0
 800e070:	601a      	str	r2, [r3, #0]
  }
}
 800e072:	bf00      	nop
 800e074:	bf00      	nop
 800e076:	3708      	adds	r7, #8
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}
 800e07c:	20007f58 	.word	0x20007f58
 800e080:	20007f5c 	.word	0x20007f5c
 800e084:	0800e045 	.word	0x0800e045
 800e088:	20007fa4 	.word	0x20007fa4

0800e08c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e090:	4b0a      	ldr	r3, [pc, #40]	; (800e0bc <tcp_timer_needed+0x30>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d10f      	bne.n	800e0b8 <tcp_timer_needed+0x2c>
 800e098:	4b09      	ldr	r3, [pc, #36]	; (800e0c0 <tcp_timer_needed+0x34>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d103      	bne.n	800e0a8 <tcp_timer_needed+0x1c>
 800e0a0:	4b08      	ldr	r3, [pc, #32]	; (800e0c4 <tcp_timer_needed+0x38>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d007      	beq.n	800e0b8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e0a8:	4b04      	ldr	r3, [pc, #16]	; (800e0bc <tcp_timer_needed+0x30>)
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	4905      	ldr	r1, [pc, #20]	; (800e0c8 <tcp_timer_needed+0x3c>)
 800e0b2:	20fa      	movs	r0, #250	; 0xfa
 800e0b4:	f000 f8cc 	bl	800e250 <sys_timeout>
  }
}
 800e0b8:	bf00      	nop
 800e0ba:	bd80      	pop	{r7, pc}
 800e0bc:	20007fa4 	.word	0x20007fa4
 800e0c0:	20007f58 	.word	0x20007f58
 800e0c4:	20007f5c 	.word	0x20007f5c
 800e0c8:	0800e045 	.word	0x0800e045

0800e0cc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b086      	sub	sp, #24
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	60f8      	str	r0, [r7, #12]
 800e0d4:	60b9      	str	r1, [r7, #8]
 800e0d6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e0d8:	2006      	movs	r0, #6
 800e0da:	f7f9 fc5b 	bl	8007994 <memp_malloc>
 800e0de:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d109      	bne.n	800e0fa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d151      	bne.n	800e190 <sys_timeout_abs+0xc4>
 800e0ec:	4b2a      	ldr	r3, [pc, #168]	; (800e198 <sys_timeout_abs+0xcc>)
 800e0ee:	22be      	movs	r2, #190	; 0xbe
 800e0f0:	492a      	ldr	r1, [pc, #168]	; (800e19c <sys_timeout_abs+0xd0>)
 800e0f2:	482b      	ldr	r0, [pc, #172]	; (800e1a0 <sys_timeout_abs+0xd4>)
 800e0f4:	f002 fde4 	bl	8010cc0 <iprintf>
    return;
 800e0f8:	e04a      	b.n	800e190 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	68ba      	ldr	r2, [r7, #8]
 800e104:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	687a      	ldr	r2, [r7, #4]
 800e10a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	68fa      	ldr	r2, [r7, #12]
 800e110:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e112:	4b24      	ldr	r3, [pc, #144]	; (800e1a4 <sys_timeout_abs+0xd8>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d103      	bne.n	800e122 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e11a:	4a22      	ldr	r2, [pc, #136]	; (800e1a4 <sys_timeout_abs+0xd8>)
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	6013      	str	r3, [r2, #0]
    return;
 800e120:	e037      	b.n	800e192 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	685a      	ldr	r2, [r3, #4]
 800e126:	4b1f      	ldr	r3, [pc, #124]	; (800e1a4 <sys_timeout_abs+0xd8>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	1ad3      	subs	r3, r2, r3
 800e12e:	0fdb      	lsrs	r3, r3, #31
 800e130:	f003 0301 	and.w	r3, r3, #1
 800e134:	b2db      	uxtb	r3, r3
 800e136:	2b00      	cmp	r3, #0
 800e138:	d007      	beq.n	800e14a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e13a:	4b1a      	ldr	r3, [pc, #104]	; (800e1a4 <sys_timeout_abs+0xd8>)
 800e13c:	681a      	ldr	r2, [r3, #0]
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e142:	4a18      	ldr	r2, [pc, #96]	; (800e1a4 <sys_timeout_abs+0xd8>)
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	6013      	str	r3, [r2, #0]
 800e148:	e023      	b.n	800e192 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e14a:	4b16      	ldr	r3, [pc, #88]	; (800e1a4 <sys_timeout_abs+0xd8>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	617b      	str	r3, [r7, #20]
 800e150:	e01a      	b.n	800e188 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d00b      	beq.n	800e172 <sys_timeout_abs+0xa6>
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	685a      	ldr	r2, [r3, #4]
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	685b      	ldr	r3, [r3, #4]
 800e164:	1ad3      	subs	r3, r2, r3
 800e166:	0fdb      	lsrs	r3, r3, #31
 800e168:	f003 0301 	and.w	r3, r3, #1
 800e16c:	b2db      	uxtb	r3, r3
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d007      	beq.n	800e182 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	681a      	ldr	r2, [r3, #0]
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	693a      	ldr	r2, [r7, #16]
 800e17e:	601a      	str	r2, [r3, #0]
        break;
 800e180:	e007      	b.n	800e192 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	617b      	str	r3, [r7, #20]
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d1e1      	bne.n	800e152 <sys_timeout_abs+0x86>
 800e18e:	e000      	b.n	800e192 <sys_timeout_abs+0xc6>
    return;
 800e190:	bf00      	nop
      }
    }
  }
}
 800e192:	3718      	adds	r7, #24
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}
 800e198:	08013d38 	.word	0x08013d38
 800e19c:	08013d6c 	.word	0x08013d6c
 800e1a0:	08013dac 	.word	0x08013dac
 800e1a4:	20007f9c 	.word	0x20007f9c

0800e1a8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b086      	sub	sp, #24
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	4798      	blx	r3

  now = sys_now();
 800e1ba:	f7f8 fcf3 	bl	8006ba4 <sys_now>
 800e1be:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	681a      	ldr	r2, [r3, #0]
 800e1c4:	4b0f      	ldr	r3, [pc, #60]	; (800e204 <lwip_cyclic_timer+0x5c>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	4413      	add	r3, r2
 800e1ca:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e1cc:	68fa      	ldr	r2, [r7, #12]
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	1ad3      	subs	r3, r2, r3
 800e1d2:	0fdb      	lsrs	r3, r3, #31
 800e1d4:	f003 0301 	and.w	r3, r3, #1
 800e1d8:	b2db      	uxtb	r3, r3
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d009      	beq.n	800e1f2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	681a      	ldr	r2, [r3, #0]
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	4413      	add	r3, r2
 800e1e6:	687a      	ldr	r2, [r7, #4]
 800e1e8:	4907      	ldr	r1, [pc, #28]	; (800e208 <lwip_cyclic_timer+0x60>)
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7ff ff6e 	bl	800e0cc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e1f0:	e004      	b.n	800e1fc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e1f2:	687a      	ldr	r2, [r7, #4]
 800e1f4:	4904      	ldr	r1, [pc, #16]	; (800e208 <lwip_cyclic_timer+0x60>)
 800e1f6:	68f8      	ldr	r0, [r7, #12]
 800e1f8:	f7ff ff68 	bl	800e0cc <sys_timeout_abs>
}
 800e1fc:	bf00      	nop
 800e1fe:	3718      	adds	r7, #24
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}
 800e204:	20007fa0 	.word	0x20007fa0
 800e208:	0800e1a9 	.word	0x0800e1a9

0800e20c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b082      	sub	sp, #8
 800e210:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e212:	2301      	movs	r3, #1
 800e214:	607b      	str	r3, [r7, #4]
 800e216:	e00e      	b.n	800e236 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e218:	4a0b      	ldr	r2, [pc, #44]	; (800e248 <sys_timeouts_init+0x3c>)
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	00db      	lsls	r3, r3, #3
 800e224:	4a08      	ldr	r2, [pc, #32]	; (800e248 <sys_timeouts_init+0x3c>)
 800e226:	4413      	add	r3, r2
 800e228:	461a      	mov	r2, r3
 800e22a:	4908      	ldr	r1, [pc, #32]	; (800e24c <sys_timeouts_init+0x40>)
 800e22c:	f000 f810 	bl	800e250 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	3301      	adds	r3, #1
 800e234:	607b      	str	r3, [r7, #4]
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2b02      	cmp	r3, #2
 800e23a:	d9ed      	bls.n	800e218 <sys_timeouts_init+0xc>
  }
}
 800e23c:	bf00      	nop
 800e23e:	bf00      	nop
 800e240:	3708      	adds	r7, #8
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}
 800e246:	bf00      	nop
 800e248:	08014924 	.word	0x08014924
 800e24c:	0800e1a9 	.word	0x0800e1a9

0800e250 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b086      	sub	sp, #24
 800e254:	af00      	add	r7, sp, #0
 800e256:	60f8      	str	r0, [r7, #12]
 800e258:	60b9      	str	r1, [r7, #8]
 800e25a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e262:	d306      	bcc.n	800e272 <sys_timeout+0x22>
 800e264:	4b0a      	ldr	r3, [pc, #40]	; (800e290 <sys_timeout+0x40>)
 800e266:	f240 1229 	movw	r2, #297	; 0x129
 800e26a:	490a      	ldr	r1, [pc, #40]	; (800e294 <sys_timeout+0x44>)
 800e26c:	480a      	ldr	r0, [pc, #40]	; (800e298 <sys_timeout+0x48>)
 800e26e:	f002 fd27 	bl	8010cc0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e272:	f7f8 fc97 	bl	8006ba4 <sys_now>
 800e276:	4602      	mov	r2, r0
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	4413      	add	r3, r2
 800e27c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e27e:	687a      	ldr	r2, [r7, #4]
 800e280:	68b9      	ldr	r1, [r7, #8]
 800e282:	6978      	ldr	r0, [r7, #20]
 800e284:	f7ff ff22 	bl	800e0cc <sys_timeout_abs>
#endif
}
 800e288:	bf00      	nop
 800e28a:	3718      	adds	r7, #24
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}
 800e290:	08013d38 	.word	0x08013d38
 800e294:	08013dd4 	.word	0x08013dd4
 800e298:	08013dac 	.word	0x08013dac

0800e29c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e2a0:	f002 fd26 	bl	8010cf0 <rand>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e2ac:	b29b      	uxth	r3, r3
 800e2ae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e2b2:	b29a      	uxth	r2, r3
 800e2b4:	4b01      	ldr	r3, [pc, #4]	; (800e2bc <udp_init+0x20>)
 800e2b6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e2b8:	bf00      	nop
 800e2ba:	bd80      	pop	{r7, pc}
 800e2bc:	20000028 	.word	0x20000028

0800e2c0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b084      	sub	sp, #16
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	60f8      	str	r0, [r7, #12]
 800e2c8:	60b9      	str	r1, [r7, #8]
 800e2ca:	4613      	mov	r3, r2
 800e2cc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d105      	bne.n	800e2e0 <udp_input_local_match+0x20>
 800e2d4:	4b27      	ldr	r3, [pc, #156]	; (800e374 <udp_input_local_match+0xb4>)
 800e2d6:	2287      	movs	r2, #135	; 0x87
 800e2d8:	4927      	ldr	r1, [pc, #156]	; (800e378 <udp_input_local_match+0xb8>)
 800e2da:	4828      	ldr	r0, [pc, #160]	; (800e37c <udp_input_local_match+0xbc>)
 800e2dc:	f002 fcf0 	bl	8010cc0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d105      	bne.n	800e2f2 <udp_input_local_match+0x32>
 800e2e6:	4b23      	ldr	r3, [pc, #140]	; (800e374 <udp_input_local_match+0xb4>)
 800e2e8:	2288      	movs	r2, #136	; 0x88
 800e2ea:	4925      	ldr	r1, [pc, #148]	; (800e380 <udp_input_local_match+0xc0>)
 800e2ec:	4823      	ldr	r0, [pc, #140]	; (800e37c <udp_input_local_match+0xbc>)
 800e2ee:	f002 fce7 	bl	8010cc0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	7a1b      	ldrb	r3, [r3, #8]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d00b      	beq.n	800e312 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	7a1a      	ldrb	r2, [r3, #8]
 800e2fe:	4b21      	ldr	r3, [pc, #132]	; (800e384 <udp_input_local_match+0xc4>)
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e306:	3301      	adds	r3, #1
 800e308:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d001      	beq.n	800e312 <udp_input_local_match+0x52>
    return 0;
 800e30e:	2300      	movs	r3, #0
 800e310:	e02b      	b.n	800e36a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e312:	79fb      	ldrb	r3, [r7, #7]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d018      	beq.n	800e34a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d013      	beq.n	800e346 <udp_input_local_match+0x86>
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d00f      	beq.n	800e346 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e326:	4b17      	ldr	r3, [pc, #92]	; (800e384 <udp_input_local_match+0xc4>)
 800e328:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e32a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e32e:	d00a      	beq.n	800e346 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	681a      	ldr	r2, [r3, #0]
 800e334:	4b13      	ldr	r3, [pc, #76]	; (800e384 <udp_input_local_match+0xc4>)
 800e336:	695b      	ldr	r3, [r3, #20]
 800e338:	405a      	eors	r2, r3
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	3308      	adds	r3, #8
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e342:	2b00      	cmp	r3, #0
 800e344:	d110      	bne.n	800e368 <udp_input_local_match+0xa8>
          return 1;
 800e346:	2301      	movs	r3, #1
 800e348:	e00f      	b.n	800e36a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d009      	beq.n	800e364 <udp_input_local_match+0xa4>
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d005      	beq.n	800e364 <udp_input_local_match+0xa4>
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681a      	ldr	r2, [r3, #0]
 800e35c:	4b09      	ldr	r3, [pc, #36]	; (800e384 <udp_input_local_match+0xc4>)
 800e35e:	695b      	ldr	r3, [r3, #20]
 800e360:	429a      	cmp	r2, r3
 800e362:	d101      	bne.n	800e368 <udp_input_local_match+0xa8>
        return 1;
 800e364:	2301      	movs	r3, #1
 800e366:	e000      	b.n	800e36a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e368:	2300      	movs	r3, #0
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3710      	adds	r7, #16
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	08013e20 	.word	0x08013e20
 800e378:	08013e50 	.word	0x08013e50
 800e37c:	08013e74 	.word	0x08013e74
 800e380:	08013e9c 	.word	0x08013e9c
 800e384:	20005030 	.word	0x20005030

0800e388 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e388:	b590      	push	{r4, r7, lr}
 800e38a:	b08d      	sub	sp, #52	; 0x34
 800e38c:	af02      	add	r7, sp, #8
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e392:	2300      	movs	r3, #0
 800e394:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d105      	bne.n	800e3a8 <udp_input+0x20>
 800e39c:	4b7e      	ldr	r3, [pc, #504]	; (800e598 <udp_input+0x210>)
 800e39e:	22cf      	movs	r2, #207	; 0xcf
 800e3a0:	497e      	ldr	r1, [pc, #504]	; (800e59c <udp_input+0x214>)
 800e3a2:	487f      	ldr	r0, [pc, #508]	; (800e5a0 <udp_input+0x218>)
 800e3a4:	f002 fc8c 	bl	8010cc0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d105      	bne.n	800e3ba <udp_input+0x32>
 800e3ae:	4b7a      	ldr	r3, [pc, #488]	; (800e598 <udp_input+0x210>)
 800e3b0:	22d0      	movs	r2, #208	; 0xd0
 800e3b2:	497c      	ldr	r1, [pc, #496]	; (800e5a4 <udp_input+0x21c>)
 800e3b4:	487a      	ldr	r0, [pc, #488]	; (800e5a0 <udp_input+0x218>)
 800e3b6:	f002 fc83 	bl	8010cc0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	895b      	ldrh	r3, [r3, #10]
 800e3be:	2b07      	cmp	r3, #7
 800e3c0:	d803      	bhi.n	800e3ca <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f7fa f9ac 	bl	8008720 <pbuf_free>
    goto end;
 800e3c8:	e0e1      	b.n	800e58e <udp_input+0x206>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	685b      	ldr	r3, [r3, #4]
 800e3ce:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e3d0:	4b75      	ldr	r3, [pc, #468]	; (800e5a8 <udp_input+0x220>)
 800e3d2:	695b      	ldr	r3, [r3, #20]
 800e3d4:	4a74      	ldr	r2, [pc, #464]	; (800e5a8 <udp_input+0x220>)
 800e3d6:	6812      	ldr	r2, [r2, #0]
 800e3d8:	4611      	mov	r1, r2
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f001 fcd1 	bl	800fd82 <ip4_addr_isbroadcast_u32>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	881b      	ldrh	r3, [r3, #0]
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f7f8 fda2 	bl	8006f34 <lwip_htons>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	885b      	ldrh	r3, [r3, #2]
 800e3f8:	b29b      	uxth	r3, r3
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7f8 fd9a 	bl	8006f34 <lwip_htons>
 800e400:	4603      	mov	r3, r0
 800e402:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 800e404:	6978      	ldr	r0, [r7, #20]
 800e406:	f000 f907 	bl	800e618 <udp_debug_print>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e40a:	2300      	movs	r3, #0
 800e40c:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e40e:	2300      	movs	r3, #0
 800e410:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e412:	2300      	movs	r3, #0
 800e414:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e416:	4b65      	ldr	r3, [pc, #404]	; (800e5ac <udp_input+0x224>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	627b      	str	r3, [r7, #36]	; 0x24
 800e41c:	e054      	b.n	800e4c8 <udp_input+0x140>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e420:	8a5b      	ldrh	r3, [r3, #18]
 800e422:	89fa      	ldrh	r2, [r7, #14]
 800e424:	429a      	cmp	r2, r3
 800e426:	d14a      	bne.n	800e4be <udp_input+0x136>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e428:	7cfb      	ldrb	r3, [r7, #19]
 800e42a:	461a      	mov	r2, r3
 800e42c:	6839      	ldr	r1, [r7, #0]
 800e42e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e430:	f7ff ff46 	bl	800e2c0 <udp_input_local_match>
 800e434:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e436:	2b00      	cmp	r3, #0
 800e438:	d041      	beq.n	800e4be <udp_input+0x136>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e43c:	7c1b      	ldrb	r3, [r3, #16]
 800e43e:	f003 0304 	and.w	r3, r3, #4
 800e442:	2b00      	cmp	r3, #0
 800e444:	d11d      	bne.n	800e482 <udp_input+0xfa>
        if (uncon_pcb == NULL) {
 800e446:	69fb      	ldr	r3, [r7, #28]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d102      	bne.n	800e452 <udp_input+0xca>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e44e:	61fb      	str	r3, [r7, #28]
 800e450:	e017      	b.n	800e482 <udp_input+0xfa>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e452:	7cfb      	ldrb	r3, [r7, #19]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d014      	beq.n	800e482 <udp_input+0xfa>
 800e458:	4b53      	ldr	r3, [pc, #332]	; (800e5a8 <udp_input+0x220>)
 800e45a:	695b      	ldr	r3, [r3, #20]
 800e45c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e460:	d10f      	bne.n	800e482 <udp_input+0xfa>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e462:	69fb      	ldr	r3, [r7, #28]
 800e464:	681a      	ldr	r2, [r3, #0]
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	3304      	adds	r3, #4
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d008      	beq.n	800e482 <udp_input+0xfa>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e472:	681a      	ldr	r2, [r3, #0]
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	3304      	adds	r3, #4
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d101      	bne.n	800e482 <udp_input+0xfa>
              /* better match */
              uncon_pcb = pcb;
 800e47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e480:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e484:	8a9b      	ldrh	r3, [r3, #20]
 800e486:	8a3a      	ldrh	r2, [r7, #16]
 800e488:	429a      	cmp	r2, r3
 800e48a:	d118      	bne.n	800e4be <udp_input+0x136>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48e:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e490:	2b00      	cmp	r3, #0
 800e492:	d005      	beq.n	800e4a0 <udp_input+0x118>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e496:	685a      	ldr	r2, [r3, #4]
 800e498:	4b43      	ldr	r3, [pc, #268]	; (800e5a8 <udp_input+0x220>)
 800e49a:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d10e      	bne.n	800e4be <udp_input+0x136>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e4a0:	6a3b      	ldr	r3, [r7, #32]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d014      	beq.n	800e4d0 <udp_input+0x148>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a8:	68da      	ldr	r2, [r3, #12]
 800e4aa:	6a3b      	ldr	r3, [r7, #32]
 800e4ac:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e4ae:	4b3f      	ldr	r3, [pc, #252]	; (800e5ac <udp_input+0x224>)
 800e4b0:	681a      	ldr	r2, [r3, #0]
 800e4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b4:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e4b6:	4a3d      	ldr	r2, [pc, #244]	; (800e5ac <udp_input+0x224>)
 800e4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ba:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e4bc:	e008      	b.n	800e4d0 <udp_input+0x148>
      }
    }

    prev = pcb;
 800e4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c0:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c4:	68db      	ldr	r3, [r3, #12]
 800e4c6:	627b      	str	r3, [r7, #36]	; 0x24
 800e4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d1a7      	bne.n	800e41e <udp_input+0x96>
 800e4ce:	e000      	b.n	800e4d2 <udp_input+0x14a>
        break;
 800e4d0:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d101      	bne.n	800e4dc <udp_input+0x154>
    pcb = uncon_pcb;
 800e4d8:	69fb      	ldr	r3, [r7, #28]
 800e4da:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d002      	beq.n	800e4e8 <udp_input+0x160>
    for_us = 1;
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	76fb      	strb	r3, [r7, #27]
 800e4e6:	e00a      	b.n	800e4fe <udp_input+0x176>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	3304      	adds	r3, #4
 800e4ec:	681a      	ldr	r2, [r3, #0]
 800e4ee:	4b2e      	ldr	r3, [pc, #184]	; (800e5a8 <udp_input+0x220>)
 800e4f0:	695b      	ldr	r3, [r3, #20]
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	bf0c      	ite	eq
 800e4f6:	2301      	moveq	r3, #1
 800e4f8:	2300      	movne	r3, #0
 800e4fa:	b2db      	uxtb	r3, r3
 800e4fc:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e4fe:	7efb      	ldrb	r3, [r7, #27]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d041      	beq.n	800e588 <udp_input+0x200>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e504:	2108      	movs	r1, #8
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f7fa f884 	bl	8008614 <pbuf_remove_header>
 800e50c:	4603      	mov	r3, r0
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d00a      	beq.n	800e528 <udp_input+0x1a0>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e512:	4b21      	ldr	r3, [pc, #132]	; (800e598 <udp_input+0x210>)
 800e514:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e518:	4925      	ldr	r1, [pc, #148]	; (800e5b0 <udp_input+0x228>)
 800e51a:	4821      	ldr	r0, [pc, #132]	; (800e5a0 <udp_input+0x218>)
 800e51c:	f002 fbd0 	bl	8010cc0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f7fa f8fd 	bl	8008720 <pbuf_free>
      goto end;
 800e526:	e032      	b.n	800e58e <udp_input+0x206>
    }

    if (pcb != NULL) {
 800e528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d012      	beq.n	800e554 <udp_input+0x1cc>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e530:	699b      	ldr	r3, [r3, #24]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d00a      	beq.n	800e54c <udp_input+0x1c4>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e538:	699c      	ldr	r4, [r3, #24]
 800e53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53c:	69d8      	ldr	r0, [r3, #28]
 800e53e:	8a3b      	ldrh	r3, [r7, #16]
 800e540:	9300      	str	r3, [sp, #0]
 800e542:	4b1c      	ldr	r3, [pc, #112]	; (800e5b4 <udp_input+0x22c>)
 800e544:	687a      	ldr	r2, [r7, #4]
 800e546:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e548:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e54a:	e021      	b.n	800e590 <udp_input+0x208>
        pbuf_free(p);
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f7fa f8e7 	bl	8008720 <pbuf_free>
        goto end;
 800e552:	e01c      	b.n	800e58e <udp_input+0x206>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e554:	7cfb      	ldrb	r3, [r7, #19]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d112      	bne.n	800e580 <udp_input+0x1f8>
 800e55a:	4b13      	ldr	r3, [pc, #76]	; (800e5a8 <udp_input+0x220>)
 800e55c:	695b      	ldr	r3, [r3, #20]
 800e55e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e562:	2be0      	cmp	r3, #224	; 0xe0
 800e564:	d00c      	beq.n	800e580 <udp_input+0x1f8>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e566:	4b10      	ldr	r3, [pc, #64]	; (800e5a8 <udp_input+0x220>)
 800e568:	899b      	ldrh	r3, [r3, #12]
 800e56a:	3308      	adds	r3, #8
 800e56c:	b29b      	uxth	r3, r3
 800e56e:	b21b      	sxth	r3, r3
 800e570:	4619      	mov	r1, r3
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f7fa f8c1 	bl	80086fa <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e578:	2103      	movs	r1, #3
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f001 f8c0 	bl	800f700 <icmp_dest_unreach>
      pbuf_free(p);
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f7fa f8cd 	bl	8008720 <pbuf_free>
  return;
 800e586:	e003      	b.n	800e590 <udp_input+0x208>
    pbuf_free(p);
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f7fa f8c9 	bl	8008720 <pbuf_free>
  return;
 800e58e:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e590:	372c      	adds	r7, #44	; 0x2c
 800e592:	46bd      	mov	sp, r7
 800e594:	bd90      	pop	{r4, r7, pc}
 800e596:	bf00      	nop
 800e598:	08013e20 	.word	0x08013e20
 800e59c:	08013ec4 	.word	0x08013ec4
 800e5a0:	08013e74 	.word	0x08013e74
 800e5a4:	08013edc 	.word	0x08013edc
 800e5a8:	20005030 	.word	0x20005030
 800e5ac:	20007fa8 	.word	0x20007fa8
 800e5b0:	08013ef8 	.word	0x08013ef8
 800e5b4:	20005040 	.word	0x20005040

0800e5b8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e5b8:	b480      	push	{r7}
 800e5ba:	b085      	sub	sp, #20
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d01e      	beq.n	800e606 <udp_netif_ip_addr_changed+0x4e>
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d01a      	beq.n	800e606 <udp_netif_ip_addr_changed+0x4e>
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d017      	beq.n	800e606 <udp_netif_ip_addr_changed+0x4e>
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d013      	beq.n	800e606 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e5de:	4b0d      	ldr	r3, [pc, #52]	; (800e614 <udp_netif_ip_addr_changed+0x5c>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	60fb      	str	r3, [r7, #12]
 800e5e4:	e00c      	b.n	800e600 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	681a      	ldr	r2, [r3, #0]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	d103      	bne.n	800e5fa <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	681a      	ldr	r2, [r3, #0]
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	68db      	ldr	r3, [r3, #12]
 800e5fe:	60fb      	str	r3, [r7, #12]
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d1ef      	bne.n	800e5e6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e606:	bf00      	nop
 800e608:	3714      	adds	r7, #20
 800e60a:	46bd      	mov	sp, r7
 800e60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e610:	4770      	bx	lr
 800e612:	bf00      	nop
 800e614:	20007fa8 	.word	0x20007fa8

0800e618 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 800e618:	b480      	push	{r7}
 800e61a:	b083      	sub	sp, #12
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
}
 800e620:	bf00      	nop
 800e622:	370c      	adds	r7, #12
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr

0800e62c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b082      	sub	sp, #8
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e634:	4915      	ldr	r1, [pc, #84]	; (800e68c <etharp_free_entry+0x60>)
 800e636:	687a      	ldr	r2, [r7, #4]
 800e638:	4613      	mov	r3, r2
 800e63a:	005b      	lsls	r3, r3, #1
 800e63c:	4413      	add	r3, r2
 800e63e:	00db      	lsls	r3, r3, #3
 800e640:	440b      	add	r3, r1
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d013      	beq.n	800e670 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e648:	4910      	ldr	r1, [pc, #64]	; (800e68c <etharp_free_entry+0x60>)
 800e64a:	687a      	ldr	r2, [r7, #4]
 800e64c:	4613      	mov	r3, r2
 800e64e:	005b      	lsls	r3, r3, #1
 800e650:	4413      	add	r3, r2
 800e652:	00db      	lsls	r3, r3, #3
 800e654:	440b      	add	r3, r1
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	4618      	mov	r0, r3
 800e65a:	f7fa f861 	bl	8008720 <pbuf_free>
    arp_table[i].q = NULL;
 800e65e:	490b      	ldr	r1, [pc, #44]	; (800e68c <etharp_free_entry+0x60>)
 800e660:	687a      	ldr	r2, [r7, #4]
 800e662:	4613      	mov	r3, r2
 800e664:	005b      	lsls	r3, r3, #1
 800e666:	4413      	add	r3, r2
 800e668:	00db      	lsls	r3, r3, #3
 800e66a:	440b      	add	r3, r1
 800e66c:	2200      	movs	r2, #0
 800e66e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e670:	4906      	ldr	r1, [pc, #24]	; (800e68c <etharp_free_entry+0x60>)
 800e672:	687a      	ldr	r2, [r7, #4]
 800e674:	4613      	mov	r3, r2
 800e676:	005b      	lsls	r3, r3, #1
 800e678:	4413      	add	r3, r2
 800e67a:	00db      	lsls	r3, r3, #3
 800e67c:	440b      	add	r3, r1
 800e67e:	3314      	adds	r3, #20
 800e680:	2200      	movs	r2, #0
 800e682:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e684:	bf00      	nop
 800e686:	3708      	adds	r7, #8
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}
 800e68c:	20007fac 	.word	0x20007fac

0800e690 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b082      	sub	sp, #8
 800e694:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e696:	2300      	movs	r3, #0
 800e698:	607b      	str	r3, [r7, #4]
 800e69a:	e096      	b.n	800e7ca <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e69c:	494f      	ldr	r1, [pc, #316]	; (800e7dc <etharp_tmr+0x14c>)
 800e69e:	687a      	ldr	r2, [r7, #4]
 800e6a0:	4613      	mov	r3, r2
 800e6a2:	005b      	lsls	r3, r3, #1
 800e6a4:	4413      	add	r3, r2
 800e6a6:	00db      	lsls	r3, r3, #3
 800e6a8:	440b      	add	r3, r1
 800e6aa:	3314      	adds	r3, #20
 800e6ac:	781b      	ldrb	r3, [r3, #0]
 800e6ae:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e6b0:	78fb      	ldrb	r3, [r7, #3]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	f000 8086 	beq.w	800e7c4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e6b8:	4948      	ldr	r1, [pc, #288]	; (800e7dc <etharp_tmr+0x14c>)
 800e6ba:	687a      	ldr	r2, [r7, #4]
 800e6bc:	4613      	mov	r3, r2
 800e6be:	005b      	lsls	r3, r3, #1
 800e6c0:	4413      	add	r3, r2
 800e6c2:	00db      	lsls	r3, r3, #3
 800e6c4:	440b      	add	r3, r1
 800e6c6:	3312      	adds	r3, #18
 800e6c8:	881b      	ldrh	r3, [r3, #0]
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	b298      	uxth	r0, r3
 800e6ce:	4943      	ldr	r1, [pc, #268]	; (800e7dc <etharp_tmr+0x14c>)
 800e6d0:	687a      	ldr	r2, [r7, #4]
 800e6d2:	4613      	mov	r3, r2
 800e6d4:	005b      	lsls	r3, r3, #1
 800e6d6:	4413      	add	r3, r2
 800e6d8:	00db      	lsls	r3, r3, #3
 800e6da:	440b      	add	r3, r1
 800e6dc:	3312      	adds	r3, #18
 800e6de:	4602      	mov	r2, r0
 800e6e0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e6e2:	493e      	ldr	r1, [pc, #248]	; (800e7dc <etharp_tmr+0x14c>)
 800e6e4:	687a      	ldr	r2, [r7, #4]
 800e6e6:	4613      	mov	r3, r2
 800e6e8:	005b      	lsls	r3, r3, #1
 800e6ea:	4413      	add	r3, r2
 800e6ec:	00db      	lsls	r3, r3, #3
 800e6ee:	440b      	add	r3, r1
 800e6f0:	3312      	adds	r3, #18
 800e6f2:	881b      	ldrh	r3, [r3, #0]
 800e6f4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e6f8:	d215      	bcs.n	800e726 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e6fa:	4938      	ldr	r1, [pc, #224]	; (800e7dc <etharp_tmr+0x14c>)
 800e6fc:	687a      	ldr	r2, [r7, #4]
 800e6fe:	4613      	mov	r3, r2
 800e700:	005b      	lsls	r3, r3, #1
 800e702:	4413      	add	r3, r2
 800e704:	00db      	lsls	r3, r3, #3
 800e706:	440b      	add	r3, r1
 800e708:	3314      	adds	r3, #20
 800e70a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e70c:	2b01      	cmp	r3, #1
 800e70e:	d10e      	bne.n	800e72e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e710:	4932      	ldr	r1, [pc, #200]	; (800e7dc <etharp_tmr+0x14c>)
 800e712:	687a      	ldr	r2, [r7, #4]
 800e714:	4613      	mov	r3, r2
 800e716:	005b      	lsls	r3, r3, #1
 800e718:	4413      	add	r3, r2
 800e71a:	00db      	lsls	r3, r3, #3
 800e71c:	440b      	add	r3, r1
 800e71e:	3312      	adds	r3, #18
 800e720:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e722:	2b04      	cmp	r3, #4
 800e724:	d903      	bls.n	800e72e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f7ff ff80 	bl	800e62c <etharp_free_entry>
 800e72c:	e04a      	b.n	800e7c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e72e:	492b      	ldr	r1, [pc, #172]	; (800e7dc <etharp_tmr+0x14c>)
 800e730:	687a      	ldr	r2, [r7, #4]
 800e732:	4613      	mov	r3, r2
 800e734:	005b      	lsls	r3, r3, #1
 800e736:	4413      	add	r3, r2
 800e738:	00db      	lsls	r3, r3, #3
 800e73a:	440b      	add	r3, r1
 800e73c:	3314      	adds	r3, #20
 800e73e:	781b      	ldrb	r3, [r3, #0]
 800e740:	2b03      	cmp	r3, #3
 800e742:	d10a      	bne.n	800e75a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e744:	4925      	ldr	r1, [pc, #148]	; (800e7dc <etharp_tmr+0x14c>)
 800e746:	687a      	ldr	r2, [r7, #4]
 800e748:	4613      	mov	r3, r2
 800e74a:	005b      	lsls	r3, r3, #1
 800e74c:	4413      	add	r3, r2
 800e74e:	00db      	lsls	r3, r3, #3
 800e750:	440b      	add	r3, r1
 800e752:	3314      	adds	r3, #20
 800e754:	2204      	movs	r2, #4
 800e756:	701a      	strb	r2, [r3, #0]
 800e758:	e034      	b.n	800e7c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e75a:	4920      	ldr	r1, [pc, #128]	; (800e7dc <etharp_tmr+0x14c>)
 800e75c:	687a      	ldr	r2, [r7, #4]
 800e75e:	4613      	mov	r3, r2
 800e760:	005b      	lsls	r3, r3, #1
 800e762:	4413      	add	r3, r2
 800e764:	00db      	lsls	r3, r3, #3
 800e766:	440b      	add	r3, r1
 800e768:	3314      	adds	r3, #20
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	2b04      	cmp	r3, #4
 800e76e:	d10a      	bne.n	800e786 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e770:	491a      	ldr	r1, [pc, #104]	; (800e7dc <etharp_tmr+0x14c>)
 800e772:	687a      	ldr	r2, [r7, #4]
 800e774:	4613      	mov	r3, r2
 800e776:	005b      	lsls	r3, r3, #1
 800e778:	4413      	add	r3, r2
 800e77a:	00db      	lsls	r3, r3, #3
 800e77c:	440b      	add	r3, r1
 800e77e:	3314      	adds	r3, #20
 800e780:	2202      	movs	r2, #2
 800e782:	701a      	strb	r2, [r3, #0]
 800e784:	e01e      	b.n	800e7c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e786:	4915      	ldr	r1, [pc, #84]	; (800e7dc <etharp_tmr+0x14c>)
 800e788:	687a      	ldr	r2, [r7, #4]
 800e78a:	4613      	mov	r3, r2
 800e78c:	005b      	lsls	r3, r3, #1
 800e78e:	4413      	add	r3, r2
 800e790:	00db      	lsls	r3, r3, #3
 800e792:	440b      	add	r3, r1
 800e794:	3314      	adds	r3, #20
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	2b01      	cmp	r3, #1
 800e79a:	d113      	bne.n	800e7c4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e79c:	490f      	ldr	r1, [pc, #60]	; (800e7dc <etharp_tmr+0x14c>)
 800e79e:	687a      	ldr	r2, [r7, #4]
 800e7a0:	4613      	mov	r3, r2
 800e7a2:	005b      	lsls	r3, r3, #1
 800e7a4:	4413      	add	r3, r2
 800e7a6:	00db      	lsls	r3, r3, #3
 800e7a8:	440b      	add	r3, r1
 800e7aa:	3308      	adds	r3, #8
 800e7ac:	6818      	ldr	r0, [r3, #0]
 800e7ae:	687a      	ldr	r2, [r7, #4]
 800e7b0:	4613      	mov	r3, r2
 800e7b2:	005b      	lsls	r3, r3, #1
 800e7b4:	4413      	add	r3, r2
 800e7b6:	00db      	lsls	r3, r3, #3
 800e7b8:	4a08      	ldr	r2, [pc, #32]	; (800e7dc <etharp_tmr+0x14c>)
 800e7ba:	4413      	add	r3, r2
 800e7bc:	3304      	adds	r3, #4
 800e7be:	4619      	mov	r1, r3
 800e7c0:	f000 fe6e 	bl	800f4a0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	3301      	adds	r3, #1
 800e7c8:	607b      	str	r3, [r7, #4]
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2b09      	cmp	r3, #9
 800e7ce:	f77f af65 	ble.w	800e69c <etharp_tmr+0xc>
      }
    }
  }
}
 800e7d2:	bf00      	nop
 800e7d4:	bf00      	nop
 800e7d6:	3708      	adds	r7, #8
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}
 800e7dc:	20007fac 	.word	0x20007fac

0800e7e0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b08a      	sub	sp, #40	; 0x28
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	60f8      	str	r0, [r7, #12]
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	607a      	str	r2, [r7, #4]
 800e7ec:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e7ee:	230a      	movs	r3, #10
 800e7f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e7f2:	230a      	movs	r3, #10
 800e7f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800e7f6:	230a      	movs	r3, #10
 800e7f8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800e7fe:	230a      	movs	r3, #10
 800e800:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e802:	2300      	movs	r3, #0
 800e804:	83bb      	strh	r3, [r7, #28]
 800e806:	2300      	movs	r3, #0
 800e808:	837b      	strh	r3, [r7, #26]
 800e80a:	2300      	movs	r3, #0
 800e80c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e80e:	2300      	movs	r3, #0
 800e810:	843b      	strh	r3, [r7, #32]
 800e812:	e0ae      	b.n	800e972 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800e814:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e818:	49a6      	ldr	r1, [pc, #664]	; (800eab4 <etharp_find_entry+0x2d4>)
 800e81a:	4613      	mov	r3, r2
 800e81c:	005b      	lsls	r3, r3, #1
 800e81e:	4413      	add	r3, r2
 800e820:	00db      	lsls	r3, r3, #3
 800e822:	440b      	add	r3, r1
 800e824:	3314      	adds	r3, #20
 800e826:	781b      	ldrb	r3, [r3, #0]
 800e828:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e82a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e82e:	2b0a      	cmp	r3, #10
 800e830:	d105      	bne.n	800e83e <etharp_find_entry+0x5e>
 800e832:	7dfb      	ldrb	r3, [r7, #23]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d102      	bne.n	800e83e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e838:	8c3b      	ldrh	r3, [r7, #32]
 800e83a:	847b      	strh	r3, [r7, #34]	; 0x22
 800e83c:	e095      	b.n	800e96a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e83e:	7dfb      	ldrb	r3, [r7, #23]
 800e840:	2b00      	cmp	r3, #0
 800e842:	f000 8092 	beq.w	800e96a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e846:	7dfb      	ldrb	r3, [r7, #23]
 800e848:	2b01      	cmp	r3, #1
 800e84a:	d009      	beq.n	800e860 <etharp_find_entry+0x80>
 800e84c:	7dfb      	ldrb	r3, [r7, #23]
 800e84e:	2b01      	cmp	r3, #1
 800e850:	d806      	bhi.n	800e860 <etharp_find_entry+0x80>
 800e852:	4b99      	ldr	r3, [pc, #612]	; (800eab8 <etharp_find_entry+0x2d8>)
 800e854:	f240 1223 	movw	r2, #291	; 0x123
 800e858:	4998      	ldr	r1, [pc, #608]	; (800eabc <etharp_find_entry+0x2dc>)
 800e85a:	4899      	ldr	r0, [pc, #612]	; (800eac0 <etharp_find_entry+0x2e0>)
 800e85c:	f002 fa30 	bl	8010cc0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d020      	beq.n	800e8a8 <etharp_find_entry+0xc8>
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	6819      	ldr	r1, [r3, #0]
 800e86a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e86e:	4891      	ldr	r0, [pc, #580]	; (800eab4 <etharp_find_entry+0x2d4>)
 800e870:	4613      	mov	r3, r2
 800e872:	005b      	lsls	r3, r3, #1
 800e874:	4413      	add	r3, r2
 800e876:	00db      	lsls	r3, r3, #3
 800e878:	4403      	add	r3, r0
 800e87a:	3304      	adds	r3, #4
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	4299      	cmp	r1, r3
 800e880:	d112      	bne.n	800e8a8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d00c      	beq.n	800e8a2 <etharp_find_entry+0xc2>
 800e888:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e88c:	4989      	ldr	r1, [pc, #548]	; (800eab4 <etharp_find_entry+0x2d4>)
 800e88e:	4613      	mov	r3, r2
 800e890:	005b      	lsls	r3, r3, #1
 800e892:	4413      	add	r3, r2
 800e894:	00db      	lsls	r3, r3, #3
 800e896:	440b      	add	r3, r1
 800e898:	3308      	adds	r3, #8
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	687a      	ldr	r2, [r7, #4]
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d102      	bne.n	800e8a8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e8a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e8a6:	e100      	b.n	800eaaa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e8a8:	7dfb      	ldrb	r3, [r7, #23]
 800e8aa:	2b01      	cmp	r3, #1
 800e8ac:	d140      	bne.n	800e930 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e8ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e8b2:	4980      	ldr	r1, [pc, #512]	; (800eab4 <etharp_find_entry+0x2d4>)
 800e8b4:	4613      	mov	r3, r2
 800e8b6:	005b      	lsls	r3, r3, #1
 800e8b8:	4413      	add	r3, r2
 800e8ba:	00db      	lsls	r3, r3, #3
 800e8bc:	440b      	add	r3, r1
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d01a      	beq.n	800e8fa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e8c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e8c8:	497a      	ldr	r1, [pc, #488]	; (800eab4 <etharp_find_entry+0x2d4>)
 800e8ca:	4613      	mov	r3, r2
 800e8cc:	005b      	lsls	r3, r3, #1
 800e8ce:	4413      	add	r3, r2
 800e8d0:	00db      	lsls	r3, r3, #3
 800e8d2:	440b      	add	r3, r1
 800e8d4:	3312      	adds	r3, #18
 800e8d6:	881b      	ldrh	r3, [r3, #0]
 800e8d8:	8bba      	ldrh	r2, [r7, #28]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d845      	bhi.n	800e96a <etharp_find_entry+0x18a>
            old_queue = i;
 800e8de:	8c3b      	ldrh	r3, [r7, #32]
 800e8e0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e8e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e8e6:	4973      	ldr	r1, [pc, #460]	; (800eab4 <etharp_find_entry+0x2d4>)
 800e8e8:	4613      	mov	r3, r2
 800e8ea:	005b      	lsls	r3, r3, #1
 800e8ec:	4413      	add	r3, r2
 800e8ee:	00db      	lsls	r3, r3, #3
 800e8f0:	440b      	add	r3, r1
 800e8f2:	3312      	adds	r3, #18
 800e8f4:	881b      	ldrh	r3, [r3, #0]
 800e8f6:	83bb      	strh	r3, [r7, #28]
 800e8f8:	e037      	b.n	800e96a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e8fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e8fe:	496d      	ldr	r1, [pc, #436]	; (800eab4 <etharp_find_entry+0x2d4>)
 800e900:	4613      	mov	r3, r2
 800e902:	005b      	lsls	r3, r3, #1
 800e904:	4413      	add	r3, r2
 800e906:	00db      	lsls	r3, r3, #3
 800e908:	440b      	add	r3, r1
 800e90a:	3312      	adds	r3, #18
 800e90c:	881b      	ldrh	r3, [r3, #0]
 800e90e:	8b7a      	ldrh	r2, [r7, #26]
 800e910:	429a      	cmp	r2, r3
 800e912:	d82a      	bhi.n	800e96a <etharp_find_entry+0x18a>
            old_pending = i;
 800e914:	8c3b      	ldrh	r3, [r7, #32]
 800e916:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800e918:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e91c:	4965      	ldr	r1, [pc, #404]	; (800eab4 <etharp_find_entry+0x2d4>)
 800e91e:	4613      	mov	r3, r2
 800e920:	005b      	lsls	r3, r3, #1
 800e922:	4413      	add	r3, r2
 800e924:	00db      	lsls	r3, r3, #3
 800e926:	440b      	add	r3, r1
 800e928:	3312      	adds	r3, #18
 800e92a:	881b      	ldrh	r3, [r3, #0]
 800e92c:	837b      	strh	r3, [r7, #26]
 800e92e:	e01c      	b.n	800e96a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e930:	7dfb      	ldrb	r3, [r7, #23]
 800e932:	2b01      	cmp	r3, #1
 800e934:	d919      	bls.n	800e96a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e936:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e93a:	495e      	ldr	r1, [pc, #376]	; (800eab4 <etharp_find_entry+0x2d4>)
 800e93c:	4613      	mov	r3, r2
 800e93e:	005b      	lsls	r3, r3, #1
 800e940:	4413      	add	r3, r2
 800e942:	00db      	lsls	r3, r3, #3
 800e944:	440b      	add	r3, r1
 800e946:	3312      	adds	r3, #18
 800e948:	881b      	ldrh	r3, [r3, #0]
 800e94a:	8b3a      	ldrh	r2, [r7, #24]
 800e94c:	429a      	cmp	r2, r3
 800e94e:	d80c      	bhi.n	800e96a <etharp_find_entry+0x18a>
            old_stable = i;
 800e950:	8c3b      	ldrh	r3, [r7, #32]
 800e952:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800e954:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e958:	4956      	ldr	r1, [pc, #344]	; (800eab4 <etharp_find_entry+0x2d4>)
 800e95a:	4613      	mov	r3, r2
 800e95c:	005b      	lsls	r3, r3, #1
 800e95e:	4413      	add	r3, r2
 800e960:	00db      	lsls	r3, r3, #3
 800e962:	440b      	add	r3, r1
 800e964:	3312      	adds	r3, #18
 800e966:	881b      	ldrh	r3, [r3, #0]
 800e968:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e96a:	8c3b      	ldrh	r3, [r7, #32]
 800e96c:	3301      	adds	r3, #1
 800e96e:	b29b      	uxth	r3, r3
 800e970:	843b      	strh	r3, [r7, #32]
 800e972:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e976:	2b09      	cmp	r3, #9
 800e978:	f77f af4c 	ble.w	800e814 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e97c:	7afb      	ldrb	r3, [r7, #11]
 800e97e:	f003 0302 	and.w	r3, r3, #2
 800e982:	2b00      	cmp	r3, #0
 800e984:	d108      	bne.n	800e998 <etharp_find_entry+0x1b8>
 800e986:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e98a:	2b0a      	cmp	r3, #10
 800e98c:	d107      	bne.n	800e99e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e98e:	7afb      	ldrb	r3, [r7, #11]
 800e990:	f003 0301 	and.w	r3, r3, #1
 800e994:	2b00      	cmp	r3, #0
 800e996:	d102      	bne.n	800e99e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e998:	f04f 33ff 	mov.w	r3, #4294967295
 800e99c:	e085      	b.n	800eaaa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e99e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e9a2:	2b09      	cmp	r3, #9
 800e9a4:	dc02      	bgt.n	800e9ac <etharp_find_entry+0x1cc>
    i = empty;
 800e9a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e9a8:	843b      	strh	r3, [r7, #32]
 800e9aa:	e039      	b.n	800ea20 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e9ac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800e9b0:	2b09      	cmp	r3, #9
 800e9b2:	dc14      	bgt.n	800e9de <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e9b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9b6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e9b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e9bc:	493d      	ldr	r1, [pc, #244]	; (800eab4 <etharp_find_entry+0x2d4>)
 800e9be:	4613      	mov	r3, r2
 800e9c0:	005b      	lsls	r3, r3, #1
 800e9c2:	4413      	add	r3, r2
 800e9c4:	00db      	lsls	r3, r3, #3
 800e9c6:	440b      	add	r3, r1
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d018      	beq.n	800ea00 <etharp_find_entry+0x220>
 800e9ce:	4b3a      	ldr	r3, [pc, #232]	; (800eab8 <etharp_find_entry+0x2d8>)
 800e9d0:	f240 126d 	movw	r2, #365	; 0x16d
 800e9d4:	493b      	ldr	r1, [pc, #236]	; (800eac4 <etharp_find_entry+0x2e4>)
 800e9d6:	483a      	ldr	r0, [pc, #232]	; (800eac0 <etharp_find_entry+0x2e0>)
 800e9d8:	f002 f972 	bl	8010cc0 <iprintf>
 800e9dc:	e010      	b.n	800ea00 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e9de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e9e2:	2b09      	cmp	r3, #9
 800e9e4:	dc02      	bgt.n	800e9ec <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800e9e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e9e8:	843b      	strh	r3, [r7, #32]
 800e9ea:	e009      	b.n	800ea00 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e9ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e9f0:	2b09      	cmp	r3, #9
 800e9f2:	dc02      	bgt.n	800e9fa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e9f4:	8bfb      	ldrh	r3, [r7, #30]
 800e9f6:	843b      	strh	r3, [r7, #32]
 800e9f8:	e002      	b.n	800ea00 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800e9fa:	f04f 33ff 	mov.w	r3, #4294967295
 800e9fe:	e054      	b.n	800eaaa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ea00:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ea04:	2b09      	cmp	r3, #9
 800ea06:	dd06      	ble.n	800ea16 <etharp_find_entry+0x236>
 800ea08:	4b2b      	ldr	r3, [pc, #172]	; (800eab8 <etharp_find_entry+0x2d8>)
 800ea0a:	f240 127f 	movw	r2, #383	; 0x17f
 800ea0e:	492e      	ldr	r1, [pc, #184]	; (800eac8 <etharp_find_entry+0x2e8>)
 800ea10:	482b      	ldr	r0, [pc, #172]	; (800eac0 <etharp_find_entry+0x2e0>)
 800ea12:	f002 f955 	bl	8010cc0 <iprintf>
    etharp_free_entry(i);
 800ea16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7ff fe06 	bl	800e62c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ea20:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ea24:	2b09      	cmp	r3, #9
 800ea26:	dd06      	ble.n	800ea36 <etharp_find_entry+0x256>
 800ea28:	4b23      	ldr	r3, [pc, #140]	; (800eab8 <etharp_find_entry+0x2d8>)
 800ea2a:	f240 1283 	movw	r2, #387	; 0x183
 800ea2e:	4926      	ldr	r1, [pc, #152]	; (800eac8 <etharp_find_entry+0x2e8>)
 800ea30:	4823      	ldr	r0, [pc, #140]	; (800eac0 <etharp_find_entry+0x2e0>)
 800ea32:	f002 f945 	bl	8010cc0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ea36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ea3a:	491e      	ldr	r1, [pc, #120]	; (800eab4 <etharp_find_entry+0x2d4>)
 800ea3c:	4613      	mov	r3, r2
 800ea3e:	005b      	lsls	r3, r3, #1
 800ea40:	4413      	add	r3, r2
 800ea42:	00db      	lsls	r3, r3, #3
 800ea44:	440b      	add	r3, r1
 800ea46:	3314      	adds	r3, #20
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d006      	beq.n	800ea5c <etharp_find_entry+0x27c>
 800ea4e:	4b1a      	ldr	r3, [pc, #104]	; (800eab8 <etharp_find_entry+0x2d8>)
 800ea50:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800ea54:	491d      	ldr	r1, [pc, #116]	; (800eacc <etharp_find_entry+0x2ec>)
 800ea56:	481a      	ldr	r0, [pc, #104]	; (800eac0 <etharp_find_entry+0x2e0>)
 800ea58:	f002 f932 	bl	8010cc0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d00b      	beq.n	800ea7a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ea62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	6819      	ldr	r1, [r3, #0]
 800ea6a:	4812      	ldr	r0, [pc, #72]	; (800eab4 <etharp_find_entry+0x2d4>)
 800ea6c:	4613      	mov	r3, r2
 800ea6e:	005b      	lsls	r3, r3, #1
 800ea70:	4413      	add	r3, r2
 800ea72:	00db      	lsls	r3, r3, #3
 800ea74:	4403      	add	r3, r0
 800ea76:	3304      	adds	r3, #4
 800ea78:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ea7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ea7e:	490d      	ldr	r1, [pc, #52]	; (800eab4 <etharp_find_entry+0x2d4>)
 800ea80:	4613      	mov	r3, r2
 800ea82:	005b      	lsls	r3, r3, #1
 800ea84:	4413      	add	r3, r2
 800ea86:	00db      	lsls	r3, r3, #3
 800ea88:	440b      	add	r3, r1
 800ea8a:	3312      	adds	r3, #18
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ea90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ea94:	4907      	ldr	r1, [pc, #28]	; (800eab4 <etharp_find_entry+0x2d4>)
 800ea96:	4613      	mov	r3, r2
 800ea98:	005b      	lsls	r3, r3, #1
 800ea9a:	4413      	add	r3, r2
 800ea9c:	00db      	lsls	r3, r3, #3
 800ea9e:	440b      	add	r3, r1
 800eaa0:	3308      	adds	r3, #8
 800eaa2:	687a      	ldr	r2, [r7, #4]
 800eaa4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800eaa6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3728      	adds	r7, #40	; 0x28
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
 800eab2:	bf00      	nop
 800eab4:	20007fac 	.word	0x20007fac
 800eab8:	08014184 	.word	0x08014184
 800eabc:	080141bc 	.word	0x080141bc
 800eac0:	080141fc 	.word	0x080141fc
 800eac4:	08014224 	.word	0x08014224
 800eac8:	0801423c 	.word	0x0801423c
 800eacc:	08014250 	.word	0x08014250

0800ead0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b088      	sub	sp, #32
 800ead4:	af02      	add	r7, sp, #8
 800ead6:	60f8      	str	r0, [r7, #12]
 800ead8:	60b9      	str	r1, [r7, #8]
 800eada:	607a      	str	r2, [r7, #4]
 800eadc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eae4:	2b06      	cmp	r3, #6
 800eae6:	d006      	beq.n	800eaf6 <etharp_update_arp_entry+0x26>
 800eae8:	4b48      	ldr	r3, [pc, #288]	; (800ec0c <etharp_update_arp_entry+0x13c>)
 800eaea:	f240 12a9 	movw	r2, #425	; 0x1a9
 800eaee:	4948      	ldr	r1, [pc, #288]	; (800ec10 <etharp_update_arp_entry+0x140>)
 800eaf0:	4848      	ldr	r0, [pc, #288]	; (800ec14 <etharp_update_arp_entry+0x144>)
 800eaf2:	f002 f8e5 	bl	8010cc0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d012      	beq.n	800eb22 <etharp_update_arp_entry+0x52>
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d00e      	beq.n	800eb22 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	68f9      	ldr	r1, [r7, #12]
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f001 f939 	bl	800fd82 <ip4_addr_isbroadcast_u32>
 800eb10:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d105      	bne.n	800eb22 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800eb1e:	2be0      	cmp	r3, #224	; 0xe0
 800eb20:	d102      	bne.n	800eb28 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800eb22:	f06f 030f 	mvn.w	r3, #15
 800eb26:	e06c      	b.n	800ec02 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800eb28:	78fb      	ldrb	r3, [r7, #3]
 800eb2a:	68fa      	ldr	r2, [r7, #12]
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	68b8      	ldr	r0, [r7, #8]
 800eb30:	f7ff fe56 	bl	800e7e0 <etharp_find_entry>
 800eb34:	4603      	mov	r3, r0
 800eb36:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800eb38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	da02      	bge.n	800eb46 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800eb40:	8afb      	ldrh	r3, [r7, #22]
 800eb42:	b25b      	sxtb	r3, r3
 800eb44:	e05d      	b.n	800ec02 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800eb46:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eb4a:	4933      	ldr	r1, [pc, #204]	; (800ec18 <etharp_update_arp_entry+0x148>)
 800eb4c:	4613      	mov	r3, r2
 800eb4e:	005b      	lsls	r3, r3, #1
 800eb50:	4413      	add	r3, r2
 800eb52:	00db      	lsls	r3, r3, #3
 800eb54:	440b      	add	r3, r1
 800eb56:	3314      	adds	r3, #20
 800eb58:	2202      	movs	r2, #2
 800eb5a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800eb5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eb60:	492d      	ldr	r1, [pc, #180]	; (800ec18 <etharp_update_arp_entry+0x148>)
 800eb62:	4613      	mov	r3, r2
 800eb64:	005b      	lsls	r3, r3, #1
 800eb66:	4413      	add	r3, r2
 800eb68:	00db      	lsls	r3, r3, #3
 800eb6a:	440b      	add	r3, r1
 800eb6c:	3308      	adds	r3, #8
 800eb6e:	68fa      	ldr	r2, [r7, #12]
 800eb70:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800eb72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eb76:	4613      	mov	r3, r2
 800eb78:	005b      	lsls	r3, r3, #1
 800eb7a:	4413      	add	r3, r2
 800eb7c:	00db      	lsls	r3, r3, #3
 800eb7e:	3308      	adds	r3, #8
 800eb80:	4a25      	ldr	r2, [pc, #148]	; (800ec18 <etharp_update_arp_entry+0x148>)
 800eb82:	4413      	add	r3, r2
 800eb84:	3304      	adds	r3, #4
 800eb86:	2206      	movs	r2, #6
 800eb88:	6879      	ldr	r1, [r7, #4]
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f002 f882 	bl	8010c94 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800eb90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eb94:	4920      	ldr	r1, [pc, #128]	; (800ec18 <etharp_update_arp_entry+0x148>)
 800eb96:	4613      	mov	r3, r2
 800eb98:	005b      	lsls	r3, r3, #1
 800eb9a:	4413      	add	r3, r2
 800eb9c:	00db      	lsls	r3, r3, #3
 800eb9e:	440b      	add	r3, r1
 800eba0:	3312      	adds	r3, #18
 800eba2:	2200      	movs	r2, #0
 800eba4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800eba6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ebaa:	491b      	ldr	r1, [pc, #108]	; (800ec18 <etharp_update_arp_entry+0x148>)
 800ebac:	4613      	mov	r3, r2
 800ebae:	005b      	lsls	r3, r3, #1
 800ebb0:	4413      	add	r3, r2
 800ebb2:	00db      	lsls	r3, r3, #3
 800ebb4:	440b      	add	r3, r1
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d021      	beq.n	800ec00 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ebbc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ebc0:	4915      	ldr	r1, [pc, #84]	; (800ec18 <etharp_update_arp_entry+0x148>)
 800ebc2:	4613      	mov	r3, r2
 800ebc4:	005b      	lsls	r3, r3, #1
 800ebc6:	4413      	add	r3, r2
 800ebc8:	00db      	lsls	r3, r3, #3
 800ebca:	440b      	add	r3, r1
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ebd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ebd4:	4910      	ldr	r1, [pc, #64]	; (800ec18 <etharp_update_arp_entry+0x148>)
 800ebd6:	4613      	mov	r3, r2
 800ebd8:	005b      	lsls	r3, r3, #1
 800ebda:	4413      	add	r3, r2
 800ebdc:	00db      	lsls	r3, r3, #3
 800ebde:	440b      	add	r3, r1
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800ebea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ebee:	9300      	str	r3, [sp, #0]
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6939      	ldr	r1, [r7, #16]
 800ebf4:	68f8      	ldr	r0, [r7, #12]
 800ebf6:	f001 ffd1 	bl	8010b9c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800ebfa:	6938      	ldr	r0, [r7, #16]
 800ebfc:	f7f9 fd90 	bl	8008720 <pbuf_free>
  }
  return ERR_OK;
 800ec00:	2300      	movs	r3, #0
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	3718      	adds	r7, #24
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}
 800ec0a:	bf00      	nop
 800ec0c:	08014184 	.word	0x08014184
 800ec10:	0801427c 	.word	0x0801427c
 800ec14:	080141fc 	.word	0x080141fc
 800ec18:	20007fac 	.word	0x20007fac

0800ec1c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b084      	sub	sp, #16
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ec24:	2300      	movs	r3, #0
 800ec26:	60fb      	str	r3, [r7, #12]
 800ec28:	e01e      	b.n	800ec68 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800ec2a:	4913      	ldr	r1, [pc, #76]	; (800ec78 <etharp_cleanup_netif+0x5c>)
 800ec2c:	68fa      	ldr	r2, [r7, #12]
 800ec2e:	4613      	mov	r3, r2
 800ec30:	005b      	lsls	r3, r3, #1
 800ec32:	4413      	add	r3, r2
 800ec34:	00db      	lsls	r3, r3, #3
 800ec36:	440b      	add	r3, r1
 800ec38:	3314      	adds	r3, #20
 800ec3a:	781b      	ldrb	r3, [r3, #0]
 800ec3c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800ec3e:	7afb      	ldrb	r3, [r7, #11]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d00e      	beq.n	800ec62 <etharp_cleanup_netif+0x46>
 800ec44:	490c      	ldr	r1, [pc, #48]	; (800ec78 <etharp_cleanup_netif+0x5c>)
 800ec46:	68fa      	ldr	r2, [r7, #12]
 800ec48:	4613      	mov	r3, r2
 800ec4a:	005b      	lsls	r3, r3, #1
 800ec4c:	4413      	add	r3, r2
 800ec4e:	00db      	lsls	r3, r3, #3
 800ec50:	440b      	add	r3, r1
 800ec52:	3308      	adds	r3, #8
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	687a      	ldr	r2, [r7, #4]
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d102      	bne.n	800ec62 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800ec5c:	68f8      	ldr	r0, [r7, #12]
 800ec5e:	f7ff fce5 	bl	800e62c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	3301      	adds	r3, #1
 800ec66:	60fb      	str	r3, [r7, #12]
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	2b09      	cmp	r3, #9
 800ec6c:	dddd      	ble.n	800ec2a <etharp_cleanup_netif+0xe>
    }
  }
}
 800ec6e:	bf00      	nop
 800ec70:	bf00      	nop
 800ec72:	3710      	adds	r7, #16
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}
 800ec78:	20007fac 	.word	0x20007fac

0800ec7c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ec7c:	b5b0      	push	{r4, r5, r7, lr}
 800ec7e:	b08a      	sub	sp, #40	; 0x28
 800ec80:	af04      	add	r7, sp, #16
 800ec82:	6078      	str	r0, [r7, #4]
 800ec84:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d107      	bne.n	800ec9c <etharp_input+0x20>
 800ec8c:	4b3d      	ldr	r3, [pc, #244]	; (800ed84 <etharp_input+0x108>)
 800ec8e:	f240 228a 	movw	r2, #650	; 0x28a
 800ec92:	493d      	ldr	r1, [pc, #244]	; (800ed88 <etharp_input+0x10c>)
 800ec94:	483d      	ldr	r0, [pc, #244]	; (800ed8c <etharp_input+0x110>)
 800ec96:	f002 f813 	bl	8010cc0 <iprintf>
 800ec9a:	e06f      	b.n	800ed7c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	685b      	ldr	r3, [r3, #4]
 800eca0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800eca2:	693b      	ldr	r3, [r7, #16]
 800eca4:	881b      	ldrh	r3, [r3, #0]
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ecac:	d10c      	bne.n	800ecc8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ecb2:	2b06      	cmp	r3, #6
 800ecb4:	d108      	bne.n	800ecc8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ecba:	2b04      	cmp	r3, #4
 800ecbc:	d104      	bne.n	800ecc8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	885b      	ldrh	r3, [r3, #2]
 800ecc2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ecc4:	2b08      	cmp	r3, #8
 800ecc6:	d003      	beq.n	800ecd0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f7f9 fd29 	bl	8008720 <pbuf_free>
    return;
 800ecce:	e055      	b.n	800ed7c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	330e      	adds	r3, #14
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	3318      	adds	r3, #24
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	3304      	adds	r3, #4
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d102      	bne.n	800ecf0 <etharp_input+0x74>
    for_us = 0;
 800ecea:	2300      	movs	r3, #0
 800ecec:	75fb      	strb	r3, [r7, #23]
 800ecee:	e009      	b.n	800ed04 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ecf0:	68ba      	ldr	r2, [r7, #8]
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	3304      	adds	r3, #4
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	429a      	cmp	r2, r3
 800ecfa:	bf0c      	ite	eq
 800ecfc:	2301      	moveq	r3, #1
 800ecfe:	2300      	movne	r3, #0
 800ed00:	b2db      	uxtb	r3, r3
 800ed02:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ed04:	693b      	ldr	r3, [r7, #16]
 800ed06:	f103 0208 	add.w	r2, r3, #8
 800ed0a:	7dfb      	ldrb	r3, [r7, #23]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d001      	beq.n	800ed14 <etharp_input+0x98>
 800ed10:	2301      	movs	r3, #1
 800ed12:	e000      	b.n	800ed16 <etharp_input+0x9a>
 800ed14:	2302      	movs	r3, #2
 800ed16:	f107 010c 	add.w	r1, r7, #12
 800ed1a:	6838      	ldr	r0, [r7, #0]
 800ed1c:	f7ff fed8 	bl	800ead0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	88db      	ldrh	r3, [r3, #6]
 800ed24:	b29b      	uxth	r3, r3
 800ed26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed2a:	d003      	beq.n	800ed34 <etharp_input+0xb8>
 800ed2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed30:	d01e      	beq.n	800ed70 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800ed32:	e020      	b.n	800ed76 <etharp_input+0xfa>
      if (for_us) {
 800ed34:	7dfb      	ldrb	r3, [r7, #23]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d01c      	beq.n	800ed74 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ed40:	693b      	ldr	r3, [r7, #16]
 800ed42:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800ed50:	693a      	ldr	r2, [r7, #16]
 800ed52:	3208      	adds	r2, #8
        etharp_raw(netif,
 800ed54:	2102      	movs	r1, #2
 800ed56:	9103      	str	r1, [sp, #12]
 800ed58:	f107 010c 	add.w	r1, r7, #12
 800ed5c:	9102      	str	r1, [sp, #8]
 800ed5e:	9201      	str	r2, [sp, #4]
 800ed60:	9300      	str	r3, [sp, #0]
 800ed62:	462b      	mov	r3, r5
 800ed64:	4622      	mov	r2, r4
 800ed66:	4601      	mov	r1, r0
 800ed68:	6838      	ldr	r0, [r7, #0]
 800ed6a:	f000 faeb 	bl	800f344 <etharp_raw>
      break;
 800ed6e:	e001      	b.n	800ed74 <etharp_input+0xf8>
      break;
 800ed70:	bf00      	nop
 800ed72:	e000      	b.n	800ed76 <etharp_input+0xfa>
      break;
 800ed74:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f7f9 fcd2 	bl	8008720 <pbuf_free>
}
 800ed7c:	3718      	adds	r7, #24
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bdb0      	pop	{r4, r5, r7, pc}
 800ed82:	bf00      	nop
 800ed84:	08014184 	.word	0x08014184
 800ed88:	080142d4 	.word	0x080142d4
 800ed8c:	080141fc 	.word	0x080141fc

0800ed90 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b086      	sub	sp, #24
 800ed94:	af02      	add	r7, sp, #8
 800ed96:	60f8      	str	r0, [r7, #12]
 800ed98:	60b9      	str	r1, [r7, #8]
 800ed9a:	4613      	mov	r3, r2
 800ed9c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ed9e:	79fa      	ldrb	r2, [r7, #7]
 800eda0:	4944      	ldr	r1, [pc, #272]	; (800eeb4 <etharp_output_to_arp_index+0x124>)
 800eda2:	4613      	mov	r3, r2
 800eda4:	005b      	lsls	r3, r3, #1
 800eda6:	4413      	add	r3, r2
 800eda8:	00db      	lsls	r3, r3, #3
 800edaa:	440b      	add	r3, r1
 800edac:	3314      	adds	r3, #20
 800edae:	781b      	ldrb	r3, [r3, #0]
 800edb0:	2b01      	cmp	r3, #1
 800edb2:	d806      	bhi.n	800edc2 <etharp_output_to_arp_index+0x32>
 800edb4:	4b40      	ldr	r3, [pc, #256]	; (800eeb8 <etharp_output_to_arp_index+0x128>)
 800edb6:	f240 22ee 	movw	r2, #750	; 0x2ee
 800edba:	4940      	ldr	r1, [pc, #256]	; (800eebc <etharp_output_to_arp_index+0x12c>)
 800edbc:	4840      	ldr	r0, [pc, #256]	; (800eec0 <etharp_output_to_arp_index+0x130>)
 800edbe:	f001 ff7f 	bl	8010cc0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800edc2:	79fa      	ldrb	r2, [r7, #7]
 800edc4:	493b      	ldr	r1, [pc, #236]	; (800eeb4 <etharp_output_to_arp_index+0x124>)
 800edc6:	4613      	mov	r3, r2
 800edc8:	005b      	lsls	r3, r3, #1
 800edca:	4413      	add	r3, r2
 800edcc:	00db      	lsls	r3, r3, #3
 800edce:	440b      	add	r3, r1
 800edd0:	3314      	adds	r3, #20
 800edd2:	781b      	ldrb	r3, [r3, #0]
 800edd4:	2b02      	cmp	r3, #2
 800edd6:	d153      	bne.n	800ee80 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800edd8:	79fa      	ldrb	r2, [r7, #7]
 800edda:	4936      	ldr	r1, [pc, #216]	; (800eeb4 <etharp_output_to_arp_index+0x124>)
 800eddc:	4613      	mov	r3, r2
 800edde:	005b      	lsls	r3, r3, #1
 800ede0:	4413      	add	r3, r2
 800ede2:	00db      	lsls	r3, r3, #3
 800ede4:	440b      	add	r3, r1
 800ede6:	3312      	adds	r3, #18
 800ede8:	881b      	ldrh	r3, [r3, #0]
 800edea:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800edee:	d919      	bls.n	800ee24 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800edf0:	79fa      	ldrb	r2, [r7, #7]
 800edf2:	4613      	mov	r3, r2
 800edf4:	005b      	lsls	r3, r3, #1
 800edf6:	4413      	add	r3, r2
 800edf8:	00db      	lsls	r3, r3, #3
 800edfa:	4a2e      	ldr	r2, [pc, #184]	; (800eeb4 <etharp_output_to_arp_index+0x124>)
 800edfc:	4413      	add	r3, r2
 800edfe:	3304      	adds	r3, #4
 800ee00:	4619      	mov	r1, r3
 800ee02:	68f8      	ldr	r0, [r7, #12]
 800ee04:	f000 fb4c 	bl	800f4a0 <etharp_request>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d138      	bne.n	800ee80 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ee0e:	79fa      	ldrb	r2, [r7, #7]
 800ee10:	4928      	ldr	r1, [pc, #160]	; (800eeb4 <etharp_output_to_arp_index+0x124>)
 800ee12:	4613      	mov	r3, r2
 800ee14:	005b      	lsls	r3, r3, #1
 800ee16:	4413      	add	r3, r2
 800ee18:	00db      	lsls	r3, r3, #3
 800ee1a:	440b      	add	r3, r1
 800ee1c:	3314      	adds	r3, #20
 800ee1e:	2203      	movs	r2, #3
 800ee20:	701a      	strb	r2, [r3, #0]
 800ee22:	e02d      	b.n	800ee80 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800ee24:	79fa      	ldrb	r2, [r7, #7]
 800ee26:	4923      	ldr	r1, [pc, #140]	; (800eeb4 <etharp_output_to_arp_index+0x124>)
 800ee28:	4613      	mov	r3, r2
 800ee2a:	005b      	lsls	r3, r3, #1
 800ee2c:	4413      	add	r3, r2
 800ee2e:	00db      	lsls	r3, r3, #3
 800ee30:	440b      	add	r3, r1
 800ee32:	3312      	adds	r3, #18
 800ee34:	881b      	ldrh	r3, [r3, #0]
 800ee36:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ee3a:	d321      	bcc.n	800ee80 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ee3c:	79fa      	ldrb	r2, [r7, #7]
 800ee3e:	4613      	mov	r3, r2
 800ee40:	005b      	lsls	r3, r3, #1
 800ee42:	4413      	add	r3, r2
 800ee44:	00db      	lsls	r3, r3, #3
 800ee46:	4a1b      	ldr	r2, [pc, #108]	; (800eeb4 <etharp_output_to_arp_index+0x124>)
 800ee48:	4413      	add	r3, r2
 800ee4a:	1d19      	adds	r1, r3, #4
 800ee4c:	79fa      	ldrb	r2, [r7, #7]
 800ee4e:	4613      	mov	r3, r2
 800ee50:	005b      	lsls	r3, r3, #1
 800ee52:	4413      	add	r3, r2
 800ee54:	00db      	lsls	r3, r3, #3
 800ee56:	3308      	adds	r3, #8
 800ee58:	4a16      	ldr	r2, [pc, #88]	; (800eeb4 <etharp_output_to_arp_index+0x124>)
 800ee5a:	4413      	add	r3, r2
 800ee5c:	3304      	adds	r3, #4
 800ee5e:	461a      	mov	r2, r3
 800ee60:	68f8      	ldr	r0, [r7, #12]
 800ee62:	f000 fafb 	bl	800f45c <etharp_request_dst>
 800ee66:	4603      	mov	r3, r0
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d109      	bne.n	800ee80 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ee6c:	79fa      	ldrb	r2, [r7, #7]
 800ee6e:	4911      	ldr	r1, [pc, #68]	; (800eeb4 <etharp_output_to_arp_index+0x124>)
 800ee70:	4613      	mov	r3, r2
 800ee72:	005b      	lsls	r3, r3, #1
 800ee74:	4413      	add	r3, r2
 800ee76:	00db      	lsls	r3, r3, #3
 800ee78:	440b      	add	r3, r1
 800ee7a:	3314      	adds	r3, #20
 800ee7c:	2203      	movs	r2, #3
 800ee7e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800ee86:	79fa      	ldrb	r2, [r7, #7]
 800ee88:	4613      	mov	r3, r2
 800ee8a:	005b      	lsls	r3, r3, #1
 800ee8c:	4413      	add	r3, r2
 800ee8e:	00db      	lsls	r3, r3, #3
 800ee90:	3308      	adds	r3, #8
 800ee92:	4a08      	ldr	r2, [pc, #32]	; (800eeb4 <etharp_output_to_arp_index+0x124>)
 800ee94:	4413      	add	r3, r2
 800ee96:	3304      	adds	r3, #4
 800ee98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ee9c:	9200      	str	r2, [sp, #0]
 800ee9e:	460a      	mov	r2, r1
 800eea0:	68b9      	ldr	r1, [r7, #8]
 800eea2:	68f8      	ldr	r0, [r7, #12]
 800eea4:	f001 fe7a 	bl	8010b9c <ethernet_output>
 800eea8:	4603      	mov	r3, r0
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3710      	adds	r7, #16
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	20007fac 	.word	0x20007fac
 800eeb8:	08014184 	.word	0x08014184
 800eebc:	080142f4 	.word	0x080142f4
 800eec0:	080141fc 	.word	0x080141fc

0800eec4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b08a      	sub	sp, #40	; 0x28
 800eec8:	af02      	add	r7, sp, #8
 800eeca:	60f8      	str	r0, [r7, #12]
 800eecc:	60b9      	str	r1, [r7, #8]
 800eece:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d106      	bne.n	800eee8 <etharp_output+0x24>
 800eeda:	4b73      	ldr	r3, [pc, #460]	; (800f0a8 <etharp_output+0x1e4>)
 800eedc:	f240 321e 	movw	r2, #798	; 0x31e
 800eee0:	4972      	ldr	r1, [pc, #456]	; (800f0ac <etharp_output+0x1e8>)
 800eee2:	4873      	ldr	r0, [pc, #460]	; (800f0b0 <etharp_output+0x1ec>)
 800eee4:	f001 feec 	bl	8010cc0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d106      	bne.n	800eefc <etharp_output+0x38>
 800eeee:	4b6e      	ldr	r3, [pc, #440]	; (800f0a8 <etharp_output+0x1e4>)
 800eef0:	f240 321f 	movw	r2, #799	; 0x31f
 800eef4:	496f      	ldr	r1, [pc, #444]	; (800f0b4 <etharp_output+0x1f0>)
 800eef6:	486e      	ldr	r0, [pc, #440]	; (800f0b0 <etharp_output+0x1ec>)
 800eef8:	f001 fee2 	bl	8010cc0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d106      	bne.n	800ef10 <etharp_output+0x4c>
 800ef02:	4b69      	ldr	r3, [pc, #420]	; (800f0a8 <etharp_output+0x1e4>)
 800ef04:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ef08:	496b      	ldr	r1, [pc, #428]	; (800f0b8 <etharp_output+0x1f4>)
 800ef0a:	4869      	ldr	r0, [pc, #420]	; (800f0b0 <etharp_output+0x1ec>)
 800ef0c:	f001 fed8 	bl	8010cc0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	68f9      	ldr	r1, [r7, #12]
 800ef16:	4618      	mov	r0, r3
 800ef18:	f000 ff33 	bl	800fd82 <ip4_addr_isbroadcast_u32>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d002      	beq.n	800ef28 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ef22:	4b66      	ldr	r3, [pc, #408]	; (800f0bc <etharp_output+0x1f8>)
 800ef24:	61fb      	str	r3, [r7, #28]
 800ef26:	e0af      	b.n	800f088 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ef30:	2be0      	cmp	r3, #224	; 0xe0
 800ef32:	d118      	bne.n	800ef66 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ef34:	2301      	movs	r3, #1
 800ef36:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ef3c:	235e      	movs	r3, #94	; 0x5e
 800ef3e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	3301      	adds	r3, #1
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef4a:	b2db      	uxtb	r3, r3
 800ef4c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	3302      	adds	r3, #2
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	3303      	adds	r3, #3
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800ef5e:	f107 0310 	add.w	r3, r7, #16
 800ef62:	61fb      	str	r3, [r7, #28]
 800ef64:	e090      	b.n	800f088 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681a      	ldr	r2, [r3, #0]
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	3304      	adds	r3, #4
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	405a      	eors	r2, r3
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	3308      	adds	r3, #8
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	4013      	ands	r3, r2
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d012      	beq.n	800efa4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ef84:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	d00b      	beq.n	800efa4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	330c      	adds	r3, #12
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d003      	beq.n	800ef9e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	330c      	adds	r3, #12
 800ef9a:	61bb      	str	r3, [r7, #24]
 800ef9c:	e002      	b.n	800efa4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800ef9e:	f06f 0303 	mvn.w	r3, #3
 800efa2:	e07d      	b.n	800f0a0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800efa4:	4b46      	ldr	r3, [pc, #280]	; (800f0c0 <etharp_output+0x1fc>)
 800efa6:	781b      	ldrb	r3, [r3, #0]
 800efa8:	4619      	mov	r1, r3
 800efaa:	4a46      	ldr	r2, [pc, #280]	; (800f0c4 <etharp_output+0x200>)
 800efac:	460b      	mov	r3, r1
 800efae:	005b      	lsls	r3, r3, #1
 800efb0:	440b      	add	r3, r1
 800efb2:	00db      	lsls	r3, r3, #3
 800efb4:	4413      	add	r3, r2
 800efb6:	3314      	adds	r3, #20
 800efb8:	781b      	ldrb	r3, [r3, #0]
 800efba:	2b01      	cmp	r3, #1
 800efbc:	d925      	bls.n	800f00a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800efbe:	4b40      	ldr	r3, [pc, #256]	; (800f0c0 <etharp_output+0x1fc>)
 800efc0:	781b      	ldrb	r3, [r3, #0]
 800efc2:	4619      	mov	r1, r3
 800efc4:	4a3f      	ldr	r2, [pc, #252]	; (800f0c4 <etharp_output+0x200>)
 800efc6:	460b      	mov	r3, r1
 800efc8:	005b      	lsls	r3, r3, #1
 800efca:	440b      	add	r3, r1
 800efcc:	00db      	lsls	r3, r3, #3
 800efce:	4413      	add	r3, r2
 800efd0:	3308      	adds	r3, #8
 800efd2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800efd4:	68fa      	ldr	r2, [r7, #12]
 800efd6:	429a      	cmp	r2, r3
 800efd8:	d117      	bne.n	800f00a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800efda:	69bb      	ldr	r3, [r7, #24]
 800efdc:	681a      	ldr	r2, [r3, #0]
 800efde:	4b38      	ldr	r3, [pc, #224]	; (800f0c0 <etharp_output+0x1fc>)
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	4618      	mov	r0, r3
 800efe4:	4937      	ldr	r1, [pc, #220]	; (800f0c4 <etharp_output+0x200>)
 800efe6:	4603      	mov	r3, r0
 800efe8:	005b      	lsls	r3, r3, #1
 800efea:	4403      	add	r3, r0
 800efec:	00db      	lsls	r3, r3, #3
 800efee:	440b      	add	r3, r1
 800eff0:	3304      	adds	r3, #4
 800eff2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d108      	bne.n	800f00a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800eff8:	4b31      	ldr	r3, [pc, #196]	; (800f0c0 <etharp_output+0x1fc>)
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	461a      	mov	r2, r3
 800effe:	68b9      	ldr	r1, [r7, #8]
 800f000:	68f8      	ldr	r0, [r7, #12]
 800f002:	f7ff fec5 	bl	800ed90 <etharp_output_to_arp_index>
 800f006:	4603      	mov	r3, r0
 800f008:	e04a      	b.n	800f0a0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f00a:	2300      	movs	r3, #0
 800f00c:	75fb      	strb	r3, [r7, #23]
 800f00e:	e031      	b.n	800f074 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f010:	7dfa      	ldrb	r2, [r7, #23]
 800f012:	492c      	ldr	r1, [pc, #176]	; (800f0c4 <etharp_output+0x200>)
 800f014:	4613      	mov	r3, r2
 800f016:	005b      	lsls	r3, r3, #1
 800f018:	4413      	add	r3, r2
 800f01a:	00db      	lsls	r3, r3, #3
 800f01c:	440b      	add	r3, r1
 800f01e:	3314      	adds	r3, #20
 800f020:	781b      	ldrb	r3, [r3, #0]
 800f022:	2b01      	cmp	r3, #1
 800f024:	d923      	bls.n	800f06e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f026:	7dfa      	ldrb	r2, [r7, #23]
 800f028:	4926      	ldr	r1, [pc, #152]	; (800f0c4 <etharp_output+0x200>)
 800f02a:	4613      	mov	r3, r2
 800f02c:	005b      	lsls	r3, r3, #1
 800f02e:	4413      	add	r3, r2
 800f030:	00db      	lsls	r3, r3, #3
 800f032:	440b      	add	r3, r1
 800f034:	3308      	adds	r3, #8
 800f036:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f038:	68fa      	ldr	r2, [r7, #12]
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d117      	bne.n	800f06e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f03e:	69bb      	ldr	r3, [r7, #24]
 800f040:	6819      	ldr	r1, [r3, #0]
 800f042:	7dfa      	ldrb	r2, [r7, #23]
 800f044:	481f      	ldr	r0, [pc, #124]	; (800f0c4 <etharp_output+0x200>)
 800f046:	4613      	mov	r3, r2
 800f048:	005b      	lsls	r3, r3, #1
 800f04a:	4413      	add	r3, r2
 800f04c:	00db      	lsls	r3, r3, #3
 800f04e:	4403      	add	r3, r0
 800f050:	3304      	adds	r3, #4
 800f052:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f054:	4299      	cmp	r1, r3
 800f056:	d10a      	bne.n	800f06e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f058:	4a19      	ldr	r2, [pc, #100]	; (800f0c0 <etharp_output+0x1fc>)
 800f05a:	7dfb      	ldrb	r3, [r7, #23]
 800f05c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f05e:	7dfb      	ldrb	r3, [r7, #23]
 800f060:	461a      	mov	r2, r3
 800f062:	68b9      	ldr	r1, [r7, #8]
 800f064:	68f8      	ldr	r0, [r7, #12]
 800f066:	f7ff fe93 	bl	800ed90 <etharp_output_to_arp_index>
 800f06a:	4603      	mov	r3, r0
 800f06c:	e018      	b.n	800f0a0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f06e:	7dfb      	ldrb	r3, [r7, #23]
 800f070:	3301      	adds	r3, #1
 800f072:	75fb      	strb	r3, [r7, #23]
 800f074:	7dfb      	ldrb	r3, [r7, #23]
 800f076:	2b09      	cmp	r3, #9
 800f078:	d9ca      	bls.n	800f010 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f07a:	68ba      	ldr	r2, [r7, #8]
 800f07c:	69b9      	ldr	r1, [r7, #24]
 800f07e:	68f8      	ldr	r0, [r7, #12]
 800f080:	f000 f822 	bl	800f0c8 <etharp_query>
 800f084:	4603      	mov	r3, r0
 800f086:	e00b      	b.n	800f0a0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f08e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f092:	9300      	str	r3, [sp, #0]
 800f094:	69fb      	ldr	r3, [r7, #28]
 800f096:	68b9      	ldr	r1, [r7, #8]
 800f098:	68f8      	ldr	r0, [r7, #12]
 800f09a:	f001 fd7f 	bl	8010b9c <ethernet_output>
 800f09e:	4603      	mov	r3, r0
}
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	3720      	adds	r7, #32
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}
 800f0a8:	08014184 	.word	0x08014184
 800f0ac:	080142d4 	.word	0x080142d4
 800f0b0:	080141fc 	.word	0x080141fc
 800f0b4:	08014324 	.word	0x08014324
 800f0b8:	080142c4 	.word	0x080142c4
 800f0bc:	08014940 	.word	0x08014940
 800f0c0:	2000809c 	.word	0x2000809c
 800f0c4:	20007fac 	.word	0x20007fac

0800f0c8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b08c      	sub	sp, #48	; 0x30
 800f0cc:	af02      	add	r7, sp, #8
 800f0ce:	60f8      	str	r0, [r7, #12]
 800f0d0:	60b9      	str	r1, [r7, #8]
 800f0d2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	3326      	adds	r3, #38	; 0x26
 800f0d8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f0da:	23ff      	movs	r3, #255	; 0xff
 800f0dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f0e4:	68bb      	ldr	r3, [r7, #8]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	68f9      	ldr	r1, [r7, #12]
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f000 fe49 	bl	800fd82 <ip4_addr_isbroadcast_u32>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d10c      	bne.n	800f110 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f0fe:	2be0      	cmp	r3, #224	; 0xe0
 800f100:	d006      	beq.n	800f110 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d003      	beq.n	800f110 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d102      	bne.n	800f116 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f110:	f06f 030f 	mvn.w	r3, #15
 800f114:	e101      	b.n	800f31a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f116:	68fa      	ldr	r2, [r7, #12]
 800f118:	2101      	movs	r1, #1
 800f11a:	68b8      	ldr	r0, [r7, #8]
 800f11c:	f7ff fb60 	bl	800e7e0 <etharp_find_entry>
 800f120:	4603      	mov	r3, r0
 800f122:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f124:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	da02      	bge.n	800f132 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f12c:	8a7b      	ldrh	r3, [r7, #18]
 800f12e:	b25b      	sxtb	r3, r3
 800f130:	e0f3      	b.n	800f31a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f132:	8a7b      	ldrh	r3, [r7, #18]
 800f134:	2b7e      	cmp	r3, #126	; 0x7e
 800f136:	d906      	bls.n	800f146 <etharp_query+0x7e>
 800f138:	4b7a      	ldr	r3, [pc, #488]	; (800f324 <etharp_query+0x25c>)
 800f13a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f13e:	497a      	ldr	r1, [pc, #488]	; (800f328 <etharp_query+0x260>)
 800f140:	487a      	ldr	r0, [pc, #488]	; (800f32c <etharp_query+0x264>)
 800f142:	f001 fdbd 	bl	8010cc0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f146:	8a7b      	ldrh	r3, [r7, #18]
 800f148:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f14a:	7c7a      	ldrb	r2, [r7, #17]
 800f14c:	4978      	ldr	r1, [pc, #480]	; (800f330 <etharp_query+0x268>)
 800f14e:	4613      	mov	r3, r2
 800f150:	005b      	lsls	r3, r3, #1
 800f152:	4413      	add	r3, r2
 800f154:	00db      	lsls	r3, r3, #3
 800f156:	440b      	add	r3, r1
 800f158:	3314      	adds	r3, #20
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d115      	bne.n	800f18c <etharp_query+0xc4>
    is_new_entry = 1;
 800f160:	2301      	movs	r3, #1
 800f162:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f164:	7c7a      	ldrb	r2, [r7, #17]
 800f166:	4972      	ldr	r1, [pc, #456]	; (800f330 <etharp_query+0x268>)
 800f168:	4613      	mov	r3, r2
 800f16a:	005b      	lsls	r3, r3, #1
 800f16c:	4413      	add	r3, r2
 800f16e:	00db      	lsls	r3, r3, #3
 800f170:	440b      	add	r3, r1
 800f172:	3314      	adds	r3, #20
 800f174:	2201      	movs	r2, #1
 800f176:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f178:	7c7a      	ldrb	r2, [r7, #17]
 800f17a:	496d      	ldr	r1, [pc, #436]	; (800f330 <etharp_query+0x268>)
 800f17c:	4613      	mov	r3, r2
 800f17e:	005b      	lsls	r3, r3, #1
 800f180:	4413      	add	r3, r2
 800f182:	00db      	lsls	r3, r3, #3
 800f184:	440b      	add	r3, r1
 800f186:	3308      	adds	r3, #8
 800f188:	68fa      	ldr	r2, [r7, #12]
 800f18a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f18c:	7c7a      	ldrb	r2, [r7, #17]
 800f18e:	4968      	ldr	r1, [pc, #416]	; (800f330 <etharp_query+0x268>)
 800f190:	4613      	mov	r3, r2
 800f192:	005b      	lsls	r3, r3, #1
 800f194:	4413      	add	r3, r2
 800f196:	00db      	lsls	r3, r3, #3
 800f198:	440b      	add	r3, r1
 800f19a:	3314      	adds	r3, #20
 800f19c:	781b      	ldrb	r3, [r3, #0]
 800f19e:	2b01      	cmp	r3, #1
 800f1a0:	d011      	beq.n	800f1c6 <etharp_query+0xfe>
 800f1a2:	7c7a      	ldrb	r2, [r7, #17]
 800f1a4:	4962      	ldr	r1, [pc, #392]	; (800f330 <etharp_query+0x268>)
 800f1a6:	4613      	mov	r3, r2
 800f1a8:	005b      	lsls	r3, r3, #1
 800f1aa:	4413      	add	r3, r2
 800f1ac:	00db      	lsls	r3, r3, #3
 800f1ae:	440b      	add	r3, r1
 800f1b0:	3314      	adds	r3, #20
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	2b01      	cmp	r3, #1
 800f1b6:	d806      	bhi.n	800f1c6 <etharp_query+0xfe>
 800f1b8:	4b5a      	ldr	r3, [pc, #360]	; (800f324 <etharp_query+0x25c>)
 800f1ba:	f240 32cd 	movw	r2, #973	; 0x3cd
 800f1be:	495d      	ldr	r1, [pc, #372]	; (800f334 <etharp_query+0x26c>)
 800f1c0:	485a      	ldr	r0, [pc, #360]	; (800f32c <etharp_query+0x264>)
 800f1c2:	f001 fd7d 	bl	8010cc0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f1c6:	6a3b      	ldr	r3, [r7, #32]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d102      	bne.n	800f1d2 <etharp_query+0x10a>
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d10c      	bne.n	800f1ec <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f1d2:	68b9      	ldr	r1, [r7, #8]
 800f1d4:	68f8      	ldr	r0, [r7, #12]
 800f1d6:	f000 f963 	bl	800f4a0 <etharp_request>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d102      	bne.n	800f1ec <etharp_query+0x124>
      return result;
 800f1e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f1ea:	e096      	b.n	800f31a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d106      	bne.n	800f200 <etharp_query+0x138>
 800f1f2:	4b4c      	ldr	r3, [pc, #304]	; (800f324 <etharp_query+0x25c>)
 800f1f4:	f240 32e1 	movw	r2, #993	; 0x3e1
 800f1f8:	494f      	ldr	r1, [pc, #316]	; (800f338 <etharp_query+0x270>)
 800f1fa:	484c      	ldr	r0, [pc, #304]	; (800f32c <etharp_query+0x264>)
 800f1fc:	f001 fd60 	bl	8010cc0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f200:	7c7a      	ldrb	r2, [r7, #17]
 800f202:	494b      	ldr	r1, [pc, #300]	; (800f330 <etharp_query+0x268>)
 800f204:	4613      	mov	r3, r2
 800f206:	005b      	lsls	r3, r3, #1
 800f208:	4413      	add	r3, r2
 800f20a:	00db      	lsls	r3, r3, #3
 800f20c:	440b      	add	r3, r1
 800f20e:	3314      	adds	r3, #20
 800f210:	781b      	ldrb	r3, [r3, #0]
 800f212:	2b01      	cmp	r3, #1
 800f214:	d917      	bls.n	800f246 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f216:	4a49      	ldr	r2, [pc, #292]	; (800f33c <etharp_query+0x274>)
 800f218:	7c7b      	ldrb	r3, [r7, #17]
 800f21a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f21c:	7c7a      	ldrb	r2, [r7, #17]
 800f21e:	4613      	mov	r3, r2
 800f220:	005b      	lsls	r3, r3, #1
 800f222:	4413      	add	r3, r2
 800f224:	00db      	lsls	r3, r3, #3
 800f226:	3308      	adds	r3, #8
 800f228:	4a41      	ldr	r2, [pc, #260]	; (800f330 <etharp_query+0x268>)
 800f22a:	4413      	add	r3, r2
 800f22c:	3304      	adds	r3, #4
 800f22e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f232:	9200      	str	r2, [sp, #0]
 800f234:	697a      	ldr	r2, [r7, #20]
 800f236:	6879      	ldr	r1, [r7, #4]
 800f238:	68f8      	ldr	r0, [r7, #12]
 800f23a:	f001 fcaf 	bl	8010b9c <ethernet_output>
 800f23e:	4603      	mov	r3, r0
 800f240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f244:	e067      	b.n	800f316 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f246:	7c7a      	ldrb	r2, [r7, #17]
 800f248:	4939      	ldr	r1, [pc, #228]	; (800f330 <etharp_query+0x268>)
 800f24a:	4613      	mov	r3, r2
 800f24c:	005b      	lsls	r3, r3, #1
 800f24e:	4413      	add	r3, r2
 800f250:	00db      	lsls	r3, r3, #3
 800f252:	440b      	add	r3, r1
 800f254:	3314      	adds	r3, #20
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	2b01      	cmp	r3, #1
 800f25a:	d15c      	bne.n	800f316 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f25c:	2300      	movs	r3, #0
 800f25e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f264:	e01c      	b.n	800f2a0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f266:	69fb      	ldr	r3, [r7, #28]
 800f268:	895a      	ldrh	r2, [r3, #10]
 800f26a:	69fb      	ldr	r3, [r7, #28]
 800f26c:	891b      	ldrh	r3, [r3, #8]
 800f26e:	429a      	cmp	r2, r3
 800f270:	d10a      	bne.n	800f288 <etharp_query+0x1c0>
 800f272:	69fb      	ldr	r3, [r7, #28]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d006      	beq.n	800f288 <etharp_query+0x1c0>
 800f27a:	4b2a      	ldr	r3, [pc, #168]	; (800f324 <etharp_query+0x25c>)
 800f27c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f280:	492f      	ldr	r1, [pc, #188]	; (800f340 <etharp_query+0x278>)
 800f282:	482a      	ldr	r0, [pc, #168]	; (800f32c <etharp_query+0x264>)
 800f284:	f001 fd1c 	bl	8010cc0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f288:	69fb      	ldr	r3, [r7, #28]
 800f28a:	7b1b      	ldrb	r3, [r3, #12]
 800f28c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f290:	2b00      	cmp	r3, #0
 800f292:	d002      	beq.n	800f29a <etharp_query+0x1d2>
        copy_needed = 1;
 800f294:	2301      	movs	r3, #1
 800f296:	61bb      	str	r3, [r7, #24]
        break;
 800f298:	e005      	b.n	800f2a6 <etharp_query+0x1de>
      }
      p = p->next;
 800f29a:	69fb      	ldr	r3, [r7, #28]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f2a0:	69fb      	ldr	r3, [r7, #28]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d1df      	bne.n	800f266 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800f2a6:	69bb      	ldr	r3, [r7, #24]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d007      	beq.n	800f2bc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f2ac:	687a      	ldr	r2, [r7, #4]
 800f2ae:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f2b2:	200e      	movs	r0, #14
 800f2b4:	f7f9 fc90 	bl	8008bd8 <pbuf_clone>
 800f2b8:	61f8      	str	r0, [r7, #28]
 800f2ba:	e004      	b.n	800f2c6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f2c0:	69f8      	ldr	r0, [r7, #28]
 800f2c2:	f7f9 facd 	bl	8008860 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f2c6:	69fb      	ldr	r3, [r7, #28]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d021      	beq.n	800f310 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f2cc:	7c7a      	ldrb	r2, [r7, #17]
 800f2ce:	4918      	ldr	r1, [pc, #96]	; (800f330 <etharp_query+0x268>)
 800f2d0:	4613      	mov	r3, r2
 800f2d2:	005b      	lsls	r3, r3, #1
 800f2d4:	4413      	add	r3, r2
 800f2d6:	00db      	lsls	r3, r3, #3
 800f2d8:	440b      	add	r3, r1
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d00a      	beq.n	800f2f6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f2e0:	7c7a      	ldrb	r2, [r7, #17]
 800f2e2:	4913      	ldr	r1, [pc, #76]	; (800f330 <etharp_query+0x268>)
 800f2e4:	4613      	mov	r3, r2
 800f2e6:	005b      	lsls	r3, r3, #1
 800f2e8:	4413      	add	r3, r2
 800f2ea:	00db      	lsls	r3, r3, #3
 800f2ec:	440b      	add	r3, r1
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7f9 fa15 	bl	8008720 <pbuf_free>
      }
      arp_table[i].q = p;
 800f2f6:	7c7a      	ldrb	r2, [r7, #17]
 800f2f8:	490d      	ldr	r1, [pc, #52]	; (800f330 <etharp_query+0x268>)
 800f2fa:	4613      	mov	r3, r2
 800f2fc:	005b      	lsls	r3, r3, #1
 800f2fe:	4413      	add	r3, r2
 800f300:	00db      	lsls	r3, r3, #3
 800f302:	440b      	add	r3, r1
 800f304:	69fa      	ldr	r2, [r7, #28]
 800f306:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f308:	2300      	movs	r3, #0
 800f30a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f30e:	e002      	b.n	800f316 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f310:	23ff      	movs	r3, #255	; 0xff
 800f312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800f316:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3728      	adds	r7, #40	; 0x28
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
 800f322:	bf00      	nop
 800f324:	08014184 	.word	0x08014184
 800f328:	08014330 	.word	0x08014330
 800f32c:	080141fc 	.word	0x080141fc
 800f330:	20007fac 	.word	0x20007fac
 800f334:	08014340 	.word	0x08014340
 800f338:	08014324 	.word	0x08014324
 800f33c:	2000809c 	.word	0x2000809c
 800f340:	08014368 	.word	0x08014368

0800f344 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b08a      	sub	sp, #40	; 0x28
 800f348:	af02      	add	r7, sp, #8
 800f34a:	60f8      	str	r0, [r7, #12]
 800f34c:	60b9      	str	r1, [r7, #8]
 800f34e:	607a      	str	r2, [r7, #4]
 800f350:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f352:	2300      	movs	r3, #0
 800f354:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d106      	bne.n	800f36a <etharp_raw+0x26>
 800f35c:	4b3a      	ldr	r3, [pc, #232]	; (800f448 <etharp_raw+0x104>)
 800f35e:	f240 4257 	movw	r2, #1111	; 0x457
 800f362:	493a      	ldr	r1, [pc, #232]	; (800f44c <etharp_raw+0x108>)
 800f364:	483a      	ldr	r0, [pc, #232]	; (800f450 <etharp_raw+0x10c>)
 800f366:	f001 fcab 	bl	8010cc0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f36a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f36e:	211c      	movs	r1, #28
 800f370:	200e      	movs	r0, #14
 800f372:	f7f8 fef1 	bl	8008158 <pbuf_alloc>
 800f376:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f378:	69bb      	ldr	r3, [r7, #24]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d102      	bne.n	800f384 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f37e:	f04f 33ff 	mov.w	r3, #4294967295
 800f382:	e05d      	b.n	800f440 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f384:	69bb      	ldr	r3, [r7, #24]
 800f386:	895b      	ldrh	r3, [r3, #10]
 800f388:	2b1b      	cmp	r3, #27
 800f38a:	d806      	bhi.n	800f39a <etharp_raw+0x56>
 800f38c:	4b2e      	ldr	r3, [pc, #184]	; (800f448 <etharp_raw+0x104>)
 800f38e:	f240 4262 	movw	r2, #1122	; 0x462
 800f392:	4930      	ldr	r1, [pc, #192]	; (800f454 <etharp_raw+0x110>)
 800f394:	482e      	ldr	r0, [pc, #184]	; (800f450 <etharp_raw+0x10c>)
 800f396:	f001 fc93 	bl	8010cc0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f39a:	69bb      	ldr	r3, [r7, #24]
 800f39c:	685b      	ldr	r3, [r3, #4]
 800f39e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f3a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f7f7 fdc6 	bl	8006f34 <lwip_htons>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f3b6:	2b06      	cmp	r3, #6
 800f3b8:	d006      	beq.n	800f3c8 <etharp_raw+0x84>
 800f3ba:	4b23      	ldr	r3, [pc, #140]	; (800f448 <etharp_raw+0x104>)
 800f3bc:	f240 4269 	movw	r2, #1129	; 0x469
 800f3c0:	4925      	ldr	r1, [pc, #148]	; (800f458 <etharp_raw+0x114>)
 800f3c2:	4823      	ldr	r0, [pc, #140]	; (800f450 <etharp_raw+0x10c>)
 800f3c4:	f001 fc7c 	bl	8010cc0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f3c8:	697b      	ldr	r3, [r7, #20]
 800f3ca:	3308      	adds	r3, #8
 800f3cc:	2206      	movs	r2, #6
 800f3ce:	6839      	ldr	r1, [r7, #0]
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f001 fc5f 	bl	8010c94 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f3d6:	697b      	ldr	r3, [r7, #20]
 800f3d8:	3312      	adds	r3, #18
 800f3da:	2206      	movs	r2, #6
 800f3dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f001 fc58 	bl	8010c94 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	330e      	adds	r3, #14
 800f3e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3ea:	6812      	ldr	r2, [r2, #0]
 800f3ec:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	3318      	adds	r3, #24
 800f3f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3f4:	6812      	ldr	r2, [r2, #0]
 800f3f6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	701a      	strb	r2, [r3, #0]
 800f3fe:	2200      	movs	r2, #0
 800f400:	f042 0201 	orr.w	r2, r2, #1
 800f404:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	2200      	movs	r2, #0
 800f40a:	f042 0208 	orr.w	r2, r2, #8
 800f40e:	709a      	strb	r2, [r3, #2]
 800f410:	2200      	movs	r2, #0
 800f412:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	2206      	movs	r2, #6
 800f418:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	2204      	movs	r2, #4
 800f41e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f420:	f640 0306 	movw	r3, #2054	; 0x806
 800f424:	9300      	str	r3, [sp, #0]
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	68ba      	ldr	r2, [r7, #8]
 800f42a:	69b9      	ldr	r1, [r7, #24]
 800f42c:	68f8      	ldr	r0, [r7, #12]
 800f42e:	f001 fbb5 	bl	8010b9c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f432:	69b8      	ldr	r0, [r7, #24]
 800f434:	f7f9 f974 	bl	8008720 <pbuf_free>
  p = NULL;
 800f438:	2300      	movs	r3, #0
 800f43a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f43c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f440:	4618      	mov	r0, r3
 800f442:	3720      	adds	r7, #32
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}
 800f448:	08014184 	.word	0x08014184
 800f44c:	080142d4 	.word	0x080142d4
 800f450:	080141fc 	.word	0x080141fc
 800f454:	08014384 	.word	0x08014384
 800f458:	080143b8 	.word	0x080143b8

0800f45c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b088      	sub	sp, #32
 800f460:	af04      	add	r7, sp, #16
 800f462:	60f8      	str	r0, [r7, #12]
 800f464:	60b9      	str	r1, [r7, #8]
 800f466:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f478:	2201      	movs	r2, #1
 800f47a:	9203      	str	r2, [sp, #12]
 800f47c:	68ba      	ldr	r2, [r7, #8]
 800f47e:	9202      	str	r2, [sp, #8]
 800f480:	4a06      	ldr	r2, [pc, #24]	; (800f49c <etharp_request_dst+0x40>)
 800f482:	9201      	str	r2, [sp, #4]
 800f484:	9300      	str	r3, [sp, #0]
 800f486:	4603      	mov	r3, r0
 800f488:	687a      	ldr	r2, [r7, #4]
 800f48a:	68f8      	ldr	r0, [r7, #12]
 800f48c:	f7ff ff5a 	bl	800f344 <etharp_raw>
 800f490:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f492:	4618      	mov	r0, r3
 800f494:	3710      	adds	r7, #16
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}
 800f49a:	bf00      	nop
 800f49c:	08014948 	.word	0x08014948

0800f4a0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b082      	sub	sp, #8
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
 800f4a8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f4aa:	4a05      	ldr	r2, [pc, #20]	; (800f4c0 <etharp_request+0x20>)
 800f4ac:	6839      	ldr	r1, [r7, #0]
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f7ff ffd4 	bl	800f45c <etharp_request_dst>
 800f4b4:	4603      	mov	r3, r0
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3708      	adds	r7, #8
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}
 800f4be:	bf00      	nop
 800f4c0:	08014940 	.word	0x08014940

0800f4c4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b08e      	sub	sp, #56	; 0x38
 800f4c8:	af04      	add	r7, sp, #16
 800f4ca:	6078      	str	r0, [r7, #4]
 800f4cc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f4ce:	4b86      	ldr	r3, [pc, #536]	; (800f6e8 <icmp_input+0x224>)
 800f4d0:	689b      	ldr	r3, [r3, #8]
 800f4d2:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL_BYTES(iphdr_in);
 800f4d4:	6a3b      	ldr	r3, [r7, #32]
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	f003 030f 	and.w	r3, r3, #15
 800f4dc:	b2db      	uxtb	r3, r3
 800f4de:	009b      	lsls	r3, r3, #2
 800f4e0:	b2db      	uxtb	r3, r3
 800f4e2:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 800f4e4:	8bfb      	ldrh	r3, [r7, #30]
 800f4e6:	2b13      	cmp	r3, #19
 800f4e8:	f240 80e8 	bls.w	800f6bc <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	895b      	ldrh	r3, [r3, #10]
 800f4f0:	2b03      	cmp	r3, #3
 800f4f2:	f240 80e5 	bls.w	800f6c0 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	685b      	ldr	r3, [r3, #4]
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f4fe:	7f7b      	ldrb	r3, [r7, #29]
 800f500:	2b00      	cmp	r3, #0
 800f502:	f000 80d4 	beq.w	800f6ae <icmp_input+0x1ea>
 800f506:	2b08      	cmp	r3, #8
 800f508:	f040 80d4 	bne.w	800f6b4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800f50c:	4b77      	ldr	r3, [pc, #476]	; (800f6ec <icmp_input+0x228>)
 800f50e:	627b      	str	r3, [r7, #36]	; 0x24
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f510:	4b75      	ldr	r3, [pc, #468]	; (800f6e8 <icmp_input+0x224>)
 800f512:	695b      	ldr	r3, [r3, #20]
 800f514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f518:	2be0      	cmp	r3, #224	; 0xe0
 800f51a:	f000 80d8 	beq.w	800f6ce <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f51e:	4b72      	ldr	r3, [pc, #456]	; (800f6e8 <icmp_input+0x224>)
 800f520:	695b      	ldr	r3, [r3, #20]
 800f522:	4a71      	ldr	r2, [pc, #452]	; (800f6e8 <icmp_input+0x224>)
 800f524:	6812      	ldr	r2, [r2, #0]
 800f526:	4611      	mov	r1, r2
 800f528:	4618      	mov	r0, r3
 800f52a:	f000 fc2a 	bl	800fd82 <ip4_addr_isbroadcast_u32>
 800f52e:	4603      	mov	r3, r0
 800f530:	2b00      	cmp	r3, #0
 800f532:	d002      	beq.n	800f53a <icmp_input+0x76>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	3304      	adds	r3, #4
 800f538:	627b      	str	r3, [r7, #36]	; 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	891b      	ldrh	r3, [r3, #8]
 800f53e:	2b07      	cmp	r3, #7
 800f540:	f240 80c0 	bls.w	800f6c4 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800f544:	6878      	ldr	r0, [r7, #4]
 800f546:	f7f7 fd92 	bl	800706e <inet_chksum_pbuf>
 800f54a:	4603      	mov	r3, r0
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d003      	beq.n	800f558 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f7f9 f8e5 	bl	8008720 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800f556:	e0c3      	b.n	800f6e0 <icmp_input+0x21c>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f558:	8bfb      	ldrh	r3, [r7, #30]
 800f55a:	330e      	adds	r3, #14
 800f55c:	4619      	mov	r1, r3
 800f55e:	6878      	ldr	r0, [r7, #4]
 800f560:	f7f9 f848 	bl	80085f4 <pbuf_add_header>
 800f564:	4603      	mov	r3, r0
 800f566:	2b00      	cmp	r3, #0
 800f568:	d04b      	beq.n	800f602 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	891a      	ldrh	r2, [r3, #8]
 800f56e:	8bfb      	ldrh	r3, [r7, #30]
 800f570:	4413      	add	r3, r2
 800f572:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	891b      	ldrh	r3, [r3, #8]
 800f578:	8b7a      	ldrh	r2, [r7, #26]
 800f57a:	429a      	cmp	r2, r3
 800f57c:	f0c0 80a9 	bcc.w	800f6d2 <icmp_input+0x20e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800f580:	8b7b      	ldrh	r3, [r7, #26]
 800f582:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f586:	4619      	mov	r1, r3
 800f588:	200e      	movs	r0, #14
 800f58a:	f7f8 fde5 	bl	8008158 <pbuf_alloc>
 800f58e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800f590:	697b      	ldr	r3, [r7, #20]
 800f592:	2b00      	cmp	r3, #0
 800f594:	f000 809f 	beq.w	800f6d6 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	895b      	ldrh	r3, [r3, #10]
 800f59c:	461a      	mov	r2, r3
 800f59e:	8bfb      	ldrh	r3, [r7, #30]
 800f5a0:	3308      	adds	r3, #8
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d203      	bcs.n	800f5ae <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800f5a6:	6978      	ldr	r0, [r7, #20]
 800f5a8:	f7f9 f8ba 	bl	8008720 <pbuf_free>
          goto icmperr;
 800f5ac:	e094      	b.n	800f6d8 <icmp_input+0x214>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	685b      	ldr	r3, [r3, #4]
 800f5b2:	8bfa      	ldrh	r2, [r7, #30]
 800f5b4:	6a39      	ldr	r1, [r7, #32]
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f001 fb6c 	bl	8010c94 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800f5bc:	8bfb      	ldrh	r3, [r7, #30]
 800f5be:	4619      	mov	r1, r3
 800f5c0:	6978      	ldr	r0, [r7, #20]
 800f5c2:	f7f9 f827 	bl	8008614 <pbuf_remove_header>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d009      	beq.n	800f5e0 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f5cc:	4b48      	ldr	r3, [pc, #288]	; (800f6f0 <icmp_input+0x22c>)
 800f5ce:	22b6      	movs	r2, #182	; 0xb6
 800f5d0:	4948      	ldr	r1, [pc, #288]	; (800f6f4 <icmp_input+0x230>)
 800f5d2:	4849      	ldr	r0, [pc, #292]	; (800f6f8 <icmp_input+0x234>)
 800f5d4:	f001 fb74 	bl	8010cc0 <iprintf>
          pbuf_free(r);
 800f5d8:	6978      	ldr	r0, [r7, #20]
 800f5da:	f7f9 f8a1 	bl	8008720 <pbuf_free>
          goto icmperr;
 800f5de:	e07b      	b.n	800f6d8 <icmp_input+0x214>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f5e0:	6879      	ldr	r1, [r7, #4]
 800f5e2:	6978      	ldr	r0, [r7, #20]
 800f5e4:	f7f9 f9b4 	bl	8008950 <pbuf_copy>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d003      	beq.n	800f5f6 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800f5ee:	6978      	ldr	r0, [r7, #20]
 800f5f0:	f7f9 f896 	bl	8008720 <pbuf_free>
          goto icmperr;
 800f5f4:	e070      	b.n	800f6d8 <icmp_input+0x214>
        }
        /* free the original p */
        pbuf_free(p);
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f7f9 f892 	bl	8008720 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f5fc:	697b      	ldr	r3, [r7, #20]
 800f5fe:	607b      	str	r3, [r7, #4]
 800f600:	e00f      	b.n	800f622 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f602:	8bfb      	ldrh	r3, [r7, #30]
 800f604:	330e      	adds	r3, #14
 800f606:	4619      	mov	r1, r3
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f7f9 f803 	bl	8008614 <pbuf_remove_header>
 800f60e:	4603      	mov	r3, r0
 800f610:	2b00      	cmp	r3, #0
 800f612:	d006      	beq.n	800f622 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f614:	4b36      	ldr	r3, [pc, #216]	; (800f6f0 <icmp_input+0x22c>)
 800f616:	22c7      	movs	r2, #199	; 0xc7
 800f618:	4938      	ldr	r1, [pc, #224]	; (800f6fc <icmp_input+0x238>)
 800f61a:	4837      	ldr	r0, [pc, #220]	; (800f6f8 <icmp_input+0x234>)
 800f61c:	f001 fb50 	bl	8010cc0 <iprintf>
          goto icmperr;
 800f620:	e05a      	b.n	800f6d8 <icmp_input+0x214>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	685b      	ldr	r3, [r3, #4]
 800f626:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f628:	8bfb      	ldrh	r3, [r7, #30]
 800f62a:	4619      	mov	r1, r3
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	f7f8 ffe1 	bl	80085f4 <pbuf_add_header>
 800f632:	4603      	mov	r3, r0
 800f634:	2b00      	cmp	r3, #0
 800f636:	d13c      	bne.n	800f6b2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f640:	681a      	ldr	r2, [r3, #0]
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f646:	4b28      	ldr	r3, [pc, #160]	; (800f6e8 <icmp_input+0x224>)
 800f648:	691a      	ldr	r2, [r3, #16]
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f64e:	693b      	ldr	r3, [r7, #16]
 800f650:	2200      	movs	r2, #0
 800f652:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800f654:	693b      	ldr	r3, [r7, #16]
 800f656:	885b      	ldrh	r3, [r3, #2]
 800f658:	b29b      	uxth	r3, r3
 800f65a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800f65e:	4293      	cmp	r3, r2
 800f660:	d907      	bls.n	800f672 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800f662:	693b      	ldr	r3, [r7, #16]
 800f664:	885b      	ldrh	r3, [r3, #2]
 800f666:	b29b      	uxth	r3, r3
 800f668:	3309      	adds	r3, #9
 800f66a:	b29a      	uxth	r2, r3
 800f66c:	693b      	ldr	r3, [r7, #16]
 800f66e:	805a      	strh	r2, [r3, #2]
 800f670:	e006      	b.n	800f680 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800f672:	693b      	ldr	r3, [r7, #16]
 800f674:	885b      	ldrh	r3, [r3, #2]
 800f676:	b29b      	uxth	r3, r3
 800f678:	3308      	adds	r3, #8
 800f67a:	b29a      	uxth	r2, r3
 800f67c:	693b      	ldr	r3, [r7, #16]
 800f67e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	22ff      	movs	r2, #255	; 0xff
 800f684:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	2200      	movs	r2, #0
 800f68a:	729a      	strb	r2, [r3, #10]
 800f68c:	2200      	movs	r2, #0
 800f68e:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	9302      	str	r3, [sp, #8]
 800f694:	2301      	movs	r3, #1
 800f696:	9301      	str	r3, [sp, #4]
 800f698:	2300      	movs	r3, #0
 800f69a:	9300      	str	r3, [sp, #0]
 800f69c:	23ff      	movs	r3, #255	; 0xff
 800f69e:	2200      	movs	r2, #0
 800f6a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f000 fa84 	bl	800fbb0 <ip4_output_if>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f6ac:	e001      	b.n	800f6b2 <icmp_input+0x1ee>
      break;
 800f6ae:	bf00      	nop
 800f6b0:	e000      	b.n	800f6b4 <icmp_input+0x1f0>
      break;
 800f6b2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f7f9 f833 	bl	8008720 <pbuf_free>
  return;
 800f6ba:	e011      	b.n	800f6e0 <icmp_input+0x21c>
    goto lenerr;
 800f6bc:	bf00      	nop
 800f6be:	e002      	b.n	800f6c6 <icmp_input+0x202>
    goto lenerr;
 800f6c0:	bf00      	nop
 800f6c2:	e000      	b.n	800f6c6 <icmp_input+0x202>
        goto lenerr;
 800f6c4:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f6c6:	6878      	ldr	r0, [r7, #4]
 800f6c8:	f7f9 f82a 	bl	8008720 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f6cc:	e008      	b.n	800f6e0 <icmp_input+0x21c>
        goto icmperr;
 800f6ce:	bf00      	nop
 800f6d0:	e002      	b.n	800f6d8 <icmp_input+0x214>
          goto icmperr;
 800f6d2:	bf00      	nop
 800f6d4:	e000      	b.n	800f6d8 <icmp_input+0x214>
          goto icmperr;
 800f6d6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f6d8:	6878      	ldr	r0, [r7, #4]
 800f6da:	f7f9 f821 	bl	8008720 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f6de:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f6e0:	3728      	adds	r7, #40	; 0x28
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}
 800f6e6:	bf00      	nop
 800f6e8:	20005030 	.word	0x20005030
 800f6ec:	20005044 	.word	0x20005044
 800f6f0:	080143fc 	.word	0x080143fc
 800f6f4:	08014434 	.word	0x08014434
 800f6f8:	0801446c 	.word	0x0801446c
 800f6fc:	08014494 	.word	0x08014494

0800f700 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b082      	sub	sp, #8
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
 800f708:	460b      	mov	r3, r1
 800f70a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f70c:	78fb      	ldrb	r3, [r7, #3]
 800f70e:	461a      	mov	r2, r3
 800f710:	2103      	movs	r1, #3
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f000 f814 	bl	800f740 <icmp_send_response>
}
 800f718:	bf00      	nop
 800f71a:	3708      	adds	r7, #8
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}

0800f720 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b082      	sub	sp, #8
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	460b      	mov	r3, r1
 800f72a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f72c:	78fb      	ldrb	r3, [r7, #3]
 800f72e:	461a      	mov	r2, r3
 800f730:	210b      	movs	r1, #11
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f000 f804 	bl	800f740 <icmp_send_response>
}
 800f738:	bf00      	nop
 800f73a:	3708      	adds	r7, #8
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}

0800f740 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b08c      	sub	sp, #48	; 0x30
 800f744:	af04      	add	r7, sp, #16
 800f746:	6078      	str	r0, [r7, #4]
 800f748:	460b      	mov	r3, r1
 800f74a:	70fb      	strb	r3, [r7, #3]
 800f74c:	4613      	mov	r3, r2
 800f74e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f750:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f754:	2124      	movs	r1, #36	; 0x24
 800f756:	2022      	movs	r0, #34	; 0x22
 800f758:	f7f8 fcfe 	bl	8008158 <pbuf_alloc>
 800f75c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f75e:	69fb      	ldr	r3, [r7, #28]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d056      	beq.n	800f812 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f764:	69fb      	ldr	r3, [r7, #28]
 800f766:	895b      	ldrh	r3, [r3, #10]
 800f768:	2b23      	cmp	r3, #35	; 0x23
 800f76a:	d806      	bhi.n	800f77a <icmp_send_response+0x3a>
 800f76c:	4b2b      	ldr	r3, [pc, #172]	; (800f81c <icmp_send_response+0xdc>)
 800f76e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f772:	492b      	ldr	r1, [pc, #172]	; (800f820 <icmp_send_response+0xe0>)
 800f774:	482b      	ldr	r0, [pc, #172]	; (800f824 <icmp_send_response+0xe4>)
 800f776:	f001 faa3 	bl	8010cc0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f780:	69fb      	ldr	r3, [r7, #28]
 800f782:	685b      	ldr	r3, [r3, #4]
 800f784:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800f786:	697b      	ldr	r3, [r7, #20]
 800f788:	78fa      	ldrb	r2, [r7, #3]
 800f78a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	78ba      	ldrb	r2, [r7, #2]
 800f790:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	2200      	movs	r2, #0
 800f796:	711a      	strb	r2, [r3, #4]
 800f798:	2200      	movs	r2, #0
 800f79a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	719a      	strb	r2, [r3, #6]
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f7a6:	69fb      	ldr	r3, [r7, #28]
 800f7a8:	685b      	ldr	r3, [r3, #4]
 800f7aa:	f103 0008 	add.w	r0, r3, #8
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	685b      	ldr	r3, [r3, #4]
 800f7b2:	221c      	movs	r2, #28
 800f7b4:	4619      	mov	r1, r3
 800f7b6:	f001 fa6d 	bl	8010c94 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f7ba:	69bb      	ldr	r3, [r7, #24]
 800f7bc:	68db      	ldr	r3, [r3, #12]
 800f7be:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f7c0:	f107 030c 	add.w	r3, r7, #12
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f000 f82f 	bl	800f828 <ip4_route>
 800f7ca:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f7cc:	693b      	ldr	r3, [r7, #16]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d01b      	beq.n	800f80a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	709a      	strb	r2, [r3, #2]
 800f7d8:	2200      	movs	r2, #0
 800f7da:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800f7dc:	69fb      	ldr	r3, [r7, #28]
 800f7de:	895b      	ldrh	r3, [r3, #10]
 800f7e0:	4619      	mov	r1, r3
 800f7e2:	6978      	ldr	r0, [r7, #20]
 800f7e4:	f7f7 fc31 	bl	800704a <inet_chksum>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	461a      	mov	r2, r3
 800f7ec:	697b      	ldr	r3, [r7, #20]
 800f7ee:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f7f0:	f107 020c 	add.w	r2, r7, #12
 800f7f4:	693b      	ldr	r3, [r7, #16]
 800f7f6:	9302      	str	r3, [sp, #8]
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	9301      	str	r3, [sp, #4]
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	9300      	str	r3, [sp, #0]
 800f800:	23ff      	movs	r3, #255	; 0xff
 800f802:	2100      	movs	r1, #0
 800f804:	69f8      	ldr	r0, [r7, #28]
 800f806:	f000 f9d3 	bl	800fbb0 <ip4_output_if>
  }
  pbuf_free(q);
 800f80a:	69f8      	ldr	r0, [r7, #28]
 800f80c:	f7f8 ff88 	bl	8008720 <pbuf_free>
 800f810:	e000      	b.n	800f814 <icmp_send_response+0xd4>
    return;
 800f812:	bf00      	nop
}
 800f814:	3720      	adds	r7, #32
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}
 800f81a:	bf00      	nop
 800f81c:	080143fc 	.word	0x080143fc
 800f820:	080144c8 	.word	0x080144c8
 800f824:	0801446c 	.word	0x0801446c

0800f828 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f828:	b480      	push	{r7}
 800f82a:	b085      	sub	sp, #20
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f830:	4b33      	ldr	r3, [pc, #204]	; (800f900 <ip4_route+0xd8>)
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	60fb      	str	r3, [r7, #12]
 800f836:	e036      	b.n	800f8a6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f83e:	f003 0301 	and.w	r3, r3, #1
 800f842:	b2db      	uxtb	r3, r3
 800f844:	2b00      	cmp	r3, #0
 800f846:	d02b      	beq.n	800f8a0 <ip4_route+0x78>
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f84e:	089b      	lsrs	r3, r3, #2
 800f850:	f003 0301 	and.w	r3, r3, #1
 800f854:	b2db      	uxtb	r3, r3
 800f856:	2b00      	cmp	r3, #0
 800f858:	d022      	beq.n	800f8a0 <ip4_route+0x78>
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	3304      	adds	r3, #4
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d01d      	beq.n	800f8a0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681a      	ldr	r2, [r3, #0]
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	3304      	adds	r3, #4
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	405a      	eors	r2, r3
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	3308      	adds	r3, #8
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	4013      	ands	r3, r2
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d101      	bne.n	800f880 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	e038      	b.n	800f8f2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f886:	f003 0302 	and.w	r3, r3, #2
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d108      	bne.n	800f8a0 <ip4_route+0x78>
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681a      	ldr	r2, [r3, #0]
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	330c      	adds	r3, #12
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	429a      	cmp	r2, r3
 800f89a:	d101      	bne.n	800f8a0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	e028      	b.n	800f8f2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	60fb      	str	r3, [r7, #12]
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d1c5      	bne.n	800f838 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f8ac:	4b15      	ldr	r3, [pc, #84]	; (800f904 <ip4_route+0xdc>)
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d01a      	beq.n	800f8ea <ip4_route+0xc2>
 800f8b4:	4b13      	ldr	r3, [pc, #76]	; (800f904 <ip4_route+0xdc>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f8bc:	f003 0301 	and.w	r3, r3, #1
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d012      	beq.n	800f8ea <ip4_route+0xc2>
 800f8c4:	4b0f      	ldr	r3, [pc, #60]	; (800f904 <ip4_route+0xdc>)
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f8cc:	f003 0304 	and.w	r3, r3, #4
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d00a      	beq.n	800f8ea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f8d4:	4b0b      	ldr	r3, [pc, #44]	; (800f904 <ip4_route+0xdc>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	3304      	adds	r3, #4
 800f8da:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d004      	beq.n	800f8ea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	b2db      	uxtb	r3, r3
 800f8e6:	2b7f      	cmp	r3, #127	; 0x7f
 800f8e8:	d101      	bne.n	800f8ee <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	e001      	b.n	800f8f2 <ip4_route+0xca>
  }

  return netif_default;
 800f8ee:	4b05      	ldr	r3, [pc, #20]	; (800f904 <ip4_route+0xdc>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
}
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	3714      	adds	r7, #20
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fc:	4770      	bx	lr
 800f8fe:	bf00      	nop
 800f900:	20007f40 	.word	0x20007f40
 800f904:	20007f44 	.word	0x20007f44

0800f908 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b082      	sub	sp, #8
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f916:	f003 0301 	and.w	r3, r3, #1
 800f91a:	b2db      	uxtb	r3, r3
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d016      	beq.n	800f94e <ip4_input_accept+0x46>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	3304      	adds	r3, #4
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d011      	beq.n	800f94e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f92a:	4b0b      	ldr	r3, [pc, #44]	; (800f958 <ip4_input_accept+0x50>)
 800f92c:	695a      	ldr	r2, [r3, #20]
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	3304      	adds	r3, #4
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	429a      	cmp	r2, r3
 800f936:	d008      	beq.n	800f94a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f938:	4b07      	ldr	r3, [pc, #28]	; (800f958 <ip4_input_accept+0x50>)
 800f93a:	695b      	ldr	r3, [r3, #20]
 800f93c:	6879      	ldr	r1, [r7, #4]
 800f93e:	4618      	mov	r0, r3
 800f940:	f000 fa1f 	bl	800fd82 <ip4_addr_isbroadcast_u32>
 800f944:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f946:	2b00      	cmp	r3, #0
 800f948:	d001      	beq.n	800f94e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f94a:	2301      	movs	r3, #1
 800f94c:	e000      	b.n	800f950 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f94e:	2300      	movs	r3, #0
}
 800f950:	4618      	mov	r0, r3
 800f952:	3708      	adds	r7, #8
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}
 800f958:	20005030 	.word	0x20005030

0800f95c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b086      	sub	sp, #24
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
 800f964:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	685b      	ldr	r3, [r3, #4]
 800f96a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800f96c:	697b      	ldr	r3, [r7, #20]
 800f96e:	781b      	ldrb	r3, [r3, #0]
 800f970:	091b      	lsrs	r3, r3, #4
 800f972:	b2db      	uxtb	r3, r3
 800f974:	2b04      	cmp	r3, #4
 800f976:	d007      	beq.n	800f988 <ip4_input+0x2c>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	f000 f9f5 	bl	800fd68 <ip4_debug_print>
    pbuf_free(p);
 800f97e:	6878      	ldr	r0, [r7, #4]
 800f980:	f7f8 fece 	bl	8008720 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f984:	2300      	movs	r3, #0
 800f986:	e10a      	b.n	800fb9e <ip4_input+0x242>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f988:	697b      	ldr	r3, [r7, #20]
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	f003 030f 	and.w	r3, r3, #15
 800f990:	b2db      	uxtb	r3, r3
 800f992:	009b      	lsls	r3, r3, #2
 800f994:	b2db      	uxtb	r3, r3
 800f996:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	885b      	ldrh	r3, [r3, #2]
 800f99c:	b29b      	uxth	r3, r3
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7f7 fac8 	bl	8006f34 <lwip_htons>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	891b      	ldrh	r3, [r3, #8]
 800f9ac:	89ba      	ldrh	r2, [r7, #12]
 800f9ae:	429a      	cmp	r2, r3
 800f9b0:	d204      	bcs.n	800f9bc <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 800f9b2:	89bb      	ldrh	r3, [r7, #12]
 800f9b4:	4619      	mov	r1, r3
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f7f8 fd2c 	bl	8008414 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	895b      	ldrh	r3, [r3, #10]
 800f9c0:	89fa      	ldrh	r2, [r7, #14]
 800f9c2:	429a      	cmp	r2, r3
 800f9c4:	d807      	bhi.n	800f9d6 <ip4_input+0x7a>
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	891b      	ldrh	r3, [r3, #8]
 800f9ca:	89ba      	ldrh	r2, [r7, #12]
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d802      	bhi.n	800f9d6 <ip4_input+0x7a>
 800f9d0:	89fb      	ldrh	r3, [r7, #14]
 800f9d2:	2b13      	cmp	r3, #19
 800f9d4:	d804      	bhi.n	800f9e0 <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f7f8 fea2 	bl	8008720 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f9dc:	2300      	movs	r3, #0
 800f9de:	e0de      	b.n	800fb9e <ip4_input+0x242>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f9e0:	697b      	ldr	r3, [r7, #20]
 800f9e2:	691b      	ldr	r3, [r3, #16]
 800f9e4:	4a70      	ldr	r2, [pc, #448]	; (800fba8 <ip4_input+0x24c>)
 800f9e6:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f9e8:	697b      	ldr	r3, [r7, #20]
 800f9ea:	68db      	ldr	r3, [r3, #12]
 800f9ec:	4a6e      	ldr	r2, [pc, #440]	; (800fba8 <ip4_input+0x24c>)
 800f9ee:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f9f0:	4b6d      	ldr	r3, [pc, #436]	; (800fba8 <ip4_input+0x24c>)
 800f9f2:	695b      	ldr	r3, [r3, #20]
 800f9f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f9f8:	2be0      	cmp	r3, #224	; 0xe0
 800f9fa:	d112      	bne.n	800fa22 <ip4_input+0xc6>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa02:	f003 0301 	and.w	r3, r3, #1
 800fa06:	b2db      	uxtb	r3, r3
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d007      	beq.n	800fa1c <ip4_input+0xc0>
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	3304      	adds	r3, #4
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d002      	beq.n	800fa1c <ip4_input+0xc0>
      netif = inp;
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	613b      	str	r3, [r7, #16]
 800fa1a:	e02a      	b.n	800fa72 <ip4_input+0x116>
    } else {
      netif = NULL;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	613b      	str	r3, [r7, #16]
 800fa20:	e027      	b.n	800fa72 <ip4_input+0x116>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800fa22:	6838      	ldr	r0, [r7, #0]
 800fa24:	f7ff ff70 	bl	800f908 <ip4_input_accept>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d002      	beq.n	800fa34 <ip4_input+0xd8>
      netif = inp;
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	613b      	str	r3, [r7, #16]
 800fa32:	e01e      	b.n	800fa72 <ip4_input+0x116>
    } else {
      netif = NULL;
 800fa34:	2300      	movs	r3, #0
 800fa36:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800fa38:	4b5b      	ldr	r3, [pc, #364]	; (800fba8 <ip4_input+0x24c>)
 800fa3a:	695b      	ldr	r3, [r3, #20]
 800fa3c:	b2db      	uxtb	r3, r3
 800fa3e:	2b7f      	cmp	r3, #127	; 0x7f
 800fa40:	d017      	beq.n	800fa72 <ip4_input+0x116>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800fa42:	4b5a      	ldr	r3, [pc, #360]	; (800fbac <ip4_input+0x250>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	613b      	str	r3, [r7, #16]
 800fa48:	e00e      	b.n	800fa68 <ip4_input+0x10c>
          if (netif == inp) {
 800fa4a:	693a      	ldr	r2, [r7, #16]
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	429a      	cmp	r2, r3
 800fa50:	d006      	beq.n	800fa60 <ip4_input+0x104>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800fa52:	6938      	ldr	r0, [r7, #16]
 800fa54:	f7ff ff58 	bl	800f908 <ip4_input_accept>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d108      	bne.n	800fa70 <ip4_input+0x114>
 800fa5e:	e000      	b.n	800fa62 <ip4_input+0x106>
            continue;
 800fa60:	bf00      	nop
        NETIF_FOREACH(netif) {
 800fa62:	693b      	ldr	r3, [r7, #16]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	613b      	str	r3, [r7, #16]
 800fa68:	693b      	ldr	r3, [r7, #16]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d1ed      	bne.n	800fa4a <ip4_input+0xee>
 800fa6e:	e000      	b.n	800fa72 <ip4_input+0x116>
            break;
 800fa70:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fa72:	4b4d      	ldr	r3, [pc, #308]	; (800fba8 <ip4_input+0x24c>)
 800fa74:	691b      	ldr	r3, [r3, #16]
 800fa76:	6839      	ldr	r1, [r7, #0]
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f000 f982 	bl	800fd82 <ip4_addr_isbroadcast_u32>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d105      	bne.n	800fa90 <ip4_input+0x134>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800fa84:	4b48      	ldr	r3, [pc, #288]	; (800fba8 <ip4_input+0x24c>)
 800fa86:	691b      	ldr	r3, [r3, #16]
 800fa88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fa8c:	2be0      	cmp	r3, #224	; 0xe0
 800fa8e:	d104      	bne.n	800fa9a <ip4_input+0x13e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f7f8 fe45 	bl	8008720 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800fa96:	2300      	movs	r3, #0
 800fa98:	e081      	b.n	800fb9e <ip4_input+0x242>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800fa9a:	693b      	ldr	r3, [r7, #16]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d104      	bne.n	800faaa <ip4_input+0x14e>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f7f8 fe3d 	bl	8008720 <pbuf_free>
    return ERR_OK;
 800faa6:	2300      	movs	r3, #0
 800faa8:	e079      	b.n	800fb9e <ip4_input+0x242>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800faaa:	697b      	ldr	r3, [r7, #20]
 800faac:	88db      	ldrh	r3, [r3, #6]
 800faae:	b29b      	uxth	r3, r3
 800fab0:	461a      	mov	r2, r3
 800fab2:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800fab6:	4013      	ands	r3, r2
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d00b      	beq.n	800fad4 <ip4_input+0x178>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f000 fca5 	bl	801040c <ip4_reass>
 800fac2:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d101      	bne.n	800face <ip4_input+0x172>
      return ERR_OK;
 800faca:	2300      	movs	r3, #0
 800facc:	e067      	b.n	800fb9e <ip4_input+0x242>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	685b      	ldr	r3, [r3, #4]
 800fad2:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_OPTIONS_ALLOWED == 0 */

  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f000 f947 	bl	800fd68 <ip4_debug_print>
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800fada:	4a33      	ldr	r2, [pc, #204]	; (800fba8 <ip4_input+0x24c>)
 800fadc:	693b      	ldr	r3, [r7, #16]
 800fade:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800fae0:	4a31      	ldr	r2, [pc, #196]	; (800fba8 <ip4_input+0x24c>)
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800fae6:	4a30      	ldr	r2, [pc, #192]	; (800fba8 <ip4_input+0x24c>)
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	781b      	ldrb	r3, [r3, #0]
 800faf0:	f003 030f 	and.w	r3, r3, #15
 800faf4:	b2db      	uxtb	r3, r3
 800faf6:	009b      	lsls	r3, r3, #2
 800faf8:	b2db      	uxtb	r3, r3
 800fafa:	b29a      	uxth	r2, r3
 800fafc:	4b2a      	ldr	r3, [pc, #168]	; (800fba8 <ip4_input+0x24c>)
 800fafe:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800fb00:	89fb      	ldrh	r3, [r7, #14]
 800fb02:	4619      	mov	r1, r3
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f7f8 fd85 	bl	8008614 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800fb0a:	697b      	ldr	r3, [r7, #20]
 800fb0c:	7a5b      	ldrb	r3, [r3, #9]
 800fb0e:	2b11      	cmp	r3, #17
 800fb10:	d006      	beq.n	800fb20 <ip4_input+0x1c4>
 800fb12:	2b11      	cmp	r3, #17
 800fb14:	dc13      	bgt.n	800fb3e <ip4_input+0x1e2>
 800fb16:	2b01      	cmp	r3, #1
 800fb18:	d00c      	beq.n	800fb34 <ip4_input+0x1d8>
 800fb1a:	2b06      	cmp	r3, #6
 800fb1c:	d005      	beq.n	800fb2a <ip4_input+0x1ce>
 800fb1e:	e00e      	b.n	800fb3e <ip4_input+0x1e2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800fb20:	6839      	ldr	r1, [r7, #0]
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f7fe fc30 	bl	800e388 <udp_input>
        break;
 800fb28:	e026      	b.n	800fb78 <ip4_input+0x21c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800fb2a:	6839      	ldr	r1, [r7, #0]
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f7fa fcb7 	bl	800a4a0 <tcp_input>
        break;
 800fb32:	e021      	b.n	800fb78 <ip4_input+0x21c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800fb34:	6839      	ldr	r1, [r7, #0]
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f7ff fcc4 	bl	800f4c4 <icmp_input>
        break;
 800fb3c:	e01c      	b.n	800fb78 <ip4_input+0x21c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fb3e:	4b1a      	ldr	r3, [pc, #104]	; (800fba8 <ip4_input+0x24c>)
 800fb40:	695b      	ldr	r3, [r3, #20]
 800fb42:	6939      	ldr	r1, [r7, #16]
 800fb44:	4618      	mov	r0, r3
 800fb46:	f000 f91c 	bl	800fd82 <ip4_addr_isbroadcast_u32>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d10f      	bne.n	800fb70 <ip4_input+0x214>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fb50:	4b15      	ldr	r3, [pc, #84]	; (800fba8 <ip4_input+0x24c>)
 800fb52:	695b      	ldr	r3, [r3, #20]
 800fb54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fb58:	2be0      	cmp	r3, #224	; 0xe0
 800fb5a:	d009      	beq.n	800fb70 <ip4_input+0x214>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800fb5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fb60:	4619      	mov	r1, r3
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f7f8 fdc9 	bl	80086fa <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800fb68:	2102      	movs	r1, #2
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	f7ff fdc8 	bl	800f700 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f7f8 fdd5 	bl	8008720 <pbuf_free>
        break;
 800fb76:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800fb78:	4b0b      	ldr	r3, [pc, #44]	; (800fba8 <ip4_input+0x24c>)
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800fb7e:	4b0a      	ldr	r3, [pc, #40]	; (800fba8 <ip4_input+0x24c>)
 800fb80:	2200      	movs	r2, #0
 800fb82:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800fb84:	4b08      	ldr	r3, [pc, #32]	; (800fba8 <ip4_input+0x24c>)
 800fb86:	2200      	movs	r2, #0
 800fb88:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800fb8a:	4b07      	ldr	r3, [pc, #28]	; (800fba8 <ip4_input+0x24c>)
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800fb90:	4b05      	ldr	r3, [pc, #20]	; (800fba8 <ip4_input+0x24c>)
 800fb92:	2200      	movs	r2, #0
 800fb94:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800fb96:	4b04      	ldr	r3, [pc, #16]	; (800fba8 <ip4_input+0x24c>)
 800fb98:	2200      	movs	r2, #0
 800fb9a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800fb9c:	2300      	movs	r3, #0
}
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3718      	adds	r7, #24
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}
 800fba6:	bf00      	nop
 800fba8:	20005030 	.word	0x20005030
 800fbac:	20007f40 	.word	0x20007f40

0800fbb0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b08a      	sub	sp, #40	; 0x28
 800fbb4:	af04      	add	r7, sp, #16
 800fbb6:	60f8      	str	r0, [r7, #12]
 800fbb8:	60b9      	str	r1, [r7, #8]
 800fbba:	607a      	str	r2, [r7, #4]
 800fbbc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800fbbe:	68bb      	ldr	r3, [r7, #8]
 800fbc0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d009      	beq.n	800fbdc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800fbc8:	68bb      	ldr	r3, [r7, #8]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d003      	beq.n	800fbd6 <ip4_output_if+0x26>
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d102      	bne.n	800fbdc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800fbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd8:	3304      	adds	r3, #4
 800fbda:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800fbdc:	78fa      	ldrb	r2, [r7, #3]
 800fbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbe0:	9302      	str	r3, [sp, #8]
 800fbe2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fbe6:	9301      	str	r3, [sp, #4]
 800fbe8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fbec:	9300      	str	r3, [sp, #0]
 800fbee:	4613      	mov	r3, r2
 800fbf0:	687a      	ldr	r2, [r7, #4]
 800fbf2:	6979      	ldr	r1, [r7, #20]
 800fbf4:	68f8      	ldr	r0, [r7, #12]
 800fbf6:	f000 f805 	bl	800fc04 <ip4_output_if_src>
 800fbfa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	3718      	adds	r7, #24
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}

0800fc04 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b088      	sub	sp, #32
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	60f8      	str	r0, [r7, #12]
 800fc0c:	60b9      	str	r1, [r7, #8]
 800fc0e:	607a      	str	r2, [r7, #4]
 800fc10:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	7b9b      	ldrb	r3, [r3, #14]
 800fc16:	2b01      	cmp	r3, #1
 800fc18:	d006      	beq.n	800fc28 <ip4_output_if_src+0x24>
 800fc1a:	4b4d      	ldr	r3, [pc, #308]	; (800fd50 <ip4_output_if_src+0x14c>)
 800fc1c:	f44f 7255 	mov.w	r2, #852	; 0x354
 800fc20:	494c      	ldr	r1, [pc, #304]	; (800fd54 <ip4_output_if_src+0x150>)
 800fc22:	484d      	ldr	r0, [pc, #308]	; (800fd58 <ip4_output_if_src+0x154>)
 800fc24:	f001 f84c 	bl	8010cc0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d060      	beq.n	800fcf0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800fc2e:	2314      	movs	r3, #20
 800fc30:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800fc32:	2114      	movs	r1, #20
 800fc34:	68f8      	ldr	r0, [r7, #12]
 800fc36:	f7f8 fcdd 	bl	80085f4 <pbuf_add_header>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d002      	beq.n	800fc46 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800fc40:	f06f 0301 	mvn.w	r3, #1
 800fc44:	e07f      	b.n	800fd46 <ip4_output_if_src+0x142>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	685b      	ldr	r3, [r3, #4]
 800fc4a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	895b      	ldrh	r3, [r3, #10]
 800fc50:	2b13      	cmp	r3, #19
 800fc52:	d806      	bhi.n	800fc62 <ip4_output_if_src+0x5e>
 800fc54:	4b3e      	ldr	r3, [pc, #248]	; (800fd50 <ip4_output_if_src+0x14c>)
 800fc56:	f44f 7262 	mov.w	r2, #904	; 0x388
 800fc5a:	4940      	ldr	r1, [pc, #256]	; (800fd5c <ip4_output_if_src+0x158>)
 800fc5c:	483e      	ldr	r0, [pc, #248]	; (800fd58 <ip4_output_if_src+0x154>)
 800fc5e:	f001 f82f 	bl	8010cc0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800fc62:	69fb      	ldr	r3, [r7, #28]
 800fc64:	78fa      	ldrb	r2, [r7, #3]
 800fc66:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800fc68:	69fb      	ldr	r3, [r7, #28]
 800fc6a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800fc6e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681a      	ldr	r2, [r3, #0]
 800fc74:	69fb      	ldr	r3, [r7, #28]
 800fc76:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800fc78:	8b7b      	ldrh	r3, [r7, #26]
 800fc7a:	089b      	lsrs	r3, r3, #2
 800fc7c:	b29b      	uxth	r3, r3
 800fc7e:	b2db      	uxtb	r3, r3
 800fc80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc84:	b2da      	uxtb	r2, r3
 800fc86:	69fb      	ldr	r3, [r7, #28]
 800fc88:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800fc8a:	69fb      	ldr	r3, [r7, #28]
 800fc8c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fc90:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	891b      	ldrh	r3, [r3, #8]
 800fc96:	4618      	mov	r0, r3
 800fc98:	f7f7 f94c 	bl	8006f34 <lwip_htons>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	461a      	mov	r2, r3
 800fca0:	69fb      	ldr	r3, [r7, #28]
 800fca2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800fca4:	69fb      	ldr	r3, [r7, #28]
 800fca6:	2200      	movs	r2, #0
 800fca8:	719a      	strb	r2, [r3, #6]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800fcae:	4b2c      	ldr	r3, [pc, #176]	; (800fd60 <ip4_output_if_src+0x15c>)
 800fcb0:	881b      	ldrh	r3, [r3, #0]
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7f7 f93e 	bl	8006f34 <lwip_htons>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	461a      	mov	r2, r3
 800fcbc:	69fb      	ldr	r3, [r7, #28]
 800fcbe:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800fcc0:	4b27      	ldr	r3, [pc, #156]	; (800fd60 <ip4_output_if_src+0x15c>)
 800fcc2:	881b      	ldrh	r3, [r3, #0]
 800fcc4:	3301      	adds	r3, #1
 800fcc6:	b29a      	uxth	r2, r3
 800fcc8:	4b25      	ldr	r3, [pc, #148]	; (800fd60 <ip4_output_if_src+0x15c>)
 800fcca:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800fccc:	68bb      	ldr	r3, [r7, #8]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d104      	bne.n	800fcdc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800fcd2:	4b24      	ldr	r3, [pc, #144]	; (800fd64 <ip4_output_if_src+0x160>)
 800fcd4:	681a      	ldr	r2, [r3, #0]
 800fcd6:	69fb      	ldr	r3, [r7, #28]
 800fcd8:	60da      	str	r2, [r3, #12]
 800fcda:	e003      	b.n	800fce4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800fcdc:	68bb      	ldr	r3, [r7, #8]
 800fcde:	681a      	ldr	r2, [r3, #0]
 800fce0:	69fb      	ldr	r3, [r7, #28]
 800fce2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800fce4:	69fb      	ldr	r3, [r7, #28]
 800fce6:	2200      	movs	r2, #0
 800fce8:	729a      	strb	r2, [r3, #10]
 800fcea:	2200      	movs	r2, #0
 800fcec:	72da      	strb	r2, [r3, #11]
 800fcee:	e00f      	b.n	800fd10 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	895b      	ldrh	r3, [r3, #10]
 800fcf4:	2b13      	cmp	r3, #19
 800fcf6:	d802      	bhi.n	800fcfe <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800fcf8:	f06f 0301 	mvn.w	r3, #1
 800fcfc:	e023      	b.n	800fd46 <ip4_output_if_src+0x142>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	685b      	ldr	r3, [r3, #4]
 800fd02:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800fd04:	69fb      	ldr	r3, [r7, #28]
 800fd06:	691b      	ldr	r3, [r3, #16]
 800fd08:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800fd0a:	f107 0314 	add.w	r3, r7, #20
 800fd0e:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);
 800fd10:	68f8      	ldr	r0, [r7, #12]
 800fd12:	f000 f829 	bl	800fd68 <ip4_debug_print>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800fd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd18:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d00c      	beq.n	800fd38 <ip4_output_if_src+0x134>
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	891a      	ldrh	r2, [r3, #8]
 800fd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd24:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fd26:	429a      	cmp	r2, r3
 800fd28:	d906      	bls.n	800fd38 <ip4_output_if_src+0x134>
    return ip4_frag(p, netif, dest);
 800fd2a:	687a      	ldr	r2, [r7, #4]
 800fd2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fd2e:	68f8      	ldr	r0, [r7, #12]
 800fd30:	f000 fd60 	bl	80107f4 <ip4_frag>
 800fd34:	4603      	mov	r3, r0
 800fd36:	e006      	b.n	800fd46 <ip4_output_if_src+0x142>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800fd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd3a:	695b      	ldr	r3, [r3, #20]
 800fd3c:	687a      	ldr	r2, [r7, #4]
 800fd3e:	68f9      	ldr	r1, [r7, #12]
 800fd40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd42:	4798      	blx	r3
 800fd44:	4603      	mov	r3, r0
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3720      	adds	r7, #32
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}
 800fd4e:	bf00      	nop
 800fd50:	080144f4 	.word	0x080144f4
 800fd54:	08014528 	.word	0x08014528
 800fd58:	08014534 	.word	0x08014534
 800fd5c:	0801455c 	.word	0x0801455c
 800fd60:	2000809e 	.word	0x2000809e
 800fd64:	0801493c 	.word	0x0801493c

0800fd68 <ip4_debug_print>:
/* Print an IP header by using LWIP_DEBUGF
 * @param p an IP packet, p->payload pointing to the IP header
 */
void
ip4_debug_print(struct pbuf *p)
{
 800fd68:	b480      	push	{r7}
 800fd6a:	b085      	sub	sp, #20
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
  struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	685b      	ldr	r3, [r3, #4]
 800fd74:	60fb      	str	r3, [r7, #12]
                         ip4_addr1_16_val(iphdr->dest),
                         ip4_addr2_16_val(iphdr->dest),
                         ip4_addr3_16_val(iphdr->dest),
                         ip4_addr4_16_val(iphdr->dest)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
}
 800fd76:	bf00      	nop
 800fd78:	3714      	adds	r7, #20
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd80:	4770      	bx	lr

0800fd82 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800fd82:	b480      	push	{r7}
 800fd84:	b085      	sub	sp, #20
 800fd86:	af00      	add	r7, sp, #0
 800fd88:	6078      	str	r0, [r7, #4]
 800fd8a:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd96:	d002      	beq.n	800fd9e <ip4_addr_isbroadcast_u32+0x1c>
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d101      	bne.n	800fda2 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800fd9e:	2301      	movs	r3, #1
 800fda0:	e02a      	b.n	800fdf8 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fda8:	f003 0302 	and.w	r3, r3, #2
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d101      	bne.n	800fdb4 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	e021      	b.n	800fdf8 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	3304      	adds	r3, #4
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	687a      	ldr	r2, [r7, #4]
 800fdbc:	429a      	cmp	r2, r3
 800fdbe:	d101      	bne.n	800fdc4 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	e019      	b.n	800fdf8 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800fdc4:	68fa      	ldr	r2, [r7, #12]
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	3304      	adds	r3, #4
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	405a      	eors	r2, r3
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	3308      	adds	r3, #8
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	4013      	ands	r3, r2
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d10d      	bne.n	800fdf6 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	3308      	adds	r3, #8
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	43da      	mvns	r2, r3
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	3308      	adds	r3, #8
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fdee:	429a      	cmp	r2, r3
 800fdf0:	d101      	bne.n	800fdf6 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	e000      	b.n	800fdf8 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800fdf6:	2300      	movs	r3, #0
  }
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	3714      	adds	r7, #20
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe02:	4770      	bx	lr

0800fe04 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b084      	sub	sp, #16
 800fe08:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800fe0e:	4b12      	ldr	r3, [pc, #72]	; (800fe58 <ip_reass_tmr+0x54>)
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800fe14:	e018      	b.n	800fe48 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	7fdb      	ldrb	r3, [r3, #31]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d00b      	beq.n	800fe36 <ip_reass_tmr+0x32>
      r->timer--;
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	7fdb      	ldrb	r3, [r3, #31]
 800fe22:	3b01      	subs	r3, #1
 800fe24:	b2da      	uxtb	r2, r3
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	60fb      	str	r3, [r7, #12]
 800fe34:	e008      	b.n	800fe48 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800fe40:	68b9      	ldr	r1, [r7, #8]
 800fe42:	6878      	ldr	r0, [r7, #4]
 800fe44:	f000 f80a 	bl	800fe5c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d1e3      	bne.n	800fe16 <ip_reass_tmr+0x12>
    }
  }
}
 800fe4e:	bf00      	nop
 800fe50:	bf00      	nop
 800fe52:	3710      	adds	r7, #16
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}
 800fe58:	200080a0 	.word	0x200080a0

0800fe5c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b088      	sub	sp, #32
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
 800fe64:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800fe66:	2300      	movs	r3, #0
 800fe68:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800fe6a:	683a      	ldr	r2, [r7, #0]
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	429a      	cmp	r2, r3
 800fe70:	d105      	bne.n	800fe7e <ip_reass_free_complete_datagram+0x22>
 800fe72:	4b45      	ldr	r3, [pc, #276]	; (800ff88 <ip_reass_free_complete_datagram+0x12c>)
 800fe74:	22ab      	movs	r2, #171	; 0xab
 800fe76:	4945      	ldr	r1, [pc, #276]	; (800ff8c <ip_reass_free_complete_datagram+0x130>)
 800fe78:	4845      	ldr	r0, [pc, #276]	; (800ff90 <ip_reass_free_complete_datagram+0x134>)
 800fe7a:	f000 ff21 	bl	8010cc0 <iprintf>
  if (prev != NULL) {
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d00a      	beq.n	800fe9a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	687a      	ldr	r2, [r7, #4]
 800fe8a:	429a      	cmp	r2, r3
 800fe8c:	d005      	beq.n	800fe9a <ip_reass_free_complete_datagram+0x3e>
 800fe8e:	4b3e      	ldr	r3, [pc, #248]	; (800ff88 <ip_reass_free_complete_datagram+0x12c>)
 800fe90:	22ad      	movs	r2, #173	; 0xad
 800fe92:	4940      	ldr	r1, [pc, #256]	; (800ff94 <ip_reass_free_complete_datagram+0x138>)
 800fe94:	483e      	ldr	r0, [pc, #248]	; (800ff90 <ip_reass_free_complete_datagram+0x134>)
 800fe96:	f000 ff13 	bl	8010cc0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	685b      	ldr	r3, [r3, #4]
 800fe9e:	685b      	ldr	r3, [r3, #4]
 800fea0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800fea2:	697b      	ldr	r3, [r7, #20]
 800fea4:	889b      	ldrh	r3, [r3, #4]
 800fea6:	b29b      	uxth	r3, r3
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d12a      	bne.n	800ff02 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800feb2:	697b      	ldr	r3, [r7, #20]
 800feb4:	681a      	ldr	r2, [r3, #0]
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800feba:	69bb      	ldr	r3, [r7, #24]
 800febc:	6858      	ldr	r0, [r3, #4]
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	3308      	adds	r3, #8
 800fec2:	2214      	movs	r2, #20
 800fec4:	4619      	mov	r1, r3
 800fec6:	f000 fee5 	bl	8010c94 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800feca:	2101      	movs	r1, #1
 800fecc:	69b8      	ldr	r0, [r7, #24]
 800fece:	f7ff fc27 	bl	800f720 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800fed2:	69b8      	ldr	r0, [r7, #24]
 800fed4:	f7f8 fcac 	bl	8008830 <pbuf_clen>
 800fed8:	4603      	mov	r3, r0
 800feda:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fedc:	8bfa      	ldrh	r2, [r7, #30]
 800fede:	8a7b      	ldrh	r3, [r7, #18]
 800fee0:	4413      	add	r3, r2
 800fee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fee6:	db05      	blt.n	800fef4 <ip_reass_free_complete_datagram+0x98>
 800fee8:	4b27      	ldr	r3, [pc, #156]	; (800ff88 <ip_reass_free_complete_datagram+0x12c>)
 800feea:	22bc      	movs	r2, #188	; 0xbc
 800feec:	492a      	ldr	r1, [pc, #168]	; (800ff98 <ip_reass_free_complete_datagram+0x13c>)
 800feee:	4828      	ldr	r0, [pc, #160]	; (800ff90 <ip_reass_free_complete_datagram+0x134>)
 800fef0:	f000 fee6 	bl	8010cc0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800fef4:	8bfa      	ldrh	r2, [r7, #30]
 800fef6:	8a7b      	ldrh	r3, [r7, #18]
 800fef8:	4413      	add	r3, r2
 800fefa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800fefc:	69b8      	ldr	r0, [r7, #24]
 800fefe:	f7f8 fc0f 	bl	8008720 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	685b      	ldr	r3, [r3, #4]
 800ff06:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800ff08:	e01f      	b.n	800ff4a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800ff0a:	69bb      	ldr	r3, [r7, #24]
 800ff0c:	685b      	ldr	r3, [r3, #4]
 800ff0e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800ff10:	69bb      	ldr	r3, [r7, #24]
 800ff12:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800ff1a:	68f8      	ldr	r0, [r7, #12]
 800ff1c:	f7f8 fc88 	bl	8008830 <pbuf_clen>
 800ff20:	4603      	mov	r3, r0
 800ff22:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ff24:	8bfa      	ldrh	r2, [r7, #30]
 800ff26:	8a7b      	ldrh	r3, [r7, #18]
 800ff28:	4413      	add	r3, r2
 800ff2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff2e:	db05      	blt.n	800ff3c <ip_reass_free_complete_datagram+0xe0>
 800ff30:	4b15      	ldr	r3, [pc, #84]	; (800ff88 <ip_reass_free_complete_datagram+0x12c>)
 800ff32:	22cc      	movs	r2, #204	; 0xcc
 800ff34:	4918      	ldr	r1, [pc, #96]	; (800ff98 <ip_reass_free_complete_datagram+0x13c>)
 800ff36:	4816      	ldr	r0, [pc, #88]	; (800ff90 <ip_reass_free_complete_datagram+0x134>)
 800ff38:	f000 fec2 	bl	8010cc0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ff3c:	8bfa      	ldrh	r2, [r7, #30]
 800ff3e:	8a7b      	ldrh	r3, [r7, #18]
 800ff40:	4413      	add	r3, r2
 800ff42:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ff44:	68f8      	ldr	r0, [r7, #12]
 800ff46:	f7f8 fbeb 	bl	8008720 <pbuf_free>
  while (p != NULL) {
 800ff4a:	69bb      	ldr	r3, [r7, #24]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d1dc      	bne.n	800ff0a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ff50:	6839      	ldr	r1, [r7, #0]
 800ff52:	6878      	ldr	r0, [r7, #4]
 800ff54:	f000 f8c2 	bl	80100dc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ff58:	4b10      	ldr	r3, [pc, #64]	; (800ff9c <ip_reass_free_complete_datagram+0x140>)
 800ff5a:	881b      	ldrh	r3, [r3, #0]
 800ff5c:	8bfa      	ldrh	r2, [r7, #30]
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	d905      	bls.n	800ff6e <ip_reass_free_complete_datagram+0x112>
 800ff62:	4b09      	ldr	r3, [pc, #36]	; (800ff88 <ip_reass_free_complete_datagram+0x12c>)
 800ff64:	22d2      	movs	r2, #210	; 0xd2
 800ff66:	490e      	ldr	r1, [pc, #56]	; (800ffa0 <ip_reass_free_complete_datagram+0x144>)
 800ff68:	4809      	ldr	r0, [pc, #36]	; (800ff90 <ip_reass_free_complete_datagram+0x134>)
 800ff6a:	f000 fea9 	bl	8010cc0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ff6e:	4b0b      	ldr	r3, [pc, #44]	; (800ff9c <ip_reass_free_complete_datagram+0x140>)
 800ff70:	881a      	ldrh	r2, [r3, #0]
 800ff72:	8bfb      	ldrh	r3, [r7, #30]
 800ff74:	1ad3      	subs	r3, r2, r3
 800ff76:	b29a      	uxth	r2, r3
 800ff78:	4b08      	ldr	r3, [pc, #32]	; (800ff9c <ip_reass_free_complete_datagram+0x140>)
 800ff7a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ff7c:	8bfb      	ldrh	r3, [r7, #30]
}
 800ff7e:	4618      	mov	r0, r3
 800ff80:	3720      	adds	r7, #32
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}
 800ff86:	bf00      	nop
 800ff88:	0801458c 	.word	0x0801458c
 800ff8c:	080145c8 	.word	0x080145c8
 800ff90:	080145d4 	.word	0x080145d4
 800ff94:	080145fc 	.word	0x080145fc
 800ff98:	08014610 	.word	0x08014610
 800ff9c:	200080a4 	.word	0x200080a4
 800ffa0:	08014630 	.word	0x08014630

0800ffa4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b08a      	sub	sp, #40	; 0x28
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ffba:	2300      	movs	r3, #0
 800ffbc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ffc2:	4b28      	ldr	r3, [pc, #160]	; (8010064 <ip_reass_remove_oldest_datagram+0xc0>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ffc8:	e030      	b.n	801002c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ffca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffcc:	695a      	ldr	r2, [r3, #20]
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	68db      	ldr	r3, [r3, #12]
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	d10c      	bne.n	800fff0 <ip_reass_remove_oldest_datagram+0x4c>
 800ffd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd8:	699a      	ldr	r2, [r3, #24]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	691b      	ldr	r3, [r3, #16]
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	d106      	bne.n	800fff0 <ip_reass_remove_oldest_datagram+0x4c>
 800ffe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe4:	899a      	ldrh	r2, [r3, #12]
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	889b      	ldrh	r3, [r3, #4]
 800ffea:	b29b      	uxth	r3, r3
 800ffec:	429a      	cmp	r2, r3
 800ffee:	d014      	beq.n	801001a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800fff0:	693b      	ldr	r3, [r7, #16]
 800fff2:	3301      	adds	r3, #1
 800fff4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800fff6:	6a3b      	ldr	r3, [r7, #32]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d104      	bne.n	8010006 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800fffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fffe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010000:	69fb      	ldr	r3, [r7, #28]
 8010002:	61bb      	str	r3, [r7, #24]
 8010004:	e009      	b.n	801001a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8010006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010008:	7fda      	ldrb	r2, [r3, #31]
 801000a:	6a3b      	ldr	r3, [r7, #32]
 801000c:	7fdb      	ldrb	r3, [r3, #31]
 801000e:	429a      	cmp	r2, r3
 8010010:	d803      	bhi.n	801001a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8010012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010014:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010016:	69fb      	ldr	r3, [r7, #28]
 8010018:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801001a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d001      	beq.n	8010026 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8010022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010024:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8010026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801002c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801002e:	2b00      	cmp	r3, #0
 8010030:	d1cb      	bne.n	800ffca <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8010032:	6a3b      	ldr	r3, [r7, #32]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d008      	beq.n	801004a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010038:	69b9      	ldr	r1, [r7, #24]
 801003a:	6a38      	ldr	r0, [r7, #32]
 801003c:	f7ff ff0e 	bl	800fe5c <ip_reass_free_complete_datagram>
 8010040:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010042:	697a      	ldr	r2, [r7, #20]
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	4413      	add	r3, r2
 8010048:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801004a:	697a      	ldr	r2, [r7, #20]
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	429a      	cmp	r2, r3
 8010050:	da02      	bge.n	8010058 <ip_reass_remove_oldest_datagram+0xb4>
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	2b01      	cmp	r3, #1
 8010056:	dcac      	bgt.n	800ffb2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8010058:	697b      	ldr	r3, [r7, #20]
}
 801005a:	4618      	mov	r0, r3
 801005c:	3728      	adds	r7, #40	; 0x28
 801005e:	46bd      	mov	sp, r7
 8010060:	bd80      	pop	{r7, pc}
 8010062:	bf00      	nop
 8010064:	200080a0 	.word	0x200080a0

08010068 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b084      	sub	sp, #16
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
 8010070:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010072:	2004      	movs	r0, #4
 8010074:	f7f7 fc8e 	bl	8007994 <memp_malloc>
 8010078:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d110      	bne.n	80100a2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010080:	6839      	ldr	r1, [r7, #0]
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f7ff ff8e 	bl	800ffa4 <ip_reass_remove_oldest_datagram>
 8010088:	4602      	mov	r2, r0
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	4293      	cmp	r3, r2
 801008e:	dc03      	bgt.n	8010098 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010090:	2004      	movs	r0, #4
 8010092:	f7f7 fc7f 	bl	8007994 <memp_malloc>
 8010096:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d101      	bne.n	80100a2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801009e:	2300      	movs	r3, #0
 80100a0:	e016      	b.n	80100d0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80100a2:	2220      	movs	r2, #32
 80100a4:	2100      	movs	r1, #0
 80100a6:	68f8      	ldr	r0, [r7, #12]
 80100a8:	f000 fe02 	bl	8010cb0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	220f      	movs	r2, #15
 80100b0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80100b2:	4b09      	ldr	r3, [pc, #36]	; (80100d8 <ip_reass_enqueue_new_datagram+0x70>)
 80100b4:	681a      	ldr	r2, [r3, #0]
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80100ba:	4a07      	ldr	r2, [pc, #28]	; (80100d8 <ip_reass_enqueue_new_datagram+0x70>)
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	3308      	adds	r3, #8
 80100c4:	2214      	movs	r2, #20
 80100c6:	6879      	ldr	r1, [r7, #4]
 80100c8:	4618      	mov	r0, r3
 80100ca:	f000 fde3 	bl	8010c94 <memcpy>
  return ipr;
 80100ce:	68fb      	ldr	r3, [r7, #12]
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	3710      	adds	r7, #16
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}
 80100d8:	200080a0 	.word	0x200080a0

080100dc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b082      	sub	sp, #8
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
 80100e4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80100e6:	4b10      	ldr	r3, [pc, #64]	; (8010128 <ip_reass_dequeue_datagram+0x4c>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	687a      	ldr	r2, [r7, #4]
 80100ec:	429a      	cmp	r2, r3
 80100ee:	d104      	bne.n	80100fa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	4a0c      	ldr	r2, [pc, #48]	; (8010128 <ip_reass_dequeue_datagram+0x4c>)
 80100f6:	6013      	str	r3, [r2, #0]
 80100f8:	e00d      	b.n	8010116 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d106      	bne.n	801010e <ip_reass_dequeue_datagram+0x32>
 8010100:	4b0a      	ldr	r3, [pc, #40]	; (801012c <ip_reass_dequeue_datagram+0x50>)
 8010102:	f240 1245 	movw	r2, #325	; 0x145
 8010106:	490a      	ldr	r1, [pc, #40]	; (8010130 <ip_reass_dequeue_datagram+0x54>)
 8010108:	480a      	ldr	r0, [pc, #40]	; (8010134 <ip_reass_dequeue_datagram+0x58>)
 801010a:	f000 fdd9 	bl	8010cc0 <iprintf>
    prev->next = ipr->next;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681a      	ldr	r2, [r3, #0]
 8010112:	683b      	ldr	r3, [r7, #0]
 8010114:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8010116:	6879      	ldr	r1, [r7, #4]
 8010118:	2004      	movs	r0, #4
 801011a:	f7f7 fcab 	bl	8007a74 <memp_free>
}
 801011e:	bf00      	nop
 8010120:	3708      	adds	r7, #8
 8010122:	46bd      	mov	sp, r7
 8010124:	bd80      	pop	{r7, pc}
 8010126:	bf00      	nop
 8010128:	200080a0 	.word	0x200080a0
 801012c:	0801458c 	.word	0x0801458c
 8010130:	08014654 	.word	0x08014654
 8010134:	080145d4 	.word	0x080145d4

08010138 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b08c      	sub	sp, #48	; 0x30
 801013c:	af00      	add	r7, sp, #0
 801013e:	60f8      	str	r0, [r7, #12]
 8010140:	60b9      	str	r1, [r7, #8]
 8010142:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010144:	2300      	movs	r3, #0
 8010146:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010148:	2301      	movs	r3, #1
 801014a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801014c:	68bb      	ldr	r3, [r7, #8]
 801014e:	685b      	ldr	r3, [r3, #4]
 8010150:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010152:	69fb      	ldr	r3, [r7, #28]
 8010154:	885b      	ldrh	r3, [r3, #2]
 8010156:	b29b      	uxth	r3, r3
 8010158:	4618      	mov	r0, r3
 801015a:	f7f6 feeb 	bl	8006f34 <lwip_htons>
 801015e:	4603      	mov	r3, r0
 8010160:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010162:	69fb      	ldr	r3, [r7, #28]
 8010164:	781b      	ldrb	r3, [r3, #0]
 8010166:	f003 030f 	and.w	r3, r3, #15
 801016a:	b2db      	uxtb	r3, r3
 801016c:	009b      	lsls	r3, r3, #2
 801016e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010170:	7e7b      	ldrb	r3, [r7, #25]
 8010172:	b29b      	uxth	r3, r3
 8010174:	8b7a      	ldrh	r2, [r7, #26]
 8010176:	429a      	cmp	r2, r3
 8010178:	d202      	bcs.n	8010180 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801017a:	f04f 33ff 	mov.w	r3, #4294967295
 801017e:	e135      	b.n	80103ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010180:	7e7b      	ldrb	r3, [r7, #25]
 8010182:	b29b      	uxth	r3, r3
 8010184:	8b7a      	ldrh	r2, [r7, #26]
 8010186:	1ad3      	subs	r3, r2, r3
 8010188:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801018a:	69fb      	ldr	r3, [r7, #28]
 801018c:	88db      	ldrh	r3, [r3, #6]
 801018e:	b29b      	uxth	r3, r3
 8010190:	4618      	mov	r0, r3
 8010192:	f7f6 fecf 	bl	8006f34 <lwip_htons>
 8010196:	4603      	mov	r3, r0
 8010198:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801019c:	b29b      	uxth	r3, r3
 801019e:	00db      	lsls	r3, r3, #3
 80101a0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	685b      	ldr	r3, [r3, #4]
 80101a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80101a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101aa:	2200      	movs	r2, #0
 80101ac:	701a      	strb	r2, [r3, #0]
 80101ae:	2200      	movs	r2, #0
 80101b0:	705a      	strb	r2, [r3, #1]
 80101b2:	2200      	movs	r2, #0
 80101b4:	709a      	strb	r2, [r3, #2]
 80101b6:	2200      	movs	r2, #0
 80101b8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80101ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101bc:	8afa      	ldrh	r2, [r7, #22]
 80101be:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80101c0:	8afa      	ldrh	r2, [r7, #22]
 80101c2:	8b7b      	ldrh	r3, [r7, #26]
 80101c4:	4413      	add	r3, r2
 80101c6:	b29a      	uxth	r2, r3
 80101c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ca:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80101cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ce:	88db      	ldrh	r3, [r3, #6]
 80101d0:	b29b      	uxth	r3, r3
 80101d2:	8afa      	ldrh	r2, [r7, #22]
 80101d4:	429a      	cmp	r2, r3
 80101d6:	d902      	bls.n	80101de <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80101d8:	f04f 33ff 	mov.w	r3, #4294967295
 80101dc:	e106      	b.n	80103ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	685b      	ldr	r3, [r3, #4]
 80101e2:	627b      	str	r3, [r7, #36]	; 0x24
 80101e4:	e068      	b.n	80102b8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80101e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e8:	685b      	ldr	r3, [r3, #4]
 80101ea:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80101ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ee:	889b      	ldrh	r3, [r3, #4]
 80101f0:	b29a      	uxth	r2, r3
 80101f2:	693b      	ldr	r3, [r7, #16]
 80101f4:	889b      	ldrh	r3, [r3, #4]
 80101f6:	b29b      	uxth	r3, r3
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d235      	bcs.n	8010268 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80101fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010200:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010204:	2b00      	cmp	r3, #0
 8010206:	d020      	beq.n	801024a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801020a:	889b      	ldrh	r3, [r3, #4]
 801020c:	b29a      	uxth	r2, r3
 801020e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010210:	88db      	ldrh	r3, [r3, #6]
 8010212:	b29b      	uxth	r3, r3
 8010214:	429a      	cmp	r2, r3
 8010216:	d307      	bcc.n	8010228 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8010218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801021a:	88db      	ldrh	r3, [r3, #6]
 801021c:	b29a      	uxth	r2, r3
 801021e:	693b      	ldr	r3, [r7, #16]
 8010220:	889b      	ldrh	r3, [r3, #4]
 8010222:	b29b      	uxth	r3, r3
 8010224:	429a      	cmp	r2, r3
 8010226:	d902      	bls.n	801022e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010228:	f04f 33ff 	mov.w	r3, #4294967295
 801022c:	e0de      	b.n	80103ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801022e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010230:	68ba      	ldr	r2, [r7, #8]
 8010232:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010236:	88db      	ldrh	r3, [r3, #6]
 8010238:	b29a      	uxth	r2, r3
 801023a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801023c:	889b      	ldrh	r3, [r3, #4]
 801023e:	b29b      	uxth	r3, r3
 8010240:	429a      	cmp	r2, r3
 8010242:	d03d      	beq.n	80102c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010244:	2300      	movs	r3, #0
 8010246:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010248:	e03a      	b.n	80102c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801024a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801024c:	88db      	ldrh	r3, [r3, #6]
 801024e:	b29a      	uxth	r2, r3
 8010250:	693b      	ldr	r3, [r7, #16]
 8010252:	889b      	ldrh	r3, [r3, #4]
 8010254:	b29b      	uxth	r3, r3
 8010256:	429a      	cmp	r2, r3
 8010258:	d902      	bls.n	8010260 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801025a:	f04f 33ff 	mov.w	r3, #4294967295
 801025e:	e0c5      	b.n	80103ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	68ba      	ldr	r2, [r7, #8]
 8010264:	605a      	str	r2, [r3, #4]
      break;
 8010266:	e02b      	b.n	80102c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8010268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801026a:	889b      	ldrh	r3, [r3, #4]
 801026c:	b29a      	uxth	r2, r3
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	889b      	ldrh	r3, [r3, #4]
 8010272:	b29b      	uxth	r3, r3
 8010274:	429a      	cmp	r2, r3
 8010276:	d102      	bne.n	801027e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010278:	f04f 33ff 	mov.w	r3, #4294967295
 801027c:	e0b6      	b.n	80103ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801027e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010280:	889b      	ldrh	r3, [r3, #4]
 8010282:	b29a      	uxth	r2, r3
 8010284:	693b      	ldr	r3, [r7, #16]
 8010286:	88db      	ldrh	r3, [r3, #6]
 8010288:	b29b      	uxth	r3, r3
 801028a:	429a      	cmp	r2, r3
 801028c:	d202      	bcs.n	8010294 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801028e:	f04f 33ff 	mov.w	r3, #4294967295
 8010292:	e0ab      	b.n	80103ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010296:	2b00      	cmp	r3, #0
 8010298:	d009      	beq.n	80102ae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801029a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801029c:	88db      	ldrh	r3, [r3, #6]
 801029e:	b29a      	uxth	r2, r3
 80102a0:	693b      	ldr	r3, [r7, #16]
 80102a2:	889b      	ldrh	r3, [r3, #4]
 80102a4:	b29b      	uxth	r3, r3
 80102a6:	429a      	cmp	r2, r3
 80102a8:	d001      	beq.n	80102ae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80102aa:	2300      	movs	r3, #0
 80102ac:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80102ae:	693b      	ldr	r3, [r7, #16]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80102b4:	693b      	ldr	r3, [r7, #16]
 80102b6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80102b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d193      	bne.n	80101e6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80102be:	e000      	b.n	80102c2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80102c0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80102c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d12d      	bne.n	8010324 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80102c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d01c      	beq.n	8010308 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80102ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102d0:	88db      	ldrh	r3, [r3, #6]
 80102d2:	b29a      	uxth	r2, r3
 80102d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102d6:	889b      	ldrh	r3, [r3, #4]
 80102d8:	b29b      	uxth	r3, r3
 80102da:	429a      	cmp	r2, r3
 80102dc:	d906      	bls.n	80102ec <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80102de:	4b45      	ldr	r3, [pc, #276]	; (80103f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80102e0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80102e4:	4944      	ldr	r1, [pc, #272]	; (80103f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80102e6:	4845      	ldr	r0, [pc, #276]	; (80103fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80102e8:	f000 fcea 	bl	8010cc0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80102ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ee:	68ba      	ldr	r2, [r7, #8]
 80102f0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80102f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102f4:	88db      	ldrh	r3, [r3, #6]
 80102f6:	b29a      	uxth	r2, r3
 80102f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102fa:	889b      	ldrh	r3, [r3, #4]
 80102fc:	b29b      	uxth	r3, r3
 80102fe:	429a      	cmp	r2, r3
 8010300:	d010      	beq.n	8010324 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010302:	2300      	movs	r3, #0
 8010304:	623b      	str	r3, [r7, #32]
 8010306:	e00d      	b.n	8010324 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	685b      	ldr	r3, [r3, #4]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d006      	beq.n	801031e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010310:	4b38      	ldr	r3, [pc, #224]	; (80103f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010312:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8010316:	493a      	ldr	r1, [pc, #232]	; (8010400 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010318:	4838      	ldr	r0, [pc, #224]	; (80103fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801031a:	f000 fcd1 	bl	8010cc0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	68ba      	ldr	r2, [r7, #8]
 8010322:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d105      	bne.n	8010336 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	7f9b      	ldrb	r3, [r3, #30]
 801032e:	f003 0301 	and.w	r3, r3, #1
 8010332:	2b00      	cmp	r3, #0
 8010334:	d059      	beq.n	80103ea <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8010336:	6a3b      	ldr	r3, [r7, #32]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d04f      	beq.n	80103dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	685b      	ldr	r3, [r3, #4]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d006      	beq.n	8010352 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	685b      	ldr	r3, [r3, #4]
 8010348:	685b      	ldr	r3, [r3, #4]
 801034a:	889b      	ldrh	r3, [r3, #4]
 801034c:	b29b      	uxth	r3, r3
 801034e:	2b00      	cmp	r3, #0
 8010350:	d002      	beq.n	8010358 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010352:	2300      	movs	r3, #0
 8010354:	623b      	str	r3, [r7, #32]
 8010356:	e041      	b.n	80103dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801035a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801035c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010362:	e012      	b.n	801038a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010366:	685b      	ldr	r3, [r3, #4]
 8010368:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801036a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801036c:	88db      	ldrh	r3, [r3, #6]
 801036e:	b29a      	uxth	r2, r3
 8010370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010372:	889b      	ldrh	r3, [r3, #4]
 8010374:	b29b      	uxth	r3, r3
 8010376:	429a      	cmp	r2, r3
 8010378:	d002      	beq.n	8010380 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801037a:	2300      	movs	r3, #0
 801037c:	623b      	str	r3, [r7, #32]
            break;
 801037e:	e007      	b.n	8010390 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010382:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801038a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801038c:	2b00      	cmp	r3, #0
 801038e:	d1e9      	bne.n	8010364 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010390:	6a3b      	ldr	r3, [r7, #32]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d022      	beq.n	80103dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	685b      	ldr	r3, [r3, #4]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d106      	bne.n	80103ac <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801039e:	4b15      	ldr	r3, [pc, #84]	; (80103f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80103a0:	f240 12df 	movw	r2, #479	; 0x1df
 80103a4:	4917      	ldr	r1, [pc, #92]	; (8010404 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80103a6:	4815      	ldr	r0, [pc, #84]	; (80103fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80103a8:	f000 fc8a 	bl	8010cc0 <iprintf>
          LWIP_ASSERT("sanity check",
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	685b      	ldr	r3, [r3, #4]
 80103b0:	685b      	ldr	r3, [r3, #4]
 80103b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103b4:	429a      	cmp	r2, r3
 80103b6:	d106      	bne.n	80103c6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80103b8:	4b0e      	ldr	r3, [pc, #56]	; (80103f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80103ba:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80103be:	4911      	ldr	r1, [pc, #68]	; (8010404 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80103c0:	480e      	ldr	r0, [pc, #56]	; (80103fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80103c2:	f000 fc7d 	bl	8010cc0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80103c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d006      	beq.n	80103dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80103ce:	4b09      	ldr	r3, [pc, #36]	; (80103f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80103d0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80103d4:	490c      	ldr	r1, [pc, #48]	; (8010408 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80103d6:	4809      	ldr	r0, [pc, #36]	; (80103fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80103d8:	f000 fc72 	bl	8010cc0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80103dc:	6a3b      	ldr	r3, [r7, #32]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	bf14      	ite	ne
 80103e2:	2301      	movne	r3, #1
 80103e4:	2300      	moveq	r3, #0
 80103e6:	b2db      	uxtb	r3, r3
 80103e8:	e000      	b.n	80103ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80103ea:	2300      	movs	r3, #0
}
 80103ec:	4618      	mov	r0, r3
 80103ee:	3730      	adds	r7, #48	; 0x30
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}
 80103f4:	0801458c 	.word	0x0801458c
 80103f8:	08014670 	.word	0x08014670
 80103fc:	080145d4 	.word	0x080145d4
 8010400:	08014690 	.word	0x08014690
 8010404:	080146c8 	.word	0x080146c8
 8010408:	080146d8 	.word	0x080146d8

0801040c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b08e      	sub	sp, #56	; 0x38
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	685b      	ldr	r3, [r3, #4]
 8010418:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801041a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801041c:	781b      	ldrb	r3, [r3, #0]
 801041e:	f003 030f 	and.w	r3, r3, #15
 8010422:	b2db      	uxtb	r3, r3
 8010424:	009b      	lsls	r3, r3, #2
 8010426:	b2db      	uxtb	r3, r3
 8010428:	2b14      	cmp	r3, #20
 801042a:	f040 8171 	bne.w	8010710 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801042e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010430:	88db      	ldrh	r3, [r3, #6]
 8010432:	b29b      	uxth	r3, r3
 8010434:	4618      	mov	r0, r3
 8010436:	f7f6 fd7d 	bl	8006f34 <lwip_htons>
 801043a:	4603      	mov	r3, r0
 801043c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010440:	b29b      	uxth	r3, r3
 8010442:	00db      	lsls	r3, r3, #3
 8010444:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010448:	885b      	ldrh	r3, [r3, #2]
 801044a:	b29b      	uxth	r3, r3
 801044c:	4618      	mov	r0, r3
 801044e:	f7f6 fd71 	bl	8006f34 <lwip_htons>
 8010452:	4603      	mov	r3, r0
 8010454:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010458:	781b      	ldrb	r3, [r3, #0]
 801045a:	f003 030f 	and.w	r3, r3, #15
 801045e:	b2db      	uxtb	r3, r3
 8010460:	009b      	lsls	r3, r3, #2
 8010462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8010466:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801046a:	b29b      	uxth	r3, r3
 801046c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801046e:	429a      	cmp	r2, r3
 8010470:	f0c0 8150 	bcc.w	8010714 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010474:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010478:	b29b      	uxth	r3, r3
 801047a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801047c:	1ad3      	subs	r3, r2, r3
 801047e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f7f8 f9d5 	bl	8008830 <pbuf_clen>
 8010486:	4603      	mov	r3, r0
 8010488:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801048a:	4b8c      	ldr	r3, [pc, #560]	; (80106bc <ip4_reass+0x2b0>)
 801048c:	881b      	ldrh	r3, [r3, #0]
 801048e:	461a      	mov	r2, r3
 8010490:	8c3b      	ldrh	r3, [r7, #32]
 8010492:	4413      	add	r3, r2
 8010494:	2b0a      	cmp	r3, #10
 8010496:	dd10      	ble.n	80104ba <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010498:	8c3b      	ldrh	r3, [r7, #32]
 801049a:	4619      	mov	r1, r3
 801049c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801049e:	f7ff fd81 	bl	800ffa4 <ip_reass_remove_oldest_datagram>
 80104a2:	4603      	mov	r3, r0
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	f000 8137 	beq.w	8010718 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80104aa:	4b84      	ldr	r3, [pc, #528]	; (80106bc <ip4_reass+0x2b0>)
 80104ac:	881b      	ldrh	r3, [r3, #0]
 80104ae:	461a      	mov	r2, r3
 80104b0:	8c3b      	ldrh	r3, [r7, #32]
 80104b2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80104b4:	2b0a      	cmp	r3, #10
 80104b6:	f300 812f 	bgt.w	8010718 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80104ba:	4b81      	ldr	r3, [pc, #516]	; (80106c0 <ip4_reass+0x2b4>)
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	633b      	str	r3, [r7, #48]	; 0x30
 80104c0:	e015      	b.n	80104ee <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80104c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104c4:	695a      	ldr	r2, [r3, #20]
 80104c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104c8:	68db      	ldr	r3, [r3, #12]
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d10c      	bne.n	80104e8 <ip4_reass+0xdc>
 80104ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d0:	699a      	ldr	r2, [r3, #24]
 80104d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104d4:	691b      	ldr	r3, [r3, #16]
 80104d6:	429a      	cmp	r2, r3
 80104d8:	d106      	bne.n	80104e8 <ip4_reass+0xdc>
 80104da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104dc:	899a      	ldrh	r2, [r3, #12]
 80104de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104e0:	889b      	ldrh	r3, [r3, #4]
 80104e2:	b29b      	uxth	r3, r3
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d006      	beq.n	80104f6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80104e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	633b      	str	r3, [r7, #48]	; 0x30
 80104ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d1e6      	bne.n	80104c2 <ip4_reass+0xb6>
 80104f4:	e000      	b.n	80104f8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80104f6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80104f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d109      	bne.n	8010512 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80104fe:	8c3b      	ldrh	r3, [r7, #32]
 8010500:	4619      	mov	r1, r3
 8010502:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010504:	f7ff fdb0 	bl	8010068 <ip_reass_enqueue_new_datagram>
 8010508:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801050a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801050c:	2b00      	cmp	r3, #0
 801050e:	d11c      	bne.n	801054a <ip4_reass+0x13e>
      goto nullreturn;
 8010510:	e105      	b.n	801071e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010514:	88db      	ldrh	r3, [r3, #6]
 8010516:	b29b      	uxth	r3, r3
 8010518:	4618      	mov	r0, r3
 801051a:	f7f6 fd0b 	bl	8006f34 <lwip_htons>
 801051e:	4603      	mov	r3, r0
 8010520:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010524:	2b00      	cmp	r3, #0
 8010526:	d110      	bne.n	801054a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801052a:	89db      	ldrh	r3, [r3, #14]
 801052c:	4618      	mov	r0, r3
 801052e:	f7f6 fd01 	bl	8006f34 <lwip_htons>
 8010532:	4603      	mov	r3, r0
 8010534:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010538:	2b00      	cmp	r3, #0
 801053a:	d006      	beq.n	801054a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801053c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801053e:	3308      	adds	r3, #8
 8010540:	2214      	movs	r2, #20
 8010542:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010544:	4618      	mov	r0, r3
 8010546:	f000 fba5 	bl	8010c94 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801054a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801054c:	88db      	ldrh	r3, [r3, #6]
 801054e:	b29b      	uxth	r3, r3
 8010550:	f003 0320 	and.w	r3, r3, #32
 8010554:	2b00      	cmp	r3, #0
 8010556:	bf0c      	ite	eq
 8010558:	2301      	moveq	r3, #1
 801055a:	2300      	movne	r3, #0
 801055c:	b2db      	uxtb	r3, r3
 801055e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010560:	69fb      	ldr	r3, [r7, #28]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d00e      	beq.n	8010584 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010566:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010568:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801056a:	4413      	add	r3, r2
 801056c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801056e:	8b7a      	ldrh	r2, [r7, #26]
 8010570:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010572:	429a      	cmp	r2, r3
 8010574:	f0c0 80a0 	bcc.w	80106b8 <ip4_reass+0x2ac>
 8010578:	8b7b      	ldrh	r3, [r7, #26]
 801057a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801057e:	4293      	cmp	r3, r2
 8010580:	f200 809a 	bhi.w	80106b8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010584:	69fa      	ldr	r2, [r7, #28]
 8010586:	6879      	ldr	r1, [r7, #4]
 8010588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801058a:	f7ff fdd5 	bl	8010138 <ip_reass_chain_frag_into_datagram_and_validate>
 801058e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010590:	697b      	ldr	r3, [r7, #20]
 8010592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010596:	f000 809b 	beq.w	80106d0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801059a:	4b48      	ldr	r3, [pc, #288]	; (80106bc <ip4_reass+0x2b0>)
 801059c:	881a      	ldrh	r2, [r3, #0]
 801059e:	8c3b      	ldrh	r3, [r7, #32]
 80105a0:	4413      	add	r3, r2
 80105a2:	b29a      	uxth	r2, r3
 80105a4:	4b45      	ldr	r3, [pc, #276]	; (80106bc <ip4_reass+0x2b0>)
 80105a6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80105a8:	69fb      	ldr	r3, [r7, #28]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d00d      	beq.n	80105ca <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80105ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80105b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80105b2:	4413      	add	r3, r2
 80105b4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80105b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105b8:	8a7a      	ldrh	r2, [r7, #18]
 80105ba:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80105bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105be:	7f9b      	ldrb	r3, [r3, #30]
 80105c0:	f043 0301 	orr.w	r3, r3, #1
 80105c4:	b2da      	uxtb	r2, r3
 80105c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105c8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80105ca:	697b      	ldr	r3, [r7, #20]
 80105cc:	2b01      	cmp	r3, #1
 80105ce:	d171      	bne.n	80106b4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80105d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d2:	8b9b      	ldrh	r3, [r3, #28]
 80105d4:	3314      	adds	r3, #20
 80105d6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80105d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105da:	685b      	ldr	r3, [r3, #4]
 80105dc:	685b      	ldr	r3, [r3, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80105e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e4:	685b      	ldr	r3, [r3, #4]
 80105e6:	685b      	ldr	r3, [r3, #4]
 80105e8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80105ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ec:	3308      	adds	r3, #8
 80105ee:	2214      	movs	r2, #20
 80105f0:	4619      	mov	r1, r3
 80105f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105f4:	f000 fb4e 	bl	8010c94 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80105f8:	8a3b      	ldrh	r3, [r7, #16]
 80105fa:	4618      	mov	r0, r3
 80105fc:	f7f6 fc9a 	bl	8006f34 <lwip_htons>
 8010600:	4603      	mov	r3, r0
 8010602:	461a      	mov	r2, r3
 8010604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010606:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801060a:	2200      	movs	r2, #0
 801060c:	719a      	strb	r2, [r3, #6]
 801060e:	2200      	movs	r2, #0
 8010610:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010614:	2200      	movs	r2, #0
 8010616:	729a      	strb	r2, [r3, #10]
 8010618:	2200      	movs	r2, #0
 801061a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801061c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801061e:	685b      	ldr	r3, [r3, #4]
 8010620:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010622:	e00d      	b.n	8010640 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010626:	685b      	ldr	r3, [r3, #4]
 8010628:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801062a:	2114      	movs	r1, #20
 801062c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801062e:	f7f7 fff1 	bl	8008614 <pbuf_remove_header>
      pbuf_cat(p, r);
 8010632:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	f7f8 f935 	bl	80088a4 <pbuf_cat>
      r = iprh->next_pbuf;
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8010640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010642:	2b00      	cmp	r3, #0
 8010644:	d1ee      	bne.n	8010624 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010646:	4b1e      	ldr	r3, [pc, #120]	; (80106c0 <ip4_reass+0x2b4>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801064c:	429a      	cmp	r2, r3
 801064e:	d102      	bne.n	8010656 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010650:	2300      	movs	r3, #0
 8010652:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010654:	e010      	b.n	8010678 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010656:	4b1a      	ldr	r3, [pc, #104]	; (80106c0 <ip4_reass+0x2b4>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801065c:	e007      	b.n	801066e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801065e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010664:	429a      	cmp	r2, r3
 8010666:	d006      	beq.n	8010676 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801066e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010670:	2b00      	cmp	r3, #0
 8010672:	d1f4      	bne.n	801065e <ip4_reass+0x252>
 8010674:	e000      	b.n	8010678 <ip4_reass+0x26c>
          break;
 8010676:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010678:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801067a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801067c:	f7ff fd2e 	bl	80100dc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f7f8 f8d5 	bl	8008830 <pbuf_clen>
 8010686:	4603      	mov	r3, r0
 8010688:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801068a:	4b0c      	ldr	r3, [pc, #48]	; (80106bc <ip4_reass+0x2b0>)
 801068c:	881b      	ldrh	r3, [r3, #0]
 801068e:	8c3a      	ldrh	r2, [r7, #32]
 8010690:	429a      	cmp	r2, r3
 8010692:	d906      	bls.n	80106a2 <ip4_reass+0x296>
 8010694:	4b0b      	ldr	r3, [pc, #44]	; (80106c4 <ip4_reass+0x2b8>)
 8010696:	f240 229b 	movw	r2, #667	; 0x29b
 801069a:	490b      	ldr	r1, [pc, #44]	; (80106c8 <ip4_reass+0x2bc>)
 801069c:	480b      	ldr	r0, [pc, #44]	; (80106cc <ip4_reass+0x2c0>)
 801069e:	f000 fb0f 	bl	8010cc0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80106a2:	4b06      	ldr	r3, [pc, #24]	; (80106bc <ip4_reass+0x2b0>)
 80106a4:	881a      	ldrh	r2, [r3, #0]
 80106a6:	8c3b      	ldrh	r3, [r7, #32]
 80106a8:	1ad3      	subs	r3, r2, r3
 80106aa:	b29a      	uxth	r2, r3
 80106ac:	4b03      	ldr	r3, [pc, #12]	; (80106bc <ip4_reass+0x2b0>)
 80106ae:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	e038      	b.n	8010726 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80106b4:	2300      	movs	r3, #0
 80106b6:	e036      	b.n	8010726 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80106b8:	bf00      	nop
 80106ba:	e00a      	b.n	80106d2 <ip4_reass+0x2c6>
 80106bc:	200080a4 	.word	0x200080a4
 80106c0:	200080a0 	.word	0x200080a0
 80106c4:	0801458c 	.word	0x0801458c
 80106c8:	080146fc 	.word	0x080146fc
 80106cc:	080145d4 	.word	0x080145d4
    goto nullreturn_ipr;
 80106d0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80106d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d106      	bne.n	80106e6 <ip4_reass+0x2da>
 80106d8:	4b15      	ldr	r3, [pc, #84]	; (8010730 <ip4_reass+0x324>)
 80106da:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80106de:	4915      	ldr	r1, [pc, #84]	; (8010734 <ip4_reass+0x328>)
 80106e0:	4815      	ldr	r0, [pc, #84]	; (8010738 <ip4_reass+0x32c>)
 80106e2:	f000 faed 	bl	8010cc0 <iprintf>
  if (ipr->p == NULL) {
 80106e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e8:	685b      	ldr	r3, [r3, #4]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d116      	bne.n	801071c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80106ee:	4b13      	ldr	r3, [pc, #76]	; (801073c <ip4_reass+0x330>)
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d006      	beq.n	8010706 <ip4_reass+0x2fa>
 80106f8:	4b0d      	ldr	r3, [pc, #52]	; (8010730 <ip4_reass+0x324>)
 80106fa:	f240 22ab 	movw	r2, #683	; 0x2ab
 80106fe:	4910      	ldr	r1, [pc, #64]	; (8010740 <ip4_reass+0x334>)
 8010700:	480d      	ldr	r0, [pc, #52]	; (8010738 <ip4_reass+0x32c>)
 8010702:	f000 fadd 	bl	8010cc0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010706:	2100      	movs	r1, #0
 8010708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801070a:	f7ff fce7 	bl	80100dc <ip_reass_dequeue_datagram>
 801070e:	e006      	b.n	801071e <ip4_reass+0x312>
    goto nullreturn;
 8010710:	bf00      	nop
 8010712:	e004      	b.n	801071e <ip4_reass+0x312>
    goto nullreturn;
 8010714:	bf00      	nop
 8010716:	e002      	b.n	801071e <ip4_reass+0x312>
      goto nullreturn;
 8010718:	bf00      	nop
 801071a:	e000      	b.n	801071e <ip4_reass+0x312>
  }

nullreturn:
 801071c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801071e:	6878      	ldr	r0, [r7, #4]
 8010720:	f7f7 fffe 	bl	8008720 <pbuf_free>
  return NULL;
 8010724:	2300      	movs	r3, #0
}
 8010726:	4618      	mov	r0, r3
 8010728:	3738      	adds	r7, #56	; 0x38
 801072a:	46bd      	mov	sp, r7
 801072c:	bd80      	pop	{r7, pc}
 801072e:	bf00      	nop
 8010730:	0801458c 	.word	0x0801458c
 8010734:	08014718 	.word	0x08014718
 8010738:	080145d4 	.word	0x080145d4
 801073c:	200080a0 	.word	0x200080a0
 8010740:	08014724 	.word	0x08014724

08010744 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010748:	2005      	movs	r0, #5
 801074a:	f7f7 f923 	bl	8007994 <memp_malloc>
 801074e:	4603      	mov	r3, r0
}
 8010750:	4618      	mov	r0, r3
 8010752:	bd80      	pop	{r7, pc}

08010754 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b082      	sub	sp, #8
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d106      	bne.n	8010770 <ip_frag_free_pbuf_custom_ref+0x1c>
 8010762:	4b07      	ldr	r3, [pc, #28]	; (8010780 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010764:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8010768:	4906      	ldr	r1, [pc, #24]	; (8010784 <ip_frag_free_pbuf_custom_ref+0x30>)
 801076a:	4807      	ldr	r0, [pc, #28]	; (8010788 <ip_frag_free_pbuf_custom_ref+0x34>)
 801076c:	f000 faa8 	bl	8010cc0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010770:	6879      	ldr	r1, [r7, #4]
 8010772:	2005      	movs	r0, #5
 8010774:	f7f7 f97e 	bl	8007a74 <memp_free>
}
 8010778:	bf00      	nop
 801077a:	3708      	adds	r7, #8
 801077c:	46bd      	mov	sp, r7
 801077e:	bd80      	pop	{r7, pc}
 8010780:	0801458c 	.word	0x0801458c
 8010784:	08014744 	.word	0x08014744
 8010788:	080145d4 	.word	0x080145d4

0801078c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b084      	sub	sp, #16
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d106      	bne.n	80107ac <ipfrag_free_pbuf_custom+0x20>
 801079e:	4b11      	ldr	r3, [pc, #68]	; (80107e4 <ipfrag_free_pbuf_custom+0x58>)
 80107a0:	f240 22ce 	movw	r2, #718	; 0x2ce
 80107a4:	4910      	ldr	r1, [pc, #64]	; (80107e8 <ipfrag_free_pbuf_custom+0x5c>)
 80107a6:	4811      	ldr	r0, [pc, #68]	; (80107ec <ipfrag_free_pbuf_custom+0x60>)
 80107a8:	f000 fa8a 	bl	8010cc0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80107ac:	68fa      	ldr	r2, [r7, #12]
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	429a      	cmp	r2, r3
 80107b2:	d006      	beq.n	80107c2 <ipfrag_free_pbuf_custom+0x36>
 80107b4:	4b0b      	ldr	r3, [pc, #44]	; (80107e4 <ipfrag_free_pbuf_custom+0x58>)
 80107b6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80107ba:	490d      	ldr	r1, [pc, #52]	; (80107f0 <ipfrag_free_pbuf_custom+0x64>)
 80107bc:	480b      	ldr	r0, [pc, #44]	; (80107ec <ipfrag_free_pbuf_custom+0x60>)
 80107be:	f000 fa7f 	bl	8010cc0 <iprintf>
  if (pcr->original != NULL) {
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	695b      	ldr	r3, [r3, #20]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d004      	beq.n	80107d4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	695b      	ldr	r3, [r3, #20]
 80107ce:	4618      	mov	r0, r3
 80107d0:	f7f7 ffa6 	bl	8008720 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80107d4:	68f8      	ldr	r0, [r7, #12]
 80107d6:	f7ff ffbd 	bl	8010754 <ip_frag_free_pbuf_custom_ref>
}
 80107da:	bf00      	nop
 80107dc:	3710      	adds	r7, #16
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}
 80107e2:	bf00      	nop
 80107e4:	0801458c 	.word	0x0801458c
 80107e8:	08014750 	.word	0x08014750
 80107ec:	080145d4 	.word	0x080145d4
 80107f0:	0801475c 	.word	0x0801475c

080107f4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b094      	sub	sp, #80	; 0x50
 80107f8:	af02      	add	r7, sp, #8
 80107fa:	60f8      	str	r0, [r7, #12]
 80107fc:	60b9      	str	r1, [r7, #8]
 80107fe:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010800:	2300      	movs	r3, #0
 8010802:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010806:	68bb      	ldr	r3, [r7, #8]
 8010808:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801080a:	3b14      	subs	r3, #20
 801080c:	2b00      	cmp	r3, #0
 801080e:	da00      	bge.n	8010812 <ip4_frag+0x1e>
 8010810:	3307      	adds	r3, #7
 8010812:	10db      	asrs	r3, r3, #3
 8010814:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010816:	2314      	movs	r3, #20
 8010818:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	685b      	ldr	r3, [r3, #4]
 801081e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010822:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010826:	781b      	ldrb	r3, [r3, #0]
 8010828:	f003 030f 	and.w	r3, r3, #15
 801082c:	b2db      	uxtb	r3, r3
 801082e:	009b      	lsls	r3, r3, #2
 8010830:	b2db      	uxtb	r3, r3
 8010832:	2b14      	cmp	r3, #20
 8010834:	d002      	beq.n	801083c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8010836:	f06f 0305 	mvn.w	r3, #5
 801083a:	e110      	b.n	8010a5e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	895b      	ldrh	r3, [r3, #10]
 8010840:	2b13      	cmp	r3, #19
 8010842:	d809      	bhi.n	8010858 <ip4_frag+0x64>
 8010844:	4b88      	ldr	r3, [pc, #544]	; (8010a68 <ip4_frag+0x274>)
 8010846:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801084a:	4988      	ldr	r1, [pc, #544]	; (8010a6c <ip4_frag+0x278>)
 801084c:	4888      	ldr	r0, [pc, #544]	; (8010a70 <ip4_frag+0x27c>)
 801084e:	f000 fa37 	bl	8010cc0 <iprintf>
 8010852:	f06f 0305 	mvn.w	r3, #5
 8010856:	e102      	b.n	8010a5e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801085a:	88db      	ldrh	r3, [r3, #6]
 801085c:	b29b      	uxth	r3, r3
 801085e:	4618      	mov	r0, r3
 8010860:	f7f6 fb68 	bl	8006f34 <lwip_htons>
 8010864:	4603      	mov	r3, r0
 8010866:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8010868:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801086a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801086e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010872:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010874:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010878:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	891b      	ldrh	r3, [r3, #8]
 801087e:	3b14      	subs	r3, #20
 8010880:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8010884:	e0e1      	b.n	8010a4a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010886:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010888:	00db      	lsls	r3, r3, #3
 801088a:	b29b      	uxth	r3, r3
 801088c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010890:	4293      	cmp	r3, r2
 8010892:	bf28      	it	cs
 8010894:	4613      	movcs	r3, r2
 8010896:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010898:	f44f 7220 	mov.w	r2, #640	; 0x280
 801089c:	2114      	movs	r1, #20
 801089e:	200e      	movs	r0, #14
 80108a0:	f7f7 fc5a 	bl	8008158 <pbuf_alloc>
 80108a4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80108a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	f000 80d5 	beq.w	8010a58 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80108ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b0:	895b      	ldrh	r3, [r3, #10]
 80108b2:	2b13      	cmp	r3, #19
 80108b4:	d806      	bhi.n	80108c4 <ip4_frag+0xd0>
 80108b6:	4b6c      	ldr	r3, [pc, #432]	; (8010a68 <ip4_frag+0x274>)
 80108b8:	f44f 7249 	mov.w	r2, #804	; 0x324
 80108bc:	496d      	ldr	r1, [pc, #436]	; (8010a74 <ip4_frag+0x280>)
 80108be:	486c      	ldr	r0, [pc, #432]	; (8010a70 <ip4_frag+0x27c>)
 80108c0:	f000 f9fe 	bl	8010cc0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80108c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108c6:	685b      	ldr	r3, [r3, #4]
 80108c8:	2214      	movs	r2, #20
 80108ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80108cc:	4618      	mov	r0, r3
 80108ce:	f000 f9e1 	bl	8010c94 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80108d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108d4:	685b      	ldr	r3, [r3, #4]
 80108d6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80108d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80108da:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80108de:	e064      	b.n	80109aa <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	895a      	ldrh	r2, [r3, #10]
 80108e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80108e6:	1ad3      	subs	r3, r2, r3
 80108e8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	895b      	ldrh	r3, [r3, #10]
 80108ee:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80108f0:	429a      	cmp	r2, r3
 80108f2:	d906      	bls.n	8010902 <ip4_frag+0x10e>
 80108f4:	4b5c      	ldr	r3, [pc, #368]	; (8010a68 <ip4_frag+0x274>)
 80108f6:	f240 322d 	movw	r2, #813	; 0x32d
 80108fa:	495f      	ldr	r1, [pc, #380]	; (8010a78 <ip4_frag+0x284>)
 80108fc:	485c      	ldr	r0, [pc, #368]	; (8010a70 <ip4_frag+0x27c>)
 80108fe:	f000 f9df 	bl	8010cc0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010902:	8bfa      	ldrh	r2, [r7, #30]
 8010904:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010908:	4293      	cmp	r3, r2
 801090a:	bf28      	it	cs
 801090c:	4613      	movcs	r3, r2
 801090e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010912:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010916:	2b00      	cmp	r3, #0
 8010918:	d105      	bne.n	8010926 <ip4_frag+0x132>
        poff = 0;
 801091a:	2300      	movs	r3, #0
 801091c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	60fb      	str	r3, [r7, #12]
        continue;
 8010924:	e041      	b.n	80109aa <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010926:	f7ff ff0d 	bl	8010744 <ip_frag_alloc_pbuf_custom_ref>
 801092a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801092c:	69bb      	ldr	r3, [r7, #24]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d103      	bne.n	801093a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010932:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010934:	f7f7 fef4 	bl	8008720 <pbuf_free>
        goto memerr;
 8010938:	e08f      	b.n	8010a5a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801093a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010940:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010942:	4413      	add	r3, r2
 8010944:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8010948:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801094c:	9201      	str	r2, [sp, #4]
 801094e:	9300      	str	r3, [sp, #0]
 8010950:	4603      	mov	r3, r0
 8010952:	2241      	movs	r2, #65	; 0x41
 8010954:	2000      	movs	r0, #0
 8010956:	f7f7 fd29 	bl	80083ac <pbuf_alloced_custom>
 801095a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801095c:	697b      	ldr	r3, [r7, #20]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d106      	bne.n	8010970 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010962:	69b8      	ldr	r0, [r7, #24]
 8010964:	f7ff fef6 	bl	8010754 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010968:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801096a:	f7f7 fed9 	bl	8008720 <pbuf_free>
        goto memerr;
 801096e:	e074      	b.n	8010a5a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010970:	68f8      	ldr	r0, [r7, #12]
 8010972:	f7f7 ff75 	bl	8008860 <pbuf_ref>
      pcr->original = p;
 8010976:	69bb      	ldr	r3, [r7, #24]
 8010978:	68fa      	ldr	r2, [r7, #12]
 801097a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801097c:	69bb      	ldr	r3, [r7, #24]
 801097e:	4a3f      	ldr	r2, [pc, #252]	; (8010a7c <ip4_frag+0x288>)
 8010980:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010982:	6979      	ldr	r1, [r7, #20]
 8010984:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010986:	f7f7 ff8d 	bl	80088a4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801098a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801098e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010992:	1ad3      	subs	r3, r2, r3
 8010994:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8010998:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801099c:	2b00      	cmp	r3, #0
 801099e:	d004      	beq.n	80109aa <ip4_frag+0x1b6>
        poff = 0;
 80109a0:	2300      	movs	r3, #0
 80109a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80109aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d196      	bne.n	80108e0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80109b2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80109b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80109b8:	4413      	add	r3, r2
 80109ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80109c0:	f1a3 0213 	sub.w	r2, r3, #19
 80109c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80109c8:	429a      	cmp	r2, r3
 80109ca:	bfcc      	ite	gt
 80109cc:	2301      	movgt	r3, #1
 80109ce:	2300      	movle	r3, #0
 80109d0:	b2db      	uxtb	r3, r3
 80109d2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80109d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80109d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80109dc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80109de:	6a3b      	ldr	r3, [r7, #32]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d002      	beq.n	80109ea <ip4_frag+0x1f6>
 80109e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d003      	beq.n	80109f2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80109ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80109ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80109f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80109f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80109f4:	4618      	mov	r0, r3
 80109f6:	f7f6 fa9d 	bl	8006f34 <lwip_htons>
 80109fa:	4603      	mov	r3, r0
 80109fc:	461a      	mov	r2, r3
 80109fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a00:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010a02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010a04:	3314      	adds	r3, #20
 8010a06:	b29b      	uxth	r3, r3
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f7f6 fa93 	bl	8006f34 <lwip_htons>
 8010a0e:	4603      	mov	r3, r0
 8010a10:	461a      	mov	r2, r3
 8010a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a14:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a18:	2200      	movs	r2, #0
 8010a1a:	729a      	strb	r2, [r3, #10]
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010a20:	68bb      	ldr	r3, [r7, #8]
 8010a22:	695b      	ldr	r3, [r3, #20]
 8010a24:	687a      	ldr	r2, [r7, #4]
 8010a26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010a28:	68b8      	ldr	r0, [r7, #8]
 8010a2a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010a2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a2e:	f7f7 fe77 	bl	8008720 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010a32:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010a36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010a38:	1ad3      	subs	r3, r2, r3
 8010a3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8010a3e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010a42:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010a44:	4413      	add	r3, r2
 8010a46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8010a4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	f47f af19 	bne.w	8010886 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010a54:	2300      	movs	r3, #0
 8010a56:	e002      	b.n	8010a5e <ip4_frag+0x26a>
      goto memerr;
 8010a58:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010a5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3748      	adds	r7, #72	; 0x48
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}
 8010a66:	bf00      	nop
 8010a68:	0801458c 	.word	0x0801458c
 8010a6c:	08014768 	.word	0x08014768
 8010a70:	080145d4 	.word	0x080145d4
 8010a74:	08014784 	.word	0x08014784
 8010a78:	080147a4 	.word	0x080147a4
 8010a7c:	0801078d 	.word	0x0801078d

08010a80 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b086      	sub	sp, #24
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010a8a:	230e      	movs	r3, #14
 8010a8c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	895b      	ldrh	r3, [r3, #10]
 8010a92:	2b0e      	cmp	r3, #14
 8010a94:	d96e      	bls.n	8010b74 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	7bdb      	ldrb	r3, [r3, #15]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d106      	bne.n	8010aac <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010aa4:	3301      	adds	r3, #1
 8010aa6:	b2da      	uxtb	r2, r3
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	685b      	ldr	r3, [r3, #4]
 8010ab0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010ab2:	693b      	ldr	r3, [r7, #16]
 8010ab4:	7b1a      	ldrb	r2, [r3, #12]
 8010ab6:	7b5b      	ldrb	r3, [r3, #13]
 8010ab8:	021b      	lsls	r3, r3, #8
 8010aba:	4313      	orrs	r3, r2
 8010abc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010abe:	693b      	ldr	r3, [r7, #16]
 8010ac0:	781b      	ldrb	r3, [r3, #0]
 8010ac2:	f003 0301 	and.w	r3, r3, #1
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d023      	beq.n	8010b12 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010aca:	693b      	ldr	r3, [r7, #16]
 8010acc:	781b      	ldrb	r3, [r3, #0]
 8010ace:	2b01      	cmp	r3, #1
 8010ad0:	d10f      	bne.n	8010af2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010ad2:	693b      	ldr	r3, [r7, #16]
 8010ad4:	785b      	ldrb	r3, [r3, #1]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d11b      	bne.n	8010b12 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010ada:	693b      	ldr	r3, [r7, #16]
 8010adc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010ade:	2b5e      	cmp	r3, #94	; 0x5e
 8010ae0:	d117      	bne.n	8010b12 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	7b5b      	ldrb	r3, [r3, #13]
 8010ae6:	f043 0310 	orr.w	r3, r3, #16
 8010aea:	b2da      	uxtb	r2, r3
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	735a      	strb	r2, [r3, #13]
 8010af0:	e00f      	b.n	8010b12 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010af2:	693b      	ldr	r3, [r7, #16]
 8010af4:	2206      	movs	r2, #6
 8010af6:	4928      	ldr	r1, [pc, #160]	; (8010b98 <ethernet_input+0x118>)
 8010af8:	4618      	mov	r0, r3
 8010afa:	f000 f8bb 	bl	8010c74 <memcmp>
 8010afe:	4603      	mov	r3, r0
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d106      	bne.n	8010b12 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	7b5b      	ldrb	r3, [r3, #13]
 8010b08:	f043 0308 	orr.w	r3, r3, #8
 8010b0c:	b2da      	uxtb	r2, r3
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010b12:	89fb      	ldrh	r3, [r7, #14]
 8010b14:	2b08      	cmp	r3, #8
 8010b16:	d003      	beq.n	8010b20 <ethernet_input+0xa0>
 8010b18:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010b1c:	d014      	beq.n	8010b48 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010b1e:	e032      	b.n	8010b86 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b26:	f003 0308 	and.w	r3, r3, #8
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d024      	beq.n	8010b78 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010b2e:	8afb      	ldrh	r3, [r7, #22]
 8010b30:	4619      	mov	r1, r3
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f7f7 fd6e 	bl	8008614 <pbuf_remove_header>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d11e      	bne.n	8010b7c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8010b3e:	6839      	ldr	r1, [r7, #0]
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f7fe ff0b 	bl	800f95c <ip4_input>
      break;
 8010b46:	e013      	b.n	8010b70 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010b4e:	f003 0308 	and.w	r3, r3, #8
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d014      	beq.n	8010b80 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010b56:	8afb      	ldrh	r3, [r7, #22]
 8010b58:	4619      	mov	r1, r3
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	f7f7 fd5a 	bl	8008614 <pbuf_remove_header>
 8010b60:	4603      	mov	r3, r0
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d10e      	bne.n	8010b84 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010b66:	6839      	ldr	r1, [r7, #0]
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f7fe f887 	bl	800ec7c <etharp_input>
      break;
 8010b6e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010b70:	2300      	movs	r3, #0
 8010b72:	e00c      	b.n	8010b8e <ethernet_input+0x10e>
    goto free_and_return;
 8010b74:	bf00      	nop
 8010b76:	e006      	b.n	8010b86 <ethernet_input+0x106>
        goto free_and_return;
 8010b78:	bf00      	nop
 8010b7a:	e004      	b.n	8010b86 <ethernet_input+0x106>
        goto free_and_return;
 8010b7c:	bf00      	nop
 8010b7e:	e002      	b.n	8010b86 <ethernet_input+0x106>
        goto free_and_return;
 8010b80:	bf00      	nop
 8010b82:	e000      	b.n	8010b86 <ethernet_input+0x106>
        goto free_and_return;
 8010b84:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	f7f7 fdca 	bl	8008720 <pbuf_free>
  return ERR_OK;
 8010b8c:	2300      	movs	r3, #0
}
 8010b8e:	4618      	mov	r0, r3
 8010b90:	3718      	adds	r7, #24
 8010b92:	46bd      	mov	sp, r7
 8010b94:	bd80      	pop	{r7, pc}
 8010b96:	bf00      	nop
 8010b98:	08014940 	.word	0x08014940

08010b9c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b086      	sub	sp, #24
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	60f8      	str	r0, [r7, #12]
 8010ba4:	60b9      	str	r1, [r7, #8]
 8010ba6:	607a      	str	r2, [r7, #4]
 8010ba8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010baa:	8c3b      	ldrh	r3, [r7, #32]
 8010bac:	4618      	mov	r0, r3
 8010bae:	f7f6 f9c1 	bl	8006f34 <lwip_htons>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010bb6:	210e      	movs	r1, #14
 8010bb8:	68b8      	ldr	r0, [r7, #8]
 8010bba:	f7f7 fd1b 	bl	80085f4 <pbuf_add_header>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d125      	bne.n	8010c10 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010bc4:	68bb      	ldr	r3, [r7, #8]
 8010bc6:	685b      	ldr	r3, [r3, #4]
 8010bc8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010bca:	693b      	ldr	r3, [r7, #16]
 8010bcc:	8afa      	ldrh	r2, [r7, #22]
 8010bce:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010bd0:	693b      	ldr	r3, [r7, #16]
 8010bd2:	2206      	movs	r2, #6
 8010bd4:	6839      	ldr	r1, [r7, #0]
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f000 f85c 	bl	8010c94 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010bdc:	693b      	ldr	r3, [r7, #16]
 8010bde:	3306      	adds	r3, #6
 8010be0:	2206      	movs	r2, #6
 8010be2:	6879      	ldr	r1, [r7, #4]
 8010be4:	4618      	mov	r0, r3
 8010be6:	f000 f855 	bl	8010c94 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010bf0:	2b06      	cmp	r3, #6
 8010bf2:	d006      	beq.n	8010c02 <ethernet_output+0x66>
 8010bf4:	4b0a      	ldr	r3, [pc, #40]	; (8010c20 <ethernet_output+0x84>)
 8010bf6:	f44f 7299 	mov.w	r2, #306	; 0x132
 8010bfa:	490a      	ldr	r1, [pc, #40]	; (8010c24 <ethernet_output+0x88>)
 8010bfc:	480a      	ldr	r0, [pc, #40]	; (8010c28 <ethernet_output+0x8c>)
 8010bfe:	f000 f85f 	bl	8010cc0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	699b      	ldr	r3, [r3, #24]
 8010c06:	68b9      	ldr	r1, [r7, #8]
 8010c08:	68f8      	ldr	r0, [r7, #12]
 8010c0a:	4798      	blx	r3
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	e002      	b.n	8010c16 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010c10:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010c12:	f06f 0301 	mvn.w	r3, #1
}
 8010c16:	4618      	mov	r0, r3
 8010c18:	3718      	adds	r7, #24
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	bd80      	pop	{r7, pc}
 8010c1e:	bf00      	nop
 8010c20:	080147b4 	.word	0x080147b4
 8010c24:	080147ec 	.word	0x080147ec
 8010c28:	08014820 	.word	0x08014820

08010c2c <__libc_init_array>:
 8010c2c:	b570      	push	{r4, r5, r6, lr}
 8010c2e:	4d0d      	ldr	r5, [pc, #52]	; (8010c64 <__libc_init_array+0x38>)
 8010c30:	4c0d      	ldr	r4, [pc, #52]	; (8010c68 <__libc_init_array+0x3c>)
 8010c32:	1b64      	subs	r4, r4, r5
 8010c34:	10a4      	asrs	r4, r4, #2
 8010c36:	2600      	movs	r6, #0
 8010c38:	42a6      	cmp	r6, r4
 8010c3a:	d109      	bne.n	8010c50 <__libc_init_array+0x24>
 8010c3c:	4d0b      	ldr	r5, [pc, #44]	; (8010c6c <__libc_init_array+0x40>)
 8010c3e:	4c0c      	ldr	r4, [pc, #48]	; (8010c70 <__libc_init_array+0x44>)
 8010c40:	f001 f88e 	bl	8011d60 <_init>
 8010c44:	1b64      	subs	r4, r4, r5
 8010c46:	10a4      	asrs	r4, r4, #2
 8010c48:	2600      	movs	r6, #0
 8010c4a:	42a6      	cmp	r6, r4
 8010c4c:	d105      	bne.n	8010c5a <__libc_init_array+0x2e>
 8010c4e:	bd70      	pop	{r4, r5, r6, pc}
 8010c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c54:	4798      	blx	r3
 8010c56:	3601      	adds	r6, #1
 8010c58:	e7ee      	b.n	8010c38 <__libc_init_array+0xc>
 8010c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c5e:	4798      	blx	r3
 8010c60:	3601      	adds	r6, #1
 8010c62:	e7f2      	b.n	8010c4a <__libc_init_array+0x1e>
 8010c64:	08014aa0 	.word	0x08014aa0
 8010c68:	08014aa0 	.word	0x08014aa0
 8010c6c:	08014aa0 	.word	0x08014aa0
 8010c70:	08014aa4 	.word	0x08014aa4

08010c74 <memcmp>:
 8010c74:	b510      	push	{r4, lr}
 8010c76:	3901      	subs	r1, #1
 8010c78:	4402      	add	r2, r0
 8010c7a:	4290      	cmp	r0, r2
 8010c7c:	d101      	bne.n	8010c82 <memcmp+0xe>
 8010c7e:	2000      	movs	r0, #0
 8010c80:	e005      	b.n	8010c8e <memcmp+0x1a>
 8010c82:	7803      	ldrb	r3, [r0, #0]
 8010c84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010c88:	42a3      	cmp	r3, r4
 8010c8a:	d001      	beq.n	8010c90 <memcmp+0x1c>
 8010c8c:	1b18      	subs	r0, r3, r4
 8010c8e:	bd10      	pop	{r4, pc}
 8010c90:	3001      	adds	r0, #1
 8010c92:	e7f2      	b.n	8010c7a <memcmp+0x6>

08010c94 <memcpy>:
 8010c94:	440a      	add	r2, r1
 8010c96:	4291      	cmp	r1, r2
 8010c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8010c9c:	d100      	bne.n	8010ca0 <memcpy+0xc>
 8010c9e:	4770      	bx	lr
 8010ca0:	b510      	push	{r4, lr}
 8010ca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010ca6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010caa:	4291      	cmp	r1, r2
 8010cac:	d1f9      	bne.n	8010ca2 <memcpy+0xe>
 8010cae:	bd10      	pop	{r4, pc}

08010cb0 <memset>:
 8010cb0:	4402      	add	r2, r0
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	4293      	cmp	r3, r2
 8010cb6:	d100      	bne.n	8010cba <memset+0xa>
 8010cb8:	4770      	bx	lr
 8010cba:	f803 1b01 	strb.w	r1, [r3], #1
 8010cbe:	e7f9      	b.n	8010cb4 <memset+0x4>

08010cc0 <iprintf>:
 8010cc0:	b40f      	push	{r0, r1, r2, r3}
 8010cc2:	4b0a      	ldr	r3, [pc, #40]	; (8010cec <iprintf+0x2c>)
 8010cc4:	b513      	push	{r0, r1, r4, lr}
 8010cc6:	681c      	ldr	r4, [r3, #0]
 8010cc8:	b124      	cbz	r4, 8010cd4 <iprintf+0x14>
 8010cca:	69a3      	ldr	r3, [r4, #24]
 8010ccc:	b913      	cbnz	r3, 8010cd4 <iprintf+0x14>
 8010cce:	4620      	mov	r0, r4
 8010cd0:	f000 f8c2 	bl	8010e58 <__sinit>
 8010cd4:	ab05      	add	r3, sp, #20
 8010cd6:	9a04      	ldr	r2, [sp, #16]
 8010cd8:	68a1      	ldr	r1, [r4, #8]
 8010cda:	9301      	str	r3, [sp, #4]
 8010cdc:	4620      	mov	r0, r4
 8010cde:	f000 fa7f 	bl	80111e0 <_vfiprintf_r>
 8010ce2:	b002      	add	sp, #8
 8010ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ce8:	b004      	add	sp, #16
 8010cea:	4770      	bx	lr
 8010cec:	2000002c 	.word	0x2000002c

08010cf0 <rand>:
 8010cf0:	4b16      	ldr	r3, [pc, #88]	; (8010d4c <rand+0x5c>)
 8010cf2:	b510      	push	{r4, lr}
 8010cf4:	681c      	ldr	r4, [r3, #0]
 8010cf6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010cf8:	b9b3      	cbnz	r3, 8010d28 <rand+0x38>
 8010cfa:	2018      	movs	r0, #24
 8010cfc:	f000 f95e 	bl	8010fbc <malloc>
 8010d00:	63a0      	str	r0, [r4, #56]	; 0x38
 8010d02:	b928      	cbnz	r0, 8010d10 <rand+0x20>
 8010d04:	4602      	mov	r2, r0
 8010d06:	4b12      	ldr	r3, [pc, #72]	; (8010d50 <rand+0x60>)
 8010d08:	4812      	ldr	r0, [pc, #72]	; (8010d54 <rand+0x64>)
 8010d0a:	214e      	movs	r1, #78	; 0x4e
 8010d0c:	f000 f82e 	bl	8010d6c <__assert_func>
 8010d10:	4a11      	ldr	r2, [pc, #68]	; (8010d58 <rand+0x68>)
 8010d12:	4b12      	ldr	r3, [pc, #72]	; (8010d5c <rand+0x6c>)
 8010d14:	e9c0 2300 	strd	r2, r3, [r0]
 8010d18:	4b11      	ldr	r3, [pc, #68]	; (8010d60 <rand+0x70>)
 8010d1a:	6083      	str	r3, [r0, #8]
 8010d1c:	230b      	movs	r3, #11
 8010d1e:	8183      	strh	r3, [r0, #12]
 8010d20:	2201      	movs	r2, #1
 8010d22:	2300      	movs	r3, #0
 8010d24:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8010d28:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8010d2a:	4a0e      	ldr	r2, [pc, #56]	; (8010d64 <rand+0x74>)
 8010d2c:	6920      	ldr	r0, [r4, #16]
 8010d2e:	6963      	ldr	r3, [r4, #20]
 8010d30:	490d      	ldr	r1, [pc, #52]	; (8010d68 <rand+0x78>)
 8010d32:	4342      	muls	r2, r0
 8010d34:	fb01 2203 	mla	r2, r1, r3, r2
 8010d38:	fba0 0101 	umull	r0, r1, r0, r1
 8010d3c:	1c43      	adds	r3, r0, #1
 8010d3e:	eb42 0001 	adc.w	r0, r2, r1
 8010d42:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8010d46:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010d4a:	bd10      	pop	{r4, pc}
 8010d4c:	2000002c 	.word	0x2000002c
 8010d50:	08014954 	.word	0x08014954
 8010d54:	0801496b 	.word	0x0801496b
 8010d58:	abcd330e 	.word	0xabcd330e
 8010d5c:	e66d1234 	.word	0xe66d1234
 8010d60:	0005deec 	.word	0x0005deec
 8010d64:	5851f42d 	.word	0x5851f42d
 8010d68:	4c957f2d 	.word	0x4c957f2d

08010d6c <__assert_func>:
 8010d6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d6e:	4614      	mov	r4, r2
 8010d70:	461a      	mov	r2, r3
 8010d72:	4b09      	ldr	r3, [pc, #36]	; (8010d98 <__assert_func+0x2c>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	4605      	mov	r5, r0
 8010d78:	68d8      	ldr	r0, [r3, #12]
 8010d7a:	b14c      	cbz	r4, 8010d90 <__assert_func+0x24>
 8010d7c:	4b07      	ldr	r3, [pc, #28]	; (8010d9c <__assert_func+0x30>)
 8010d7e:	9100      	str	r1, [sp, #0]
 8010d80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d84:	4906      	ldr	r1, [pc, #24]	; (8010da0 <__assert_func+0x34>)
 8010d86:	462b      	mov	r3, r5
 8010d88:	f000 f8e4 	bl	8010f54 <fiprintf>
 8010d8c:	f000 fe12 	bl	80119b4 <abort>
 8010d90:	4b04      	ldr	r3, [pc, #16]	; (8010da4 <__assert_func+0x38>)
 8010d92:	461c      	mov	r4, r3
 8010d94:	e7f3      	b.n	8010d7e <__assert_func+0x12>
 8010d96:	bf00      	nop
 8010d98:	2000002c 	.word	0x2000002c
 8010d9c:	080149c6 	.word	0x080149c6
 8010da0:	080149d3 	.word	0x080149d3
 8010da4:	08014a01 	.word	0x08014a01

08010da8 <std>:
 8010da8:	2300      	movs	r3, #0
 8010daa:	b510      	push	{r4, lr}
 8010dac:	4604      	mov	r4, r0
 8010dae:	e9c0 3300 	strd	r3, r3, [r0]
 8010db2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010db6:	6083      	str	r3, [r0, #8]
 8010db8:	8181      	strh	r1, [r0, #12]
 8010dba:	6643      	str	r3, [r0, #100]	; 0x64
 8010dbc:	81c2      	strh	r2, [r0, #14]
 8010dbe:	6183      	str	r3, [r0, #24]
 8010dc0:	4619      	mov	r1, r3
 8010dc2:	2208      	movs	r2, #8
 8010dc4:	305c      	adds	r0, #92	; 0x5c
 8010dc6:	f7ff ff73 	bl	8010cb0 <memset>
 8010dca:	4b05      	ldr	r3, [pc, #20]	; (8010de0 <std+0x38>)
 8010dcc:	6263      	str	r3, [r4, #36]	; 0x24
 8010dce:	4b05      	ldr	r3, [pc, #20]	; (8010de4 <std+0x3c>)
 8010dd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8010dd2:	4b05      	ldr	r3, [pc, #20]	; (8010de8 <std+0x40>)
 8010dd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010dd6:	4b05      	ldr	r3, [pc, #20]	; (8010dec <std+0x44>)
 8010dd8:	6224      	str	r4, [r4, #32]
 8010dda:	6323      	str	r3, [r4, #48]	; 0x30
 8010ddc:	bd10      	pop	{r4, pc}
 8010dde:	bf00      	nop
 8010de0:	08011789 	.word	0x08011789
 8010de4:	080117ab 	.word	0x080117ab
 8010de8:	080117e3 	.word	0x080117e3
 8010dec:	08011807 	.word	0x08011807

08010df0 <_cleanup_r>:
 8010df0:	4901      	ldr	r1, [pc, #4]	; (8010df8 <_cleanup_r+0x8>)
 8010df2:	f000 b8c1 	b.w	8010f78 <_fwalk_reent>
 8010df6:	bf00      	nop
 8010df8:	08011af1 	.word	0x08011af1

08010dfc <__sfmoreglue>:
 8010dfc:	b570      	push	{r4, r5, r6, lr}
 8010dfe:	2268      	movs	r2, #104	; 0x68
 8010e00:	1e4d      	subs	r5, r1, #1
 8010e02:	4355      	muls	r5, r2
 8010e04:	460e      	mov	r6, r1
 8010e06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010e0a:	f000 f94b 	bl	80110a4 <_malloc_r>
 8010e0e:	4604      	mov	r4, r0
 8010e10:	b140      	cbz	r0, 8010e24 <__sfmoreglue+0x28>
 8010e12:	2100      	movs	r1, #0
 8010e14:	e9c0 1600 	strd	r1, r6, [r0]
 8010e18:	300c      	adds	r0, #12
 8010e1a:	60a0      	str	r0, [r4, #8]
 8010e1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010e20:	f7ff ff46 	bl	8010cb0 <memset>
 8010e24:	4620      	mov	r0, r4
 8010e26:	bd70      	pop	{r4, r5, r6, pc}

08010e28 <__sfp_lock_acquire>:
 8010e28:	4801      	ldr	r0, [pc, #4]	; (8010e30 <__sfp_lock_acquire+0x8>)
 8010e2a:	f000 b8c5 	b.w	8010fb8 <__retarget_lock_acquire_recursive>
 8010e2e:	bf00      	nop
 8010e30:	200080ad 	.word	0x200080ad

08010e34 <__sfp_lock_release>:
 8010e34:	4801      	ldr	r0, [pc, #4]	; (8010e3c <__sfp_lock_release+0x8>)
 8010e36:	f000 b8c0 	b.w	8010fba <__retarget_lock_release_recursive>
 8010e3a:	bf00      	nop
 8010e3c:	200080ad 	.word	0x200080ad

08010e40 <__sinit_lock_acquire>:
 8010e40:	4801      	ldr	r0, [pc, #4]	; (8010e48 <__sinit_lock_acquire+0x8>)
 8010e42:	f000 b8b9 	b.w	8010fb8 <__retarget_lock_acquire_recursive>
 8010e46:	bf00      	nop
 8010e48:	200080ae 	.word	0x200080ae

08010e4c <__sinit_lock_release>:
 8010e4c:	4801      	ldr	r0, [pc, #4]	; (8010e54 <__sinit_lock_release+0x8>)
 8010e4e:	f000 b8b4 	b.w	8010fba <__retarget_lock_release_recursive>
 8010e52:	bf00      	nop
 8010e54:	200080ae 	.word	0x200080ae

08010e58 <__sinit>:
 8010e58:	b510      	push	{r4, lr}
 8010e5a:	4604      	mov	r4, r0
 8010e5c:	f7ff fff0 	bl	8010e40 <__sinit_lock_acquire>
 8010e60:	69a3      	ldr	r3, [r4, #24]
 8010e62:	b11b      	cbz	r3, 8010e6c <__sinit+0x14>
 8010e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e68:	f7ff bff0 	b.w	8010e4c <__sinit_lock_release>
 8010e6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010e70:	6523      	str	r3, [r4, #80]	; 0x50
 8010e72:	4b13      	ldr	r3, [pc, #76]	; (8010ec0 <__sinit+0x68>)
 8010e74:	4a13      	ldr	r2, [pc, #76]	; (8010ec4 <__sinit+0x6c>)
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	62a2      	str	r2, [r4, #40]	; 0x28
 8010e7a:	42a3      	cmp	r3, r4
 8010e7c:	bf04      	itt	eq
 8010e7e:	2301      	moveq	r3, #1
 8010e80:	61a3      	streq	r3, [r4, #24]
 8010e82:	4620      	mov	r0, r4
 8010e84:	f000 f820 	bl	8010ec8 <__sfp>
 8010e88:	6060      	str	r0, [r4, #4]
 8010e8a:	4620      	mov	r0, r4
 8010e8c:	f000 f81c 	bl	8010ec8 <__sfp>
 8010e90:	60a0      	str	r0, [r4, #8]
 8010e92:	4620      	mov	r0, r4
 8010e94:	f000 f818 	bl	8010ec8 <__sfp>
 8010e98:	2200      	movs	r2, #0
 8010e9a:	60e0      	str	r0, [r4, #12]
 8010e9c:	2104      	movs	r1, #4
 8010e9e:	6860      	ldr	r0, [r4, #4]
 8010ea0:	f7ff ff82 	bl	8010da8 <std>
 8010ea4:	68a0      	ldr	r0, [r4, #8]
 8010ea6:	2201      	movs	r2, #1
 8010ea8:	2109      	movs	r1, #9
 8010eaa:	f7ff ff7d 	bl	8010da8 <std>
 8010eae:	68e0      	ldr	r0, [r4, #12]
 8010eb0:	2202      	movs	r2, #2
 8010eb2:	2112      	movs	r1, #18
 8010eb4:	f7ff ff78 	bl	8010da8 <std>
 8010eb8:	2301      	movs	r3, #1
 8010eba:	61a3      	str	r3, [r4, #24]
 8010ebc:	e7d2      	b.n	8010e64 <__sinit+0xc>
 8010ebe:	bf00      	nop
 8010ec0:	08014950 	.word	0x08014950
 8010ec4:	08010df1 	.word	0x08010df1

08010ec8 <__sfp>:
 8010ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eca:	4607      	mov	r7, r0
 8010ecc:	f7ff ffac 	bl	8010e28 <__sfp_lock_acquire>
 8010ed0:	4b1e      	ldr	r3, [pc, #120]	; (8010f4c <__sfp+0x84>)
 8010ed2:	681e      	ldr	r6, [r3, #0]
 8010ed4:	69b3      	ldr	r3, [r6, #24]
 8010ed6:	b913      	cbnz	r3, 8010ede <__sfp+0x16>
 8010ed8:	4630      	mov	r0, r6
 8010eda:	f7ff ffbd 	bl	8010e58 <__sinit>
 8010ede:	3648      	adds	r6, #72	; 0x48
 8010ee0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010ee4:	3b01      	subs	r3, #1
 8010ee6:	d503      	bpl.n	8010ef0 <__sfp+0x28>
 8010ee8:	6833      	ldr	r3, [r6, #0]
 8010eea:	b30b      	cbz	r3, 8010f30 <__sfp+0x68>
 8010eec:	6836      	ldr	r6, [r6, #0]
 8010eee:	e7f7      	b.n	8010ee0 <__sfp+0x18>
 8010ef0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010ef4:	b9d5      	cbnz	r5, 8010f2c <__sfp+0x64>
 8010ef6:	4b16      	ldr	r3, [pc, #88]	; (8010f50 <__sfp+0x88>)
 8010ef8:	60e3      	str	r3, [r4, #12]
 8010efa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010efe:	6665      	str	r5, [r4, #100]	; 0x64
 8010f00:	f000 f859 	bl	8010fb6 <__retarget_lock_init_recursive>
 8010f04:	f7ff ff96 	bl	8010e34 <__sfp_lock_release>
 8010f08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010f0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010f10:	6025      	str	r5, [r4, #0]
 8010f12:	61a5      	str	r5, [r4, #24]
 8010f14:	2208      	movs	r2, #8
 8010f16:	4629      	mov	r1, r5
 8010f18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010f1c:	f7ff fec8 	bl	8010cb0 <memset>
 8010f20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010f24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010f28:	4620      	mov	r0, r4
 8010f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f2c:	3468      	adds	r4, #104	; 0x68
 8010f2e:	e7d9      	b.n	8010ee4 <__sfp+0x1c>
 8010f30:	2104      	movs	r1, #4
 8010f32:	4638      	mov	r0, r7
 8010f34:	f7ff ff62 	bl	8010dfc <__sfmoreglue>
 8010f38:	4604      	mov	r4, r0
 8010f3a:	6030      	str	r0, [r6, #0]
 8010f3c:	2800      	cmp	r0, #0
 8010f3e:	d1d5      	bne.n	8010eec <__sfp+0x24>
 8010f40:	f7ff ff78 	bl	8010e34 <__sfp_lock_release>
 8010f44:	230c      	movs	r3, #12
 8010f46:	603b      	str	r3, [r7, #0]
 8010f48:	e7ee      	b.n	8010f28 <__sfp+0x60>
 8010f4a:	bf00      	nop
 8010f4c:	08014950 	.word	0x08014950
 8010f50:	ffff0001 	.word	0xffff0001

08010f54 <fiprintf>:
 8010f54:	b40e      	push	{r1, r2, r3}
 8010f56:	b503      	push	{r0, r1, lr}
 8010f58:	4601      	mov	r1, r0
 8010f5a:	ab03      	add	r3, sp, #12
 8010f5c:	4805      	ldr	r0, [pc, #20]	; (8010f74 <fiprintf+0x20>)
 8010f5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f62:	6800      	ldr	r0, [r0, #0]
 8010f64:	9301      	str	r3, [sp, #4]
 8010f66:	f000 f93b 	bl	80111e0 <_vfiprintf_r>
 8010f6a:	b002      	add	sp, #8
 8010f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f70:	b003      	add	sp, #12
 8010f72:	4770      	bx	lr
 8010f74:	2000002c 	.word	0x2000002c

08010f78 <_fwalk_reent>:
 8010f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f7c:	4606      	mov	r6, r0
 8010f7e:	4688      	mov	r8, r1
 8010f80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010f84:	2700      	movs	r7, #0
 8010f86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010f8a:	f1b9 0901 	subs.w	r9, r9, #1
 8010f8e:	d505      	bpl.n	8010f9c <_fwalk_reent+0x24>
 8010f90:	6824      	ldr	r4, [r4, #0]
 8010f92:	2c00      	cmp	r4, #0
 8010f94:	d1f7      	bne.n	8010f86 <_fwalk_reent+0xe>
 8010f96:	4638      	mov	r0, r7
 8010f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f9c:	89ab      	ldrh	r3, [r5, #12]
 8010f9e:	2b01      	cmp	r3, #1
 8010fa0:	d907      	bls.n	8010fb2 <_fwalk_reent+0x3a>
 8010fa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010fa6:	3301      	adds	r3, #1
 8010fa8:	d003      	beq.n	8010fb2 <_fwalk_reent+0x3a>
 8010faa:	4629      	mov	r1, r5
 8010fac:	4630      	mov	r0, r6
 8010fae:	47c0      	blx	r8
 8010fb0:	4307      	orrs	r7, r0
 8010fb2:	3568      	adds	r5, #104	; 0x68
 8010fb4:	e7e9      	b.n	8010f8a <_fwalk_reent+0x12>

08010fb6 <__retarget_lock_init_recursive>:
 8010fb6:	4770      	bx	lr

08010fb8 <__retarget_lock_acquire_recursive>:
 8010fb8:	4770      	bx	lr

08010fba <__retarget_lock_release_recursive>:
 8010fba:	4770      	bx	lr

08010fbc <malloc>:
 8010fbc:	4b02      	ldr	r3, [pc, #8]	; (8010fc8 <malloc+0xc>)
 8010fbe:	4601      	mov	r1, r0
 8010fc0:	6818      	ldr	r0, [r3, #0]
 8010fc2:	f000 b86f 	b.w	80110a4 <_malloc_r>
 8010fc6:	bf00      	nop
 8010fc8:	2000002c 	.word	0x2000002c

08010fcc <_free_r>:
 8010fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010fce:	2900      	cmp	r1, #0
 8010fd0:	d044      	beq.n	801105c <_free_r+0x90>
 8010fd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010fd6:	9001      	str	r0, [sp, #4]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	f1a1 0404 	sub.w	r4, r1, #4
 8010fde:	bfb8      	it	lt
 8010fe0:	18e4      	addlt	r4, r4, r3
 8010fe2:	f000 fe39 	bl	8011c58 <__malloc_lock>
 8010fe6:	4a1e      	ldr	r2, [pc, #120]	; (8011060 <_free_r+0x94>)
 8010fe8:	9801      	ldr	r0, [sp, #4]
 8010fea:	6813      	ldr	r3, [r2, #0]
 8010fec:	b933      	cbnz	r3, 8010ffc <_free_r+0x30>
 8010fee:	6063      	str	r3, [r4, #4]
 8010ff0:	6014      	str	r4, [r2, #0]
 8010ff2:	b003      	add	sp, #12
 8010ff4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010ff8:	f000 be34 	b.w	8011c64 <__malloc_unlock>
 8010ffc:	42a3      	cmp	r3, r4
 8010ffe:	d908      	bls.n	8011012 <_free_r+0x46>
 8011000:	6825      	ldr	r5, [r4, #0]
 8011002:	1961      	adds	r1, r4, r5
 8011004:	428b      	cmp	r3, r1
 8011006:	bf01      	itttt	eq
 8011008:	6819      	ldreq	r1, [r3, #0]
 801100a:	685b      	ldreq	r3, [r3, #4]
 801100c:	1949      	addeq	r1, r1, r5
 801100e:	6021      	streq	r1, [r4, #0]
 8011010:	e7ed      	b.n	8010fee <_free_r+0x22>
 8011012:	461a      	mov	r2, r3
 8011014:	685b      	ldr	r3, [r3, #4]
 8011016:	b10b      	cbz	r3, 801101c <_free_r+0x50>
 8011018:	42a3      	cmp	r3, r4
 801101a:	d9fa      	bls.n	8011012 <_free_r+0x46>
 801101c:	6811      	ldr	r1, [r2, #0]
 801101e:	1855      	adds	r5, r2, r1
 8011020:	42a5      	cmp	r5, r4
 8011022:	d10b      	bne.n	801103c <_free_r+0x70>
 8011024:	6824      	ldr	r4, [r4, #0]
 8011026:	4421      	add	r1, r4
 8011028:	1854      	adds	r4, r2, r1
 801102a:	42a3      	cmp	r3, r4
 801102c:	6011      	str	r1, [r2, #0]
 801102e:	d1e0      	bne.n	8010ff2 <_free_r+0x26>
 8011030:	681c      	ldr	r4, [r3, #0]
 8011032:	685b      	ldr	r3, [r3, #4]
 8011034:	6053      	str	r3, [r2, #4]
 8011036:	4421      	add	r1, r4
 8011038:	6011      	str	r1, [r2, #0]
 801103a:	e7da      	b.n	8010ff2 <_free_r+0x26>
 801103c:	d902      	bls.n	8011044 <_free_r+0x78>
 801103e:	230c      	movs	r3, #12
 8011040:	6003      	str	r3, [r0, #0]
 8011042:	e7d6      	b.n	8010ff2 <_free_r+0x26>
 8011044:	6825      	ldr	r5, [r4, #0]
 8011046:	1961      	adds	r1, r4, r5
 8011048:	428b      	cmp	r3, r1
 801104a:	bf04      	itt	eq
 801104c:	6819      	ldreq	r1, [r3, #0]
 801104e:	685b      	ldreq	r3, [r3, #4]
 8011050:	6063      	str	r3, [r4, #4]
 8011052:	bf04      	itt	eq
 8011054:	1949      	addeq	r1, r1, r5
 8011056:	6021      	streq	r1, [r4, #0]
 8011058:	6054      	str	r4, [r2, #4]
 801105a:	e7ca      	b.n	8010ff2 <_free_r+0x26>
 801105c:	b003      	add	sp, #12
 801105e:	bd30      	pop	{r4, r5, pc}
 8011060:	200080b0 	.word	0x200080b0

08011064 <sbrk_aligned>:
 8011064:	b570      	push	{r4, r5, r6, lr}
 8011066:	4e0e      	ldr	r6, [pc, #56]	; (80110a0 <sbrk_aligned+0x3c>)
 8011068:	460c      	mov	r4, r1
 801106a:	6831      	ldr	r1, [r6, #0]
 801106c:	4605      	mov	r5, r0
 801106e:	b911      	cbnz	r1, 8011076 <sbrk_aligned+0x12>
 8011070:	f000 fb7a 	bl	8011768 <_sbrk_r>
 8011074:	6030      	str	r0, [r6, #0]
 8011076:	4621      	mov	r1, r4
 8011078:	4628      	mov	r0, r5
 801107a:	f000 fb75 	bl	8011768 <_sbrk_r>
 801107e:	1c43      	adds	r3, r0, #1
 8011080:	d00a      	beq.n	8011098 <sbrk_aligned+0x34>
 8011082:	1cc4      	adds	r4, r0, #3
 8011084:	f024 0403 	bic.w	r4, r4, #3
 8011088:	42a0      	cmp	r0, r4
 801108a:	d007      	beq.n	801109c <sbrk_aligned+0x38>
 801108c:	1a21      	subs	r1, r4, r0
 801108e:	4628      	mov	r0, r5
 8011090:	f000 fb6a 	bl	8011768 <_sbrk_r>
 8011094:	3001      	adds	r0, #1
 8011096:	d101      	bne.n	801109c <sbrk_aligned+0x38>
 8011098:	f04f 34ff 	mov.w	r4, #4294967295
 801109c:	4620      	mov	r0, r4
 801109e:	bd70      	pop	{r4, r5, r6, pc}
 80110a0:	200080b4 	.word	0x200080b4

080110a4 <_malloc_r>:
 80110a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110a8:	1ccd      	adds	r5, r1, #3
 80110aa:	f025 0503 	bic.w	r5, r5, #3
 80110ae:	3508      	adds	r5, #8
 80110b0:	2d0c      	cmp	r5, #12
 80110b2:	bf38      	it	cc
 80110b4:	250c      	movcc	r5, #12
 80110b6:	2d00      	cmp	r5, #0
 80110b8:	4607      	mov	r7, r0
 80110ba:	db01      	blt.n	80110c0 <_malloc_r+0x1c>
 80110bc:	42a9      	cmp	r1, r5
 80110be:	d905      	bls.n	80110cc <_malloc_r+0x28>
 80110c0:	230c      	movs	r3, #12
 80110c2:	603b      	str	r3, [r7, #0]
 80110c4:	2600      	movs	r6, #0
 80110c6:	4630      	mov	r0, r6
 80110c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110cc:	4e2e      	ldr	r6, [pc, #184]	; (8011188 <_malloc_r+0xe4>)
 80110ce:	f000 fdc3 	bl	8011c58 <__malloc_lock>
 80110d2:	6833      	ldr	r3, [r6, #0]
 80110d4:	461c      	mov	r4, r3
 80110d6:	bb34      	cbnz	r4, 8011126 <_malloc_r+0x82>
 80110d8:	4629      	mov	r1, r5
 80110da:	4638      	mov	r0, r7
 80110dc:	f7ff ffc2 	bl	8011064 <sbrk_aligned>
 80110e0:	1c43      	adds	r3, r0, #1
 80110e2:	4604      	mov	r4, r0
 80110e4:	d14d      	bne.n	8011182 <_malloc_r+0xde>
 80110e6:	6834      	ldr	r4, [r6, #0]
 80110e8:	4626      	mov	r6, r4
 80110ea:	2e00      	cmp	r6, #0
 80110ec:	d140      	bne.n	8011170 <_malloc_r+0xcc>
 80110ee:	6823      	ldr	r3, [r4, #0]
 80110f0:	4631      	mov	r1, r6
 80110f2:	4638      	mov	r0, r7
 80110f4:	eb04 0803 	add.w	r8, r4, r3
 80110f8:	f000 fb36 	bl	8011768 <_sbrk_r>
 80110fc:	4580      	cmp	r8, r0
 80110fe:	d13a      	bne.n	8011176 <_malloc_r+0xd2>
 8011100:	6821      	ldr	r1, [r4, #0]
 8011102:	3503      	adds	r5, #3
 8011104:	1a6d      	subs	r5, r5, r1
 8011106:	f025 0503 	bic.w	r5, r5, #3
 801110a:	3508      	adds	r5, #8
 801110c:	2d0c      	cmp	r5, #12
 801110e:	bf38      	it	cc
 8011110:	250c      	movcc	r5, #12
 8011112:	4629      	mov	r1, r5
 8011114:	4638      	mov	r0, r7
 8011116:	f7ff ffa5 	bl	8011064 <sbrk_aligned>
 801111a:	3001      	adds	r0, #1
 801111c:	d02b      	beq.n	8011176 <_malloc_r+0xd2>
 801111e:	6823      	ldr	r3, [r4, #0]
 8011120:	442b      	add	r3, r5
 8011122:	6023      	str	r3, [r4, #0]
 8011124:	e00e      	b.n	8011144 <_malloc_r+0xa0>
 8011126:	6822      	ldr	r2, [r4, #0]
 8011128:	1b52      	subs	r2, r2, r5
 801112a:	d41e      	bmi.n	801116a <_malloc_r+0xc6>
 801112c:	2a0b      	cmp	r2, #11
 801112e:	d916      	bls.n	801115e <_malloc_r+0xba>
 8011130:	1961      	adds	r1, r4, r5
 8011132:	42a3      	cmp	r3, r4
 8011134:	6025      	str	r5, [r4, #0]
 8011136:	bf18      	it	ne
 8011138:	6059      	strne	r1, [r3, #4]
 801113a:	6863      	ldr	r3, [r4, #4]
 801113c:	bf08      	it	eq
 801113e:	6031      	streq	r1, [r6, #0]
 8011140:	5162      	str	r2, [r4, r5]
 8011142:	604b      	str	r3, [r1, #4]
 8011144:	4638      	mov	r0, r7
 8011146:	f104 060b 	add.w	r6, r4, #11
 801114a:	f000 fd8b 	bl	8011c64 <__malloc_unlock>
 801114e:	f026 0607 	bic.w	r6, r6, #7
 8011152:	1d23      	adds	r3, r4, #4
 8011154:	1af2      	subs	r2, r6, r3
 8011156:	d0b6      	beq.n	80110c6 <_malloc_r+0x22>
 8011158:	1b9b      	subs	r3, r3, r6
 801115a:	50a3      	str	r3, [r4, r2]
 801115c:	e7b3      	b.n	80110c6 <_malloc_r+0x22>
 801115e:	6862      	ldr	r2, [r4, #4]
 8011160:	42a3      	cmp	r3, r4
 8011162:	bf0c      	ite	eq
 8011164:	6032      	streq	r2, [r6, #0]
 8011166:	605a      	strne	r2, [r3, #4]
 8011168:	e7ec      	b.n	8011144 <_malloc_r+0xa0>
 801116a:	4623      	mov	r3, r4
 801116c:	6864      	ldr	r4, [r4, #4]
 801116e:	e7b2      	b.n	80110d6 <_malloc_r+0x32>
 8011170:	4634      	mov	r4, r6
 8011172:	6876      	ldr	r6, [r6, #4]
 8011174:	e7b9      	b.n	80110ea <_malloc_r+0x46>
 8011176:	230c      	movs	r3, #12
 8011178:	603b      	str	r3, [r7, #0]
 801117a:	4638      	mov	r0, r7
 801117c:	f000 fd72 	bl	8011c64 <__malloc_unlock>
 8011180:	e7a1      	b.n	80110c6 <_malloc_r+0x22>
 8011182:	6025      	str	r5, [r4, #0]
 8011184:	e7de      	b.n	8011144 <_malloc_r+0xa0>
 8011186:	bf00      	nop
 8011188:	200080b0 	.word	0x200080b0

0801118c <__sfputc_r>:
 801118c:	6893      	ldr	r3, [r2, #8]
 801118e:	3b01      	subs	r3, #1
 8011190:	2b00      	cmp	r3, #0
 8011192:	b410      	push	{r4}
 8011194:	6093      	str	r3, [r2, #8]
 8011196:	da08      	bge.n	80111aa <__sfputc_r+0x1e>
 8011198:	6994      	ldr	r4, [r2, #24]
 801119a:	42a3      	cmp	r3, r4
 801119c:	db01      	blt.n	80111a2 <__sfputc_r+0x16>
 801119e:	290a      	cmp	r1, #10
 80111a0:	d103      	bne.n	80111aa <__sfputc_r+0x1e>
 80111a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111a6:	f000 bb33 	b.w	8011810 <__swbuf_r>
 80111aa:	6813      	ldr	r3, [r2, #0]
 80111ac:	1c58      	adds	r0, r3, #1
 80111ae:	6010      	str	r0, [r2, #0]
 80111b0:	7019      	strb	r1, [r3, #0]
 80111b2:	4608      	mov	r0, r1
 80111b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111b8:	4770      	bx	lr

080111ba <__sfputs_r>:
 80111ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111bc:	4606      	mov	r6, r0
 80111be:	460f      	mov	r7, r1
 80111c0:	4614      	mov	r4, r2
 80111c2:	18d5      	adds	r5, r2, r3
 80111c4:	42ac      	cmp	r4, r5
 80111c6:	d101      	bne.n	80111cc <__sfputs_r+0x12>
 80111c8:	2000      	movs	r0, #0
 80111ca:	e007      	b.n	80111dc <__sfputs_r+0x22>
 80111cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111d0:	463a      	mov	r2, r7
 80111d2:	4630      	mov	r0, r6
 80111d4:	f7ff ffda 	bl	801118c <__sfputc_r>
 80111d8:	1c43      	adds	r3, r0, #1
 80111da:	d1f3      	bne.n	80111c4 <__sfputs_r+0xa>
 80111dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080111e0 <_vfiprintf_r>:
 80111e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111e4:	460d      	mov	r5, r1
 80111e6:	b09d      	sub	sp, #116	; 0x74
 80111e8:	4614      	mov	r4, r2
 80111ea:	4698      	mov	r8, r3
 80111ec:	4606      	mov	r6, r0
 80111ee:	b118      	cbz	r0, 80111f8 <_vfiprintf_r+0x18>
 80111f0:	6983      	ldr	r3, [r0, #24]
 80111f2:	b90b      	cbnz	r3, 80111f8 <_vfiprintf_r+0x18>
 80111f4:	f7ff fe30 	bl	8010e58 <__sinit>
 80111f8:	4b89      	ldr	r3, [pc, #548]	; (8011420 <_vfiprintf_r+0x240>)
 80111fa:	429d      	cmp	r5, r3
 80111fc:	d11b      	bne.n	8011236 <_vfiprintf_r+0x56>
 80111fe:	6875      	ldr	r5, [r6, #4]
 8011200:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011202:	07d9      	lsls	r1, r3, #31
 8011204:	d405      	bmi.n	8011212 <_vfiprintf_r+0x32>
 8011206:	89ab      	ldrh	r3, [r5, #12]
 8011208:	059a      	lsls	r2, r3, #22
 801120a:	d402      	bmi.n	8011212 <_vfiprintf_r+0x32>
 801120c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801120e:	f7ff fed3 	bl	8010fb8 <__retarget_lock_acquire_recursive>
 8011212:	89ab      	ldrh	r3, [r5, #12]
 8011214:	071b      	lsls	r3, r3, #28
 8011216:	d501      	bpl.n	801121c <_vfiprintf_r+0x3c>
 8011218:	692b      	ldr	r3, [r5, #16]
 801121a:	b9eb      	cbnz	r3, 8011258 <_vfiprintf_r+0x78>
 801121c:	4629      	mov	r1, r5
 801121e:	4630      	mov	r0, r6
 8011220:	f000 fb5a 	bl	80118d8 <__swsetup_r>
 8011224:	b1c0      	cbz	r0, 8011258 <_vfiprintf_r+0x78>
 8011226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011228:	07dc      	lsls	r4, r3, #31
 801122a:	d50e      	bpl.n	801124a <_vfiprintf_r+0x6a>
 801122c:	f04f 30ff 	mov.w	r0, #4294967295
 8011230:	b01d      	add	sp, #116	; 0x74
 8011232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011236:	4b7b      	ldr	r3, [pc, #492]	; (8011424 <_vfiprintf_r+0x244>)
 8011238:	429d      	cmp	r5, r3
 801123a:	d101      	bne.n	8011240 <_vfiprintf_r+0x60>
 801123c:	68b5      	ldr	r5, [r6, #8]
 801123e:	e7df      	b.n	8011200 <_vfiprintf_r+0x20>
 8011240:	4b79      	ldr	r3, [pc, #484]	; (8011428 <_vfiprintf_r+0x248>)
 8011242:	429d      	cmp	r5, r3
 8011244:	bf08      	it	eq
 8011246:	68f5      	ldreq	r5, [r6, #12]
 8011248:	e7da      	b.n	8011200 <_vfiprintf_r+0x20>
 801124a:	89ab      	ldrh	r3, [r5, #12]
 801124c:	0598      	lsls	r0, r3, #22
 801124e:	d4ed      	bmi.n	801122c <_vfiprintf_r+0x4c>
 8011250:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011252:	f7ff feb2 	bl	8010fba <__retarget_lock_release_recursive>
 8011256:	e7e9      	b.n	801122c <_vfiprintf_r+0x4c>
 8011258:	2300      	movs	r3, #0
 801125a:	9309      	str	r3, [sp, #36]	; 0x24
 801125c:	2320      	movs	r3, #32
 801125e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011262:	f8cd 800c 	str.w	r8, [sp, #12]
 8011266:	2330      	movs	r3, #48	; 0x30
 8011268:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801142c <_vfiprintf_r+0x24c>
 801126c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011270:	f04f 0901 	mov.w	r9, #1
 8011274:	4623      	mov	r3, r4
 8011276:	469a      	mov	sl, r3
 8011278:	f813 2b01 	ldrb.w	r2, [r3], #1
 801127c:	b10a      	cbz	r2, 8011282 <_vfiprintf_r+0xa2>
 801127e:	2a25      	cmp	r2, #37	; 0x25
 8011280:	d1f9      	bne.n	8011276 <_vfiprintf_r+0x96>
 8011282:	ebba 0b04 	subs.w	fp, sl, r4
 8011286:	d00b      	beq.n	80112a0 <_vfiprintf_r+0xc0>
 8011288:	465b      	mov	r3, fp
 801128a:	4622      	mov	r2, r4
 801128c:	4629      	mov	r1, r5
 801128e:	4630      	mov	r0, r6
 8011290:	f7ff ff93 	bl	80111ba <__sfputs_r>
 8011294:	3001      	adds	r0, #1
 8011296:	f000 80aa 	beq.w	80113ee <_vfiprintf_r+0x20e>
 801129a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801129c:	445a      	add	r2, fp
 801129e:	9209      	str	r2, [sp, #36]	; 0x24
 80112a0:	f89a 3000 	ldrb.w	r3, [sl]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	f000 80a2 	beq.w	80113ee <_vfiprintf_r+0x20e>
 80112aa:	2300      	movs	r3, #0
 80112ac:	f04f 32ff 	mov.w	r2, #4294967295
 80112b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80112b4:	f10a 0a01 	add.w	sl, sl, #1
 80112b8:	9304      	str	r3, [sp, #16]
 80112ba:	9307      	str	r3, [sp, #28]
 80112bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80112c0:	931a      	str	r3, [sp, #104]	; 0x68
 80112c2:	4654      	mov	r4, sl
 80112c4:	2205      	movs	r2, #5
 80112c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112ca:	4858      	ldr	r0, [pc, #352]	; (801142c <_vfiprintf_r+0x24c>)
 80112cc:	f7ee ff80 	bl	80001d0 <memchr>
 80112d0:	9a04      	ldr	r2, [sp, #16]
 80112d2:	b9d8      	cbnz	r0, 801130c <_vfiprintf_r+0x12c>
 80112d4:	06d1      	lsls	r1, r2, #27
 80112d6:	bf44      	itt	mi
 80112d8:	2320      	movmi	r3, #32
 80112da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80112de:	0713      	lsls	r3, r2, #28
 80112e0:	bf44      	itt	mi
 80112e2:	232b      	movmi	r3, #43	; 0x2b
 80112e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80112e8:	f89a 3000 	ldrb.w	r3, [sl]
 80112ec:	2b2a      	cmp	r3, #42	; 0x2a
 80112ee:	d015      	beq.n	801131c <_vfiprintf_r+0x13c>
 80112f0:	9a07      	ldr	r2, [sp, #28]
 80112f2:	4654      	mov	r4, sl
 80112f4:	2000      	movs	r0, #0
 80112f6:	f04f 0c0a 	mov.w	ip, #10
 80112fa:	4621      	mov	r1, r4
 80112fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011300:	3b30      	subs	r3, #48	; 0x30
 8011302:	2b09      	cmp	r3, #9
 8011304:	d94e      	bls.n	80113a4 <_vfiprintf_r+0x1c4>
 8011306:	b1b0      	cbz	r0, 8011336 <_vfiprintf_r+0x156>
 8011308:	9207      	str	r2, [sp, #28]
 801130a:	e014      	b.n	8011336 <_vfiprintf_r+0x156>
 801130c:	eba0 0308 	sub.w	r3, r0, r8
 8011310:	fa09 f303 	lsl.w	r3, r9, r3
 8011314:	4313      	orrs	r3, r2
 8011316:	9304      	str	r3, [sp, #16]
 8011318:	46a2      	mov	sl, r4
 801131a:	e7d2      	b.n	80112c2 <_vfiprintf_r+0xe2>
 801131c:	9b03      	ldr	r3, [sp, #12]
 801131e:	1d19      	adds	r1, r3, #4
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	9103      	str	r1, [sp, #12]
 8011324:	2b00      	cmp	r3, #0
 8011326:	bfbb      	ittet	lt
 8011328:	425b      	neglt	r3, r3
 801132a:	f042 0202 	orrlt.w	r2, r2, #2
 801132e:	9307      	strge	r3, [sp, #28]
 8011330:	9307      	strlt	r3, [sp, #28]
 8011332:	bfb8      	it	lt
 8011334:	9204      	strlt	r2, [sp, #16]
 8011336:	7823      	ldrb	r3, [r4, #0]
 8011338:	2b2e      	cmp	r3, #46	; 0x2e
 801133a:	d10c      	bne.n	8011356 <_vfiprintf_r+0x176>
 801133c:	7863      	ldrb	r3, [r4, #1]
 801133e:	2b2a      	cmp	r3, #42	; 0x2a
 8011340:	d135      	bne.n	80113ae <_vfiprintf_r+0x1ce>
 8011342:	9b03      	ldr	r3, [sp, #12]
 8011344:	1d1a      	adds	r2, r3, #4
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	9203      	str	r2, [sp, #12]
 801134a:	2b00      	cmp	r3, #0
 801134c:	bfb8      	it	lt
 801134e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011352:	3402      	adds	r4, #2
 8011354:	9305      	str	r3, [sp, #20]
 8011356:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801143c <_vfiprintf_r+0x25c>
 801135a:	7821      	ldrb	r1, [r4, #0]
 801135c:	2203      	movs	r2, #3
 801135e:	4650      	mov	r0, sl
 8011360:	f7ee ff36 	bl	80001d0 <memchr>
 8011364:	b140      	cbz	r0, 8011378 <_vfiprintf_r+0x198>
 8011366:	2340      	movs	r3, #64	; 0x40
 8011368:	eba0 000a 	sub.w	r0, r0, sl
 801136c:	fa03 f000 	lsl.w	r0, r3, r0
 8011370:	9b04      	ldr	r3, [sp, #16]
 8011372:	4303      	orrs	r3, r0
 8011374:	3401      	adds	r4, #1
 8011376:	9304      	str	r3, [sp, #16]
 8011378:	f814 1b01 	ldrb.w	r1, [r4], #1
 801137c:	482c      	ldr	r0, [pc, #176]	; (8011430 <_vfiprintf_r+0x250>)
 801137e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011382:	2206      	movs	r2, #6
 8011384:	f7ee ff24 	bl	80001d0 <memchr>
 8011388:	2800      	cmp	r0, #0
 801138a:	d03f      	beq.n	801140c <_vfiprintf_r+0x22c>
 801138c:	4b29      	ldr	r3, [pc, #164]	; (8011434 <_vfiprintf_r+0x254>)
 801138e:	bb1b      	cbnz	r3, 80113d8 <_vfiprintf_r+0x1f8>
 8011390:	9b03      	ldr	r3, [sp, #12]
 8011392:	3307      	adds	r3, #7
 8011394:	f023 0307 	bic.w	r3, r3, #7
 8011398:	3308      	adds	r3, #8
 801139a:	9303      	str	r3, [sp, #12]
 801139c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801139e:	443b      	add	r3, r7
 80113a0:	9309      	str	r3, [sp, #36]	; 0x24
 80113a2:	e767      	b.n	8011274 <_vfiprintf_r+0x94>
 80113a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80113a8:	460c      	mov	r4, r1
 80113aa:	2001      	movs	r0, #1
 80113ac:	e7a5      	b.n	80112fa <_vfiprintf_r+0x11a>
 80113ae:	2300      	movs	r3, #0
 80113b0:	3401      	adds	r4, #1
 80113b2:	9305      	str	r3, [sp, #20]
 80113b4:	4619      	mov	r1, r3
 80113b6:	f04f 0c0a 	mov.w	ip, #10
 80113ba:	4620      	mov	r0, r4
 80113bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80113c0:	3a30      	subs	r2, #48	; 0x30
 80113c2:	2a09      	cmp	r2, #9
 80113c4:	d903      	bls.n	80113ce <_vfiprintf_r+0x1ee>
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d0c5      	beq.n	8011356 <_vfiprintf_r+0x176>
 80113ca:	9105      	str	r1, [sp, #20]
 80113cc:	e7c3      	b.n	8011356 <_vfiprintf_r+0x176>
 80113ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80113d2:	4604      	mov	r4, r0
 80113d4:	2301      	movs	r3, #1
 80113d6:	e7f0      	b.n	80113ba <_vfiprintf_r+0x1da>
 80113d8:	ab03      	add	r3, sp, #12
 80113da:	9300      	str	r3, [sp, #0]
 80113dc:	462a      	mov	r2, r5
 80113de:	4b16      	ldr	r3, [pc, #88]	; (8011438 <_vfiprintf_r+0x258>)
 80113e0:	a904      	add	r1, sp, #16
 80113e2:	4630      	mov	r0, r6
 80113e4:	f3af 8000 	nop.w
 80113e8:	4607      	mov	r7, r0
 80113ea:	1c78      	adds	r0, r7, #1
 80113ec:	d1d6      	bne.n	801139c <_vfiprintf_r+0x1bc>
 80113ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80113f0:	07d9      	lsls	r1, r3, #31
 80113f2:	d405      	bmi.n	8011400 <_vfiprintf_r+0x220>
 80113f4:	89ab      	ldrh	r3, [r5, #12]
 80113f6:	059a      	lsls	r2, r3, #22
 80113f8:	d402      	bmi.n	8011400 <_vfiprintf_r+0x220>
 80113fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80113fc:	f7ff fddd 	bl	8010fba <__retarget_lock_release_recursive>
 8011400:	89ab      	ldrh	r3, [r5, #12]
 8011402:	065b      	lsls	r3, r3, #25
 8011404:	f53f af12 	bmi.w	801122c <_vfiprintf_r+0x4c>
 8011408:	9809      	ldr	r0, [sp, #36]	; 0x24
 801140a:	e711      	b.n	8011230 <_vfiprintf_r+0x50>
 801140c:	ab03      	add	r3, sp, #12
 801140e:	9300      	str	r3, [sp, #0]
 8011410:	462a      	mov	r2, r5
 8011412:	4b09      	ldr	r3, [pc, #36]	; (8011438 <_vfiprintf_r+0x258>)
 8011414:	a904      	add	r1, sp, #16
 8011416:	4630      	mov	r0, r6
 8011418:	f000 f880 	bl	801151c <_printf_i>
 801141c:	e7e4      	b.n	80113e8 <_vfiprintf_r+0x208>
 801141e:	bf00      	nop
 8011420:	08014a24 	.word	0x08014a24
 8011424:	08014a44 	.word	0x08014a44
 8011428:	08014a04 	.word	0x08014a04
 801142c:	08014a64 	.word	0x08014a64
 8011430:	08014a6e 	.word	0x08014a6e
 8011434:	00000000 	.word	0x00000000
 8011438:	080111bb 	.word	0x080111bb
 801143c:	08014a6a 	.word	0x08014a6a

08011440 <_printf_common>:
 8011440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011444:	4616      	mov	r6, r2
 8011446:	4699      	mov	r9, r3
 8011448:	688a      	ldr	r2, [r1, #8]
 801144a:	690b      	ldr	r3, [r1, #16]
 801144c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011450:	4293      	cmp	r3, r2
 8011452:	bfb8      	it	lt
 8011454:	4613      	movlt	r3, r2
 8011456:	6033      	str	r3, [r6, #0]
 8011458:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801145c:	4607      	mov	r7, r0
 801145e:	460c      	mov	r4, r1
 8011460:	b10a      	cbz	r2, 8011466 <_printf_common+0x26>
 8011462:	3301      	adds	r3, #1
 8011464:	6033      	str	r3, [r6, #0]
 8011466:	6823      	ldr	r3, [r4, #0]
 8011468:	0699      	lsls	r1, r3, #26
 801146a:	bf42      	ittt	mi
 801146c:	6833      	ldrmi	r3, [r6, #0]
 801146e:	3302      	addmi	r3, #2
 8011470:	6033      	strmi	r3, [r6, #0]
 8011472:	6825      	ldr	r5, [r4, #0]
 8011474:	f015 0506 	ands.w	r5, r5, #6
 8011478:	d106      	bne.n	8011488 <_printf_common+0x48>
 801147a:	f104 0a19 	add.w	sl, r4, #25
 801147e:	68e3      	ldr	r3, [r4, #12]
 8011480:	6832      	ldr	r2, [r6, #0]
 8011482:	1a9b      	subs	r3, r3, r2
 8011484:	42ab      	cmp	r3, r5
 8011486:	dc26      	bgt.n	80114d6 <_printf_common+0x96>
 8011488:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801148c:	1e13      	subs	r3, r2, #0
 801148e:	6822      	ldr	r2, [r4, #0]
 8011490:	bf18      	it	ne
 8011492:	2301      	movne	r3, #1
 8011494:	0692      	lsls	r2, r2, #26
 8011496:	d42b      	bmi.n	80114f0 <_printf_common+0xb0>
 8011498:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801149c:	4649      	mov	r1, r9
 801149e:	4638      	mov	r0, r7
 80114a0:	47c0      	blx	r8
 80114a2:	3001      	adds	r0, #1
 80114a4:	d01e      	beq.n	80114e4 <_printf_common+0xa4>
 80114a6:	6823      	ldr	r3, [r4, #0]
 80114a8:	68e5      	ldr	r5, [r4, #12]
 80114aa:	6832      	ldr	r2, [r6, #0]
 80114ac:	f003 0306 	and.w	r3, r3, #6
 80114b0:	2b04      	cmp	r3, #4
 80114b2:	bf08      	it	eq
 80114b4:	1aad      	subeq	r5, r5, r2
 80114b6:	68a3      	ldr	r3, [r4, #8]
 80114b8:	6922      	ldr	r2, [r4, #16]
 80114ba:	bf0c      	ite	eq
 80114bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80114c0:	2500      	movne	r5, #0
 80114c2:	4293      	cmp	r3, r2
 80114c4:	bfc4      	itt	gt
 80114c6:	1a9b      	subgt	r3, r3, r2
 80114c8:	18ed      	addgt	r5, r5, r3
 80114ca:	2600      	movs	r6, #0
 80114cc:	341a      	adds	r4, #26
 80114ce:	42b5      	cmp	r5, r6
 80114d0:	d11a      	bne.n	8011508 <_printf_common+0xc8>
 80114d2:	2000      	movs	r0, #0
 80114d4:	e008      	b.n	80114e8 <_printf_common+0xa8>
 80114d6:	2301      	movs	r3, #1
 80114d8:	4652      	mov	r2, sl
 80114da:	4649      	mov	r1, r9
 80114dc:	4638      	mov	r0, r7
 80114de:	47c0      	blx	r8
 80114e0:	3001      	adds	r0, #1
 80114e2:	d103      	bne.n	80114ec <_printf_common+0xac>
 80114e4:	f04f 30ff 	mov.w	r0, #4294967295
 80114e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114ec:	3501      	adds	r5, #1
 80114ee:	e7c6      	b.n	801147e <_printf_common+0x3e>
 80114f0:	18e1      	adds	r1, r4, r3
 80114f2:	1c5a      	adds	r2, r3, #1
 80114f4:	2030      	movs	r0, #48	; 0x30
 80114f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80114fa:	4422      	add	r2, r4
 80114fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011500:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011504:	3302      	adds	r3, #2
 8011506:	e7c7      	b.n	8011498 <_printf_common+0x58>
 8011508:	2301      	movs	r3, #1
 801150a:	4622      	mov	r2, r4
 801150c:	4649      	mov	r1, r9
 801150e:	4638      	mov	r0, r7
 8011510:	47c0      	blx	r8
 8011512:	3001      	adds	r0, #1
 8011514:	d0e6      	beq.n	80114e4 <_printf_common+0xa4>
 8011516:	3601      	adds	r6, #1
 8011518:	e7d9      	b.n	80114ce <_printf_common+0x8e>
	...

0801151c <_printf_i>:
 801151c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011520:	7e0f      	ldrb	r7, [r1, #24]
 8011522:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011524:	2f78      	cmp	r7, #120	; 0x78
 8011526:	4691      	mov	r9, r2
 8011528:	4680      	mov	r8, r0
 801152a:	460c      	mov	r4, r1
 801152c:	469a      	mov	sl, r3
 801152e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011532:	d807      	bhi.n	8011544 <_printf_i+0x28>
 8011534:	2f62      	cmp	r7, #98	; 0x62
 8011536:	d80a      	bhi.n	801154e <_printf_i+0x32>
 8011538:	2f00      	cmp	r7, #0
 801153a:	f000 80d8 	beq.w	80116ee <_printf_i+0x1d2>
 801153e:	2f58      	cmp	r7, #88	; 0x58
 8011540:	f000 80a3 	beq.w	801168a <_printf_i+0x16e>
 8011544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011548:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801154c:	e03a      	b.n	80115c4 <_printf_i+0xa8>
 801154e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011552:	2b15      	cmp	r3, #21
 8011554:	d8f6      	bhi.n	8011544 <_printf_i+0x28>
 8011556:	a101      	add	r1, pc, #4	; (adr r1, 801155c <_printf_i+0x40>)
 8011558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801155c:	080115b5 	.word	0x080115b5
 8011560:	080115c9 	.word	0x080115c9
 8011564:	08011545 	.word	0x08011545
 8011568:	08011545 	.word	0x08011545
 801156c:	08011545 	.word	0x08011545
 8011570:	08011545 	.word	0x08011545
 8011574:	080115c9 	.word	0x080115c9
 8011578:	08011545 	.word	0x08011545
 801157c:	08011545 	.word	0x08011545
 8011580:	08011545 	.word	0x08011545
 8011584:	08011545 	.word	0x08011545
 8011588:	080116d5 	.word	0x080116d5
 801158c:	080115f9 	.word	0x080115f9
 8011590:	080116b7 	.word	0x080116b7
 8011594:	08011545 	.word	0x08011545
 8011598:	08011545 	.word	0x08011545
 801159c:	080116f7 	.word	0x080116f7
 80115a0:	08011545 	.word	0x08011545
 80115a4:	080115f9 	.word	0x080115f9
 80115a8:	08011545 	.word	0x08011545
 80115ac:	08011545 	.word	0x08011545
 80115b0:	080116bf 	.word	0x080116bf
 80115b4:	682b      	ldr	r3, [r5, #0]
 80115b6:	1d1a      	adds	r2, r3, #4
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	602a      	str	r2, [r5, #0]
 80115bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80115c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80115c4:	2301      	movs	r3, #1
 80115c6:	e0a3      	b.n	8011710 <_printf_i+0x1f4>
 80115c8:	6820      	ldr	r0, [r4, #0]
 80115ca:	6829      	ldr	r1, [r5, #0]
 80115cc:	0606      	lsls	r6, r0, #24
 80115ce:	f101 0304 	add.w	r3, r1, #4
 80115d2:	d50a      	bpl.n	80115ea <_printf_i+0xce>
 80115d4:	680e      	ldr	r6, [r1, #0]
 80115d6:	602b      	str	r3, [r5, #0]
 80115d8:	2e00      	cmp	r6, #0
 80115da:	da03      	bge.n	80115e4 <_printf_i+0xc8>
 80115dc:	232d      	movs	r3, #45	; 0x2d
 80115de:	4276      	negs	r6, r6
 80115e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80115e4:	485e      	ldr	r0, [pc, #376]	; (8011760 <_printf_i+0x244>)
 80115e6:	230a      	movs	r3, #10
 80115e8:	e019      	b.n	801161e <_printf_i+0x102>
 80115ea:	680e      	ldr	r6, [r1, #0]
 80115ec:	602b      	str	r3, [r5, #0]
 80115ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80115f2:	bf18      	it	ne
 80115f4:	b236      	sxthne	r6, r6
 80115f6:	e7ef      	b.n	80115d8 <_printf_i+0xbc>
 80115f8:	682b      	ldr	r3, [r5, #0]
 80115fa:	6820      	ldr	r0, [r4, #0]
 80115fc:	1d19      	adds	r1, r3, #4
 80115fe:	6029      	str	r1, [r5, #0]
 8011600:	0601      	lsls	r1, r0, #24
 8011602:	d501      	bpl.n	8011608 <_printf_i+0xec>
 8011604:	681e      	ldr	r6, [r3, #0]
 8011606:	e002      	b.n	801160e <_printf_i+0xf2>
 8011608:	0646      	lsls	r6, r0, #25
 801160a:	d5fb      	bpl.n	8011604 <_printf_i+0xe8>
 801160c:	881e      	ldrh	r6, [r3, #0]
 801160e:	4854      	ldr	r0, [pc, #336]	; (8011760 <_printf_i+0x244>)
 8011610:	2f6f      	cmp	r7, #111	; 0x6f
 8011612:	bf0c      	ite	eq
 8011614:	2308      	moveq	r3, #8
 8011616:	230a      	movne	r3, #10
 8011618:	2100      	movs	r1, #0
 801161a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801161e:	6865      	ldr	r5, [r4, #4]
 8011620:	60a5      	str	r5, [r4, #8]
 8011622:	2d00      	cmp	r5, #0
 8011624:	bfa2      	ittt	ge
 8011626:	6821      	ldrge	r1, [r4, #0]
 8011628:	f021 0104 	bicge.w	r1, r1, #4
 801162c:	6021      	strge	r1, [r4, #0]
 801162e:	b90e      	cbnz	r6, 8011634 <_printf_i+0x118>
 8011630:	2d00      	cmp	r5, #0
 8011632:	d04d      	beq.n	80116d0 <_printf_i+0x1b4>
 8011634:	4615      	mov	r5, r2
 8011636:	fbb6 f1f3 	udiv	r1, r6, r3
 801163a:	fb03 6711 	mls	r7, r3, r1, r6
 801163e:	5dc7      	ldrb	r7, [r0, r7]
 8011640:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011644:	4637      	mov	r7, r6
 8011646:	42bb      	cmp	r3, r7
 8011648:	460e      	mov	r6, r1
 801164a:	d9f4      	bls.n	8011636 <_printf_i+0x11a>
 801164c:	2b08      	cmp	r3, #8
 801164e:	d10b      	bne.n	8011668 <_printf_i+0x14c>
 8011650:	6823      	ldr	r3, [r4, #0]
 8011652:	07de      	lsls	r6, r3, #31
 8011654:	d508      	bpl.n	8011668 <_printf_i+0x14c>
 8011656:	6923      	ldr	r3, [r4, #16]
 8011658:	6861      	ldr	r1, [r4, #4]
 801165a:	4299      	cmp	r1, r3
 801165c:	bfde      	ittt	le
 801165e:	2330      	movle	r3, #48	; 0x30
 8011660:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011664:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011668:	1b52      	subs	r2, r2, r5
 801166a:	6122      	str	r2, [r4, #16]
 801166c:	f8cd a000 	str.w	sl, [sp]
 8011670:	464b      	mov	r3, r9
 8011672:	aa03      	add	r2, sp, #12
 8011674:	4621      	mov	r1, r4
 8011676:	4640      	mov	r0, r8
 8011678:	f7ff fee2 	bl	8011440 <_printf_common>
 801167c:	3001      	adds	r0, #1
 801167e:	d14c      	bne.n	801171a <_printf_i+0x1fe>
 8011680:	f04f 30ff 	mov.w	r0, #4294967295
 8011684:	b004      	add	sp, #16
 8011686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801168a:	4835      	ldr	r0, [pc, #212]	; (8011760 <_printf_i+0x244>)
 801168c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011690:	6829      	ldr	r1, [r5, #0]
 8011692:	6823      	ldr	r3, [r4, #0]
 8011694:	f851 6b04 	ldr.w	r6, [r1], #4
 8011698:	6029      	str	r1, [r5, #0]
 801169a:	061d      	lsls	r5, r3, #24
 801169c:	d514      	bpl.n	80116c8 <_printf_i+0x1ac>
 801169e:	07df      	lsls	r7, r3, #31
 80116a0:	bf44      	itt	mi
 80116a2:	f043 0320 	orrmi.w	r3, r3, #32
 80116a6:	6023      	strmi	r3, [r4, #0]
 80116a8:	b91e      	cbnz	r6, 80116b2 <_printf_i+0x196>
 80116aa:	6823      	ldr	r3, [r4, #0]
 80116ac:	f023 0320 	bic.w	r3, r3, #32
 80116b0:	6023      	str	r3, [r4, #0]
 80116b2:	2310      	movs	r3, #16
 80116b4:	e7b0      	b.n	8011618 <_printf_i+0xfc>
 80116b6:	6823      	ldr	r3, [r4, #0]
 80116b8:	f043 0320 	orr.w	r3, r3, #32
 80116bc:	6023      	str	r3, [r4, #0]
 80116be:	2378      	movs	r3, #120	; 0x78
 80116c0:	4828      	ldr	r0, [pc, #160]	; (8011764 <_printf_i+0x248>)
 80116c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80116c6:	e7e3      	b.n	8011690 <_printf_i+0x174>
 80116c8:	0659      	lsls	r1, r3, #25
 80116ca:	bf48      	it	mi
 80116cc:	b2b6      	uxthmi	r6, r6
 80116ce:	e7e6      	b.n	801169e <_printf_i+0x182>
 80116d0:	4615      	mov	r5, r2
 80116d2:	e7bb      	b.n	801164c <_printf_i+0x130>
 80116d4:	682b      	ldr	r3, [r5, #0]
 80116d6:	6826      	ldr	r6, [r4, #0]
 80116d8:	6961      	ldr	r1, [r4, #20]
 80116da:	1d18      	adds	r0, r3, #4
 80116dc:	6028      	str	r0, [r5, #0]
 80116de:	0635      	lsls	r5, r6, #24
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	d501      	bpl.n	80116e8 <_printf_i+0x1cc>
 80116e4:	6019      	str	r1, [r3, #0]
 80116e6:	e002      	b.n	80116ee <_printf_i+0x1d2>
 80116e8:	0670      	lsls	r0, r6, #25
 80116ea:	d5fb      	bpl.n	80116e4 <_printf_i+0x1c8>
 80116ec:	8019      	strh	r1, [r3, #0]
 80116ee:	2300      	movs	r3, #0
 80116f0:	6123      	str	r3, [r4, #16]
 80116f2:	4615      	mov	r5, r2
 80116f4:	e7ba      	b.n	801166c <_printf_i+0x150>
 80116f6:	682b      	ldr	r3, [r5, #0]
 80116f8:	1d1a      	adds	r2, r3, #4
 80116fa:	602a      	str	r2, [r5, #0]
 80116fc:	681d      	ldr	r5, [r3, #0]
 80116fe:	6862      	ldr	r2, [r4, #4]
 8011700:	2100      	movs	r1, #0
 8011702:	4628      	mov	r0, r5
 8011704:	f7ee fd64 	bl	80001d0 <memchr>
 8011708:	b108      	cbz	r0, 801170e <_printf_i+0x1f2>
 801170a:	1b40      	subs	r0, r0, r5
 801170c:	6060      	str	r0, [r4, #4]
 801170e:	6863      	ldr	r3, [r4, #4]
 8011710:	6123      	str	r3, [r4, #16]
 8011712:	2300      	movs	r3, #0
 8011714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011718:	e7a8      	b.n	801166c <_printf_i+0x150>
 801171a:	6923      	ldr	r3, [r4, #16]
 801171c:	462a      	mov	r2, r5
 801171e:	4649      	mov	r1, r9
 8011720:	4640      	mov	r0, r8
 8011722:	47d0      	blx	sl
 8011724:	3001      	adds	r0, #1
 8011726:	d0ab      	beq.n	8011680 <_printf_i+0x164>
 8011728:	6823      	ldr	r3, [r4, #0]
 801172a:	079b      	lsls	r3, r3, #30
 801172c:	d413      	bmi.n	8011756 <_printf_i+0x23a>
 801172e:	68e0      	ldr	r0, [r4, #12]
 8011730:	9b03      	ldr	r3, [sp, #12]
 8011732:	4298      	cmp	r0, r3
 8011734:	bfb8      	it	lt
 8011736:	4618      	movlt	r0, r3
 8011738:	e7a4      	b.n	8011684 <_printf_i+0x168>
 801173a:	2301      	movs	r3, #1
 801173c:	4632      	mov	r2, r6
 801173e:	4649      	mov	r1, r9
 8011740:	4640      	mov	r0, r8
 8011742:	47d0      	blx	sl
 8011744:	3001      	adds	r0, #1
 8011746:	d09b      	beq.n	8011680 <_printf_i+0x164>
 8011748:	3501      	adds	r5, #1
 801174a:	68e3      	ldr	r3, [r4, #12]
 801174c:	9903      	ldr	r1, [sp, #12]
 801174e:	1a5b      	subs	r3, r3, r1
 8011750:	42ab      	cmp	r3, r5
 8011752:	dcf2      	bgt.n	801173a <_printf_i+0x21e>
 8011754:	e7eb      	b.n	801172e <_printf_i+0x212>
 8011756:	2500      	movs	r5, #0
 8011758:	f104 0619 	add.w	r6, r4, #25
 801175c:	e7f5      	b.n	801174a <_printf_i+0x22e>
 801175e:	bf00      	nop
 8011760:	08014a75 	.word	0x08014a75
 8011764:	08014a86 	.word	0x08014a86

08011768 <_sbrk_r>:
 8011768:	b538      	push	{r3, r4, r5, lr}
 801176a:	4d06      	ldr	r5, [pc, #24]	; (8011784 <_sbrk_r+0x1c>)
 801176c:	2300      	movs	r3, #0
 801176e:	4604      	mov	r4, r0
 8011770:	4608      	mov	r0, r1
 8011772:	602b      	str	r3, [r5, #0]
 8011774:	f7f0 fbc0 	bl	8001ef8 <_sbrk>
 8011778:	1c43      	adds	r3, r0, #1
 801177a:	d102      	bne.n	8011782 <_sbrk_r+0x1a>
 801177c:	682b      	ldr	r3, [r5, #0]
 801177e:	b103      	cbz	r3, 8011782 <_sbrk_r+0x1a>
 8011780:	6023      	str	r3, [r4, #0]
 8011782:	bd38      	pop	{r3, r4, r5, pc}
 8011784:	200080a8 	.word	0x200080a8

08011788 <__sread>:
 8011788:	b510      	push	{r4, lr}
 801178a:	460c      	mov	r4, r1
 801178c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011790:	f000 fa6e 	bl	8011c70 <_read_r>
 8011794:	2800      	cmp	r0, #0
 8011796:	bfab      	itete	ge
 8011798:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801179a:	89a3      	ldrhlt	r3, [r4, #12]
 801179c:	181b      	addge	r3, r3, r0
 801179e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80117a2:	bfac      	ite	ge
 80117a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80117a6:	81a3      	strhlt	r3, [r4, #12]
 80117a8:	bd10      	pop	{r4, pc}

080117aa <__swrite>:
 80117aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117ae:	461f      	mov	r7, r3
 80117b0:	898b      	ldrh	r3, [r1, #12]
 80117b2:	05db      	lsls	r3, r3, #23
 80117b4:	4605      	mov	r5, r0
 80117b6:	460c      	mov	r4, r1
 80117b8:	4616      	mov	r6, r2
 80117ba:	d505      	bpl.n	80117c8 <__swrite+0x1e>
 80117bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117c0:	2302      	movs	r3, #2
 80117c2:	2200      	movs	r2, #0
 80117c4:	f000 f9d0 	bl	8011b68 <_lseek_r>
 80117c8:	89a3      	ldrh	r3, [r4, #12]
 80117ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80117ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80117d2:	81a3      	strh	r3, [r4, #12]
 80117d4:	4632      	mov	r2, r6
 80117d6:	463b      	mov	r3, r7
 80117d8:	4628      	mov	r0, r5
 80117da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117de:	f000 b869 	b.w	80118b4 <_write_r>

080117e2 <__sseek>:
 80117e2:	b510      	push	{r4, lr}
 80117e4:	460c      	mov	r4, r1
 80117e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117ea:	f000 f9bd 	bl	8011b68 <_lseek_r>
 80117ee:	1c43      	adds	r3, r0, #1
 80117f0:	89a3      	ldrh	r3, [r4, #12]
 80117f2:	bf15      	itete	ne
 80117f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80117f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80117fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80117fe:	81a3      	strheq	r3, [r4, #12]
 8011800:	bf18      	it	ne
 8011802:	81a3      	strhne	r3, [r4, #12]
 8011804:	bd10      	pop	{r4, pc}

08011806 <__sclose>:
 8011806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801180a:	f000 b8db 	b.w	80119c4 <_close_r>
	...

08011810 <__swbuf_r>:
 8011810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011812:	460e      	mov	r6, r1
 8011814:	4614      	mov	r4, r2
 8011816:	4605      	mov	r5, r0
 8011818:	b118      	cbz	r0, 8011822 <__swbuf_r+0x12>
 801181a:	6983      	ldr	r3, [r0, #24]
 801181c:	b90b      	cbnz	r3, 8011822 <__swbuf_r+0x12>
 801181e:	f7ff fb1b 	bl	8010e58 <__sinit>
 8011822:	4b21      	ldr	r3, [pc, #132]	; (80118a8 <__swbuf_r+0x98>)
 8011824:	429c      	cmp	r4, r3
 8011826:	d12b      	bne.n	8011880 <__swbuf_r+0x70>
 8011828:	686c      	ldr	r4, [r5, #4]
 801182a:	69a3      	ldr	r3, [r4, #24]
 801182c:	60a3      	str	r3, [r4, #8]
 801182e:	89a3      	ldrh	r3, [r4, #12]
 8011830:	071a      	lsls	r2, r3, #28
 8011832:	d52f      	bpl.n	8011894 <__swbuf_r+0x84>
 8011834:	6923      	ldr	r3, [r4, #16]
 8011836:	b36b      	cbz	r3, 8011894 <__swbuf_r+0x84>
 8011838:	6923      	ldr	r3, [r4, #16]
 801183a:	6820      	ldr	r0, [r4, #0]
 801183c:	1ac0      	subs	r0, r0, r3
 801183e:	6963      	ldr	r3, [r4, #20]
 8011840:	b2f6      	uxtb	r6, r6
 8011842:	4283      	cmp	r3, r0
 8011844:	4637      	mov	r7, r6
 8011846:	dc04      	bgt.n	8011852 <__swbuf_r+0x42>
 8011848:	4621      	mov	r1, r4
 801184a:	4628      	mov	r0, r5
 801184c:	f000 f950 	bl	8011af0 <_fflush_r>
 8011850:	bb30      	cbnz	r0, 80118a0 <__swbuf_r+0x90>
 8011852:	68a3      	ldr	r3, [r4, #8]
 8011854:	3b01      	subs	r3, #1
 8011856:	60a3      	str	r3, [r4, #8]
 8011858:	6823      	ldr	r3, [r4, #0]
 801185a:	1c5a      	adds	r2, r3, #1
 801185c:	6022      	str	r2, [r4, #0]
 801185e:	701e      	strb	r6, [r3, #0]
 8011860:	6963      	ldr	r3, [r4, #20]
 8011862:	3001      	adds	r0, #1
 8011864:	4283      	cmp	r3, r0
 8011866:	d004      	beq.n	8011872 <__swbuf_r+0x62>
 8011868:	89a3      	ldrh	r3, [r4, #12]
 801186a:	07db      	lsls	r3, r3, #31
 801186c:	d506      	bpl.n	801187c <__swbuf_r+0x6c>
 801186e:	2e0a      	cmp	r6, #10
 8011870:	d104      	bne.n	801187c <__swbuf_r+0x6c>
 8011872:	4621      	mov	r1, r4
 8011874:	4628      	mov	r0, r5
 8011876:	f000 f93b 	bl	8011af0 <_fflush_r>
 801187a:	b988      	cbnz	r0, 80118a0 <__swbuf_r+0x90>
 801187c:	4638      	mov	r0, r7
 801187e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011880:	4b0a      	ldr	r3, [pc, #40]	; (80118ac <__swbuf_r+0x9c>)
 8011882:	429c      	cmp	r4, r3
 8011884:	d101      	bne.n	801188a <__swbuf_r+0x7a>
 8011886:	68ac      	ldr	r4, [r5, #8]
 8011888:	e7cf      	b.n	801182a <__swbuf_r+0x1a>
 801188a:	4b09      	ldr	r3, [pc, #36]	; (80118b0 <__swbuf_r+0xa0>)
 801188c:	429c      	cmp	r4, r3
 801188e:	bf08      	it	eq
 8011890:	68ec      	ldreq	r4, [r5, #12]
 8011892:	e7ca      	b.n	801182a <__swbuf_r+0x1a>
 8011894:	4621      	mov	r1, r4
 8011896:	4628      	mov	r0, r5
 8011898:	f000 f81e 	bl	80118d8 <__swsetup_r>
 801189c:	2800      	cmp	r0, #0
 801189e:	d0cb      	beq.n	8011838 <__swbuf_r+0x28>
 80118a0:	f04f 37ff 	mov.w	r7, #4294967295
 80118a4:	e7ea      	b.n	801187c <__swbuf_r+0x6c>
 80118a6:	bf00      	nop
 80118a8:	08014a24 	.word	0x08014a24
 80118ac:	08014a44 	.word	0x08014a44
 80118b0:	08014a04 	.word	0x08014a04

080118b4 <_write_r>:
 80118b4:	b538      	push	{r3, r4, r5, lr}
 80118b6:	4d07      	ldr	r5, [pc, #28]	; (80118d4 <_write_r+0x20>)
 80118b8:	4604      	mov	r4, r0
 80118ba:	4608      	mov	r0, r1
 80118bc:	4611      	mov	r1, r2
 80118be:	2200      	movs	r2, #0
 80118c0:	602a      	str	r2, [r5, #0]
 80118c2:	461a      	mov	r2, r3
 80118c4:	f7f0 fac7 	bl	8001e56 <_write>
 80118c8:	1c43      	adds	r3, r0, #1
 80118ca:	d102      	bne.n	80118d2 <_write_r+0x1e>
 80118cc:	682b      	ldr	r3, [r5, #0]
 80118ce:	b103      	cbz	r3, 80118d2 <_write_r+0x1e>
 80118d0:	6023      	str	r3, [r4, #0]
 80118d2:	bd38      	pop	{r3, r4, r5, pc}
 80118d4:	200080a8 	.word	0x200080a8

080118d8 <__swsetup_r>:
 80118d8:	4b32      	ldr	r3, [pc, #200]	; (80119a4 <__swsetup_r+0xcc>)
 80118da:	b570      	push	{r4, r5, r6, lr}
 80118dc:	681d      	ldr	r5, [r3, #0]
 80118de:	4606      	mov	r6, r0
 80118e0:	460c      	mov	r4, r1
 80118e2:	b125      	cbz	r5, 80118ee <__swsetup_r+0x16>
 80118e4:	69ab      	ldr	r3, [r5, #24]
 80118e6:	b913      	cbnz	r3, 80118ee <__swsetup_r+0x16>
 80118e8:	4628      	mov	r0, r5
 80118ea:	f7ff fab5 	bl	8010e58 <__sinit>
 80118ee:	4b2e      	ldr	r3, [pc, #184]	; (80119a8 <__swsetup_r+0xd0>)
 80118f0:	429c      	cmp	r4, r3
 80118f2:	d10f      	bne.n	8011914 <__swsetup_r+0x3c>
 80118f4:	686c      	ldr	r4, [r5, #4]
 80118f6:	89a3      	ldrh	r3, [r4, #12]
 80118f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80118fc:	0719      	lsls	r1, r3, #28
 80118fe:	d42c      	bmi.n	801195a <__swsetup_r+0x82>
 8011900:	06dd      	lsls	r5, r3, #27
 8011902:	d411      	bmi.n	8011928 <__swsetup_r+0x50>
 8011904:	2309      	movs	r3, #9
 8011906:	6033      	str	r3, [r6, #0]
 8011908:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801190c:	81a3      	strh	r3, [r4, #12]
 801190e:	f04f 30ff 	mov.w	r0, #4294967295
 8011912:	e03e      	b.n	8011992 <__swsetup_r+0xba>
 8011914:	4b25      	ldr	r3, [pc, #148]	; (80119ac <__swsetup_r+0xd4>)
 8011916:	429c      	cmp	r4, r3
 8011918:	d101      	bne.n	801191e <__swsetup_r+0x46>
 801191a:	68ac      	ldr	r4, [r5, #8]
 801191c:	e7eb      	b.n	80118f6 <__swsetup_r+0x1e>
 801191e:	4b24      	ldr	r3, [pc, #144]	; (80119b0 <__swsetup_r+0xd8>)
 8011920:	429c      	cmp	r4, r3
 8011922:	bf08      	it	eq
 8011924:	68ec      	ldreq	r4, [r5, #12]
 8011926:	e7e6      	b.n	80118f6 <__swsetup_r+0x1e>
 8011928:	0758      	lsls	r0, r3, #29
 801192a:	d512      	bpl.n	8011952 <__swsetup_r+0x7a>
 801192c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801192e:	b141      	cbz	r1, 8011942 <__swsetup_r+0x6a>
 8011930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011934:	4299      	cmp	r1, r3
 8011936:	d002      	beq.n	801193e <__swsetup_r+0x66>
 8011938:	4630      	mov	r0, r6
 801193a:	f7ff fb47 	bl	8010fcc <_free_r>
 801193e:	2300      	movs	r3, #0
 8011940:	6363      	str	r3, [r4, #52]	; 0x34
 8011942:	89a3      	ldrh	r3, [r4, #12]
 8011944:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011948:	81a3      	strh	r3, [r4, #12]
 801194a:	2300      	movs	r3, #0
 801194c:	6063      	str	r3, [r4, #4]
 801194e:	6923      	ldr	r3, [r4, #16]
 8011950:	6023      	str	r3, [r4, #0]
 8011952:	89a3      	ldrh	r3, [r4, #12]
 8011954:	f043 0308 	orr.w	r3, r3, #8
 8011958:	81a3      	strh	r3, [r4, #12]
 801195a:	6923      	ldr	r3, [r4, #16]
 801195c:	b94b      	cbnz	r3, 8011972 <__swsetup_r+0x9a>
 801195e:	89a3      	ldrh	r3, [r4, #12]
 8011960:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011968:	d003      	beq.n	8011972 <__swsetup_r+0x9a>
 801196a:	4621      	mov	r1, r4
 801196c:	4630      	mov	r0, r6
 801196e:	f000 f933 	bl	8011bd8 <__smakebuf_r>
 8011972:	89a0      	ldrh	r0, [r4, #12]
 8011974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011978:	f010 0301 	ands.w	r3, r0, #1
 801197c:	d00a      	beq.n	8011994 <__swsetup_r+0xbc>
 801197e:	2300      	movs	r3, #0
 8011980:	60a3      	str	r3, [r4, #8]
 8011982:	6963      	ldr	r3, [r4, #20]
 8011984:	425b      	negs	r3, r3
 8011986:	61a3      	str	r3, [r4, #24]
 8011988:	6923      	ldr	r3, [r4, #16]
 801198a:	b943      	cbnz	r3, 801199e <__swsetup_r+0xc6>
 801198c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011990:	d1ba      	bne.n	8011908 <__swsetup_r+0x30>
 8011992:	bd70      	pop	{r4, r5, r6, pc}
 8011994:	0781      	lsls	r1, r0, #30
 8011996:	bf58      	it	pl
 8011998:	6963      	ldrpl	r3, [r4, #20]
 801199a:	60a3      	str	r3, [r4, #8]
 801199c:	e7f4      	b.n	8011988 <__swsetup_r+0xb0>
 801199e:	2000      	movs	r0, #0
 80119a0:	e7f7      	b.n	8011992 <__swsetup_r+0xba>
 80119a2:	bf00      	nop
 80119a4:	2000002c 	.word	0x2000002c
 80119a8:	08014a24 	.word	0x08014a24
 80119ac:	08014a44 	.word	0x08014a44
 80119b0:	08014a04 	.word	0x08014a04

080119b4 <abort>:
 80119b4:	b508      	push	{r3, lr}
 80119b6:	2006      	movs	r0, #6
 80119b8:	f000 f994 	bl	8011ce4 <raise>
 80119bc:	2001      	movs	r0, #1
 80119be:	f7f0 fa23 	bl	8001e08 <_exit>
	...

080119c4 <_close_r>:
 80119c4:	b538      	push	{r3, r4, r5, lr}
 80119c6:	4d06      	ldr	r5, [pc, #24]	; (80119e0 <_close_r+0x1c>)
 80119c8:	2300      	movs	r3, #0
 80119ca:	4604      	mov	r4, r0
 80119cc:	4608      	mov	r0, r1
 80119ce:	602b      	str	r3, [r5, #0]
 80119d0:	f7f0 fa5d 	bl	8001e8e <_close>
 80119d4:	1c43      	adds	r3, r0, #1
 80119d6:	d102      	bne.n	80119de <_close_r+0x1a>
 80119d8:	682b      	ldr	r3, [r5, #0]
 80119da:	b103      	cbz	r3, 80119de <_close_r+0x1a>
 80119dc:	6023      	str	r3, [r4, #0]
 80119de:	bd38      	pop	{r3, r4, r5, pc}
 80119e0:	200080a8 	.word	0x200080a8

080119e4 <__sflush_r>:
 80119e4:	898a      	ldrh	r2, [r1, #12]
 80119e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119ea:	4605      	mov	r5, r0
 80119ec:	0710      	lsls	r0, r2, #28
 80119ee:	460c      	mov	r4, r1
 80119f0:	d458      	bmi.n	8011aa4 <__sflush_r+0xc0>
 80119f2:	684b      	ldr	r3, [r1, #4]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	dc05      	bgt.n	8011a04 <__sflush_r+0x20>
 80119f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	dc02      	bgt.n	8011a04 <__sflush_r+0x20>
 80119fe:	2000      	movs	r0, #0
 8011a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a06:	2e00      	cmp	r6, #0
 8011a08:	d0f9      	beq.n	80119fe <__sflush_r+0x1a>
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011a10:	682f      	ldr	r7, [r5, #0]
 8011a12:	602b      	str	r3, [r5, #0]
 8011a14:	d032      	beq.n	8011a7c <__sflush_r+0x98>
 8011a16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011a18:	89a3      	ldrh	r3, [r4, #12]
 8011a1a:	075a      	lsls	r2, r3, #29
 8011a1c:	d505      	bpl.n	8011a2a <__sflush_r+0x46>
 8011a1e:	6863      	ldr	r3, [r4, #4]
 8011a20:	1ac0      	subs	r0, r0, r3
 8011a22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011a24:	b10b      	cbz	r3, 8011a2a <__sflush_r+0x46>
 8011a26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011a28:	1ac0      	subs	r0, r0, r3
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	4602      	mov	r2, r0
 8011a2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a30:	6a21      	ldr	r1, [r4, #32]
 8011a32:	4628      	mov	r0, r5
 8011a34:	47b0      	blx	r6
 8011a36:	1c43      	adds	r3, r0, #1
 8011a38:	89a3      	ldrh	r3, [r4, #12]
 8011a3a:	d106      	bne.n	8011a4a <__sflush_r+0x66>
 8011a3c:	6829      	ldr	r1, [r5, #0]
 8011a3e:	291d      	cmp	r1, #29
 8011a40:	d82c      	bhi.n	8011a9c <__sflush_r+0xb8>
 8011a42:	4a2a      	ldr	r2, [pc, #168]	; (8011aec <__sflush_r+0x108>)
 8011a44:	40ca      	lsrs	r2, r1
 8011a46:	07d6      	lsls	r6, r2, #31
 8011a48:	d528      	bpl.n	8011a9c <__sflush_r+0xb8>
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	6062      	str	r2, [r4, #4]
 8011a4e:	04d9      	lsls	r1, r3, #19
 8011a50:	6922      	ldr	r2, [r4, #16]
 8011a52:	6022      	str	r2, [r4, #0]
 8011a54:	d504      	bpl.n	8011a60 <__sflush_r+0x7c>
 8011a56:	1c42      	adds	r2, r0, #1
 8011a58:	d101      	bne.n	8011a5e <__sflush_r+0x7a>
 8011a5a:	682b      	ldr	r3, [r5, #0]
 8011a5c:	b903      	cbnz	r3, 8011a60 <__sflush_r+0x7c>
 8011a5e:	6560      	str	r0, [r4, #84]	; 0x54
 8011a60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a62:	602f      	str	r7, [r5, #0]
 8011a64:	2900      	cmp	r1, #0
 8011a66:	d0ca      	beq.n	80119fe <__sflush_r+0x1a>
 8011a68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a6c:	4299      	cmp	r1, r3
 8011a6e:	d002      	beq.n	8011a76 <__sflush_r+0x92>
 8011a70:	4628      	mov	r0, r5
 8011a72:	f7ff faab 	bl	8010fcc <_free_r>
 8011a76:	2000      	movs	r0, #0
 8011a78:	6360      	str	r0, [r4, #52]	; 0x34
 8011a7a:	e7c1      	b.n	8011a00 <__sflush_r+0x1c>
 8011a7c:	6a21      	ldr	r1, [r4, #32]
 8011a7e:	2301      	movs	r3, #1
 8011a80:	4628      	mov	r0, r5
 8011a82:	47b0      	blx	r6
 8011a84:	1c41      	adds	r1, r0, #1
 8011a86:	d1c7      	bne.n	8011a18 <__sflush_r+0x34>
 8011a88:	682b      	ldr	r3, [r5, #0]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d0c4      	beq.n	8011a18 <__sflush_r+0x34>
 8011a8e:	2b1d      	cmp	r3, #29
 8011a90:	d001      	beq.n	8011a96 <__sflush_r+0xb2>
 8011a92:	2b16      	cmp	r3, #22
 8011a94:	d101      	bne.n	8011a9a <__sflush_r+0xb6>
 8011a96:	602f      	str	r7, [r5, #0]
 8011a98:	e7b1      	b.n	80119fe <__sflush_r+0x1a>
 8011a9a:	89a3      	ldrh	r3, [r4, #12]
 8011a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011aa0:	81a3      	strh	r3, [r4, #12]
 8011aa2:	e7ad      	b.n	8011a00 <__sflush_r+0x1c>
 8011aa4:	690f      	ldr	r7, [r1, #16]
 8011aa6:	2f00      	cmp	r7, #0
 8011aa8:	d0a9      	beq.n	80119fe <__sflush_r+0x1a>
 8011aaa:	0793      	lsls	r3, r2, #30
 8011aac:	680e      	ldr	r6, [r1, #0]
 8011aae:	bf08      	it	eq
 8011ab0:	694b      	ldreq	r3, [r1, #20]
 8011ab2:	600f      	str	r7, [r1, #0]
 8011ab4:	bf18      	it	ne
 8011ab6:	2300      	movne	r3, #0
 8011ab8:	eba6 0807 	sub.w	r8, r6, r7
 8011abc:	608b      	str	r3, [r1, #8]
 8011abe:	f1b8 0f00 	cmp.w	r8, #0
 8011ac2:	dd9c      	ble.n	80119fe <__sflush_r+0x1a>
 8011ac4:	6a21      	ldr	r1, [r4, #32]
 8011ac6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011ac8:	4643      	mov	r3, r8
 8011aca:	463a      	mov	r2, r7
 8011acc:	4628      	mov	r0, r5
 8011ace:	47b0      	blx	r6
 8011ad0:	2800      	cmp	r0, #0
 8011ad2:	dc06      	bgt.n	8011ae2 <__sflush_r+0xfe>
 8011ad4:	89a3      	ldrh	r3, [r4, #12]
 8011ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ada:	81a3      	strh	r3, [r4, #12]
 8011adc:	f04f 30ff 	mov.w	r0, #4294967295
 8011ae0:	e78e      	b.n	8011a00 <__sflush_r+0x1c>
 8011ae2:	4407      	add	r7, r0
 8011ae4:	eba8 0800 	sub.w	r8, r8, r0
 8011ae8:	e7e9      	b.n	8011abe <__sflush_r+0xda>
 8011aea:	bf00      	nop
 8011aec:	20400001 	.word	0x20400001

08011af0 <_fflush_r>:
 8011af0:	b538      	push	{r3, r4, r5, lr}
 8011af2:	690b      	ldr	r3, [r1, #16]
 8011af4:	4605      	mov	r5, r0
 8011af6:	460c      	mov	r4, r1
 8011af8:	b913      	cbnz	r3, 8011b00 <_fflush_r+0x10>
 8011afa:	2500      	movs	r5, #0
 8011afc:	4628      	mov	r0, r5
 8011afe:	bd38      	pop	{r3, r4, r5, pc}
 8011b00:	b118      	cbz	r0, 8011b0a <_fflush_r+0x1a>
 8011b02:	6983      	ldr	r3, [r0, #24]
 8011b04:	b90b      	cbnz	r3, 8011b0a <_fflush_r+0x1a>
 8011b06:	f7ff f9a7 	bl	8010e58 <__sinit>
 8011b0a:	4b14      	ldr	r3, [pc, #80]	; (8011b5c <_fflush_r+0x6c>)
 8011b0c:	429c      	cmp	r4, r3
 8011b0e:	d11b      	bne.n	8011b48 <_fflush_r+0x58>
 8011b10:	686c      	ldr	r4, [r5, #4]
 8011b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d0ef      	beq.n	8011afa <_fflush_r+0xa>
 8011b1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011b1c:	07d0      	lsls	r0, r2, #31
 8011b1e:	d404      	bmi.n	8011b2a <_fflush_r+0x3a>
 8011b20:	0599      	lsls	r1, r3, #22
 8011b22:	d402      	bmi.n	8011b2a <_fflush_r+0x3a>
 8011b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b26:	f7ff fa47 	bl	8010fb8 <__retarget_lock_acquire_recursive>
 8011b2a:	4628      	mov	r0, r5
 8011b2c:	4621      	mov	r1, r4
 8011b2e:	f7ff ff59 	bl	80119e4 <__sflush_r>
 8011b32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b34:	07da      	lsls	r2, r3, #31
 8011b36:	4605      	mov	r5, r0
 8011b38:	d4e0      	bmi.n	8011afc <_fflush_r+0xc>
 8011b3a:	89a3      	ldrh	r3, [r4, #12]
 8011b3c:	059b      	lsls	r3, r3, #22
 8011b3e:	d4dd      	bmi.n	8011afc <_fflush_r+0xc>
 8011b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b42:	f7ff fa3a 	bl	8010fba <__retarget_lock_release_recursive>
 8011b46:	e7d9      	b.n	8011afc <_fflush_r+0xc>
 8011b48:	4b05      	ldr	r3, [pc, #20]	; (8011b60 <_fflush_r+0x70>)
 8011b4a:	429c      	cmp	r4, r3
 8011b4c:	d101      	bne.n	8011b52 <_fflush_r+0x62>
 8011b4e:	68ac      	ldr	r4, [r5, #8]
 8011b50:	e7df      	b.n	8011b12 <_fflush_r+0x22>
 8011b52:	4b04      	ldr	r3, [pc, #16]	; (8011b64 <_fflush_r+0x74>)
 8011b54:	429c      	cmp	r4, r3
 8011b56:	bf08      	it	eq
 8011b58:	68ec      	ldreq	r4, [r5, #12]
 8011b5a:	e7da      	b.n	8011b12 <_fflush_r+0x22>
 8011b5c:	08014a24 	.word	0x08014a24
 8011b60:	08014a44 	.word	0x08014a44
 8011b64:	08014a04 	.word	0x08014a04

08011b68 <_lseek_r>:
 8011b68:	b538      	push	{r3, r4, r5, lr}
 8011b6a:	4d07      	ldr	r5, [pc, #28]	; (8011b88 <_lseek_r+0x20>)
 8011b6c:	4604      	mov	r4, r0
 8011b6e:	4608      	mov	r0, r1
 8011b70:	4611      	mov	r1, r2
 8011b72:	2200      	movs	r2, #0
 8011b74:	602a      	str	r2, [r5, #0]
 8011b76:	461a      	mov	r2, r3
 8011b78:	f7f0 f9b0 	bl	8001edc <_lseek>
 8011b7c:	1c43      	adds	r3, r0, #1
 8011b7e:	d102      	bne.n	8011b86 <_lseek_r+0x1e>
 8011b80:	682b      	ldr	r3, [r5, #0]
 8011b82:	b103      	cbz	r3, 8011b86 <_lseek_r+0x1e>
 8011b84:	6023      	str	r3, [r4, #0]
 8011b86:	bd38      	pop	{r3, r4, r5, pc}
 8011b88:	200080a8 	.word	0x200080a8

08011b8c <__swhatbuf_r>:
 8011b8c:	b570      	push	{r4, r5, r6, lr}
 8011b8e:	460e      	mov	r6, r1
 8011b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b94:	2900      	cmp	r1, #0
 8011b96:	b096      	sub	sp, #88	; 0x58
 8011b98:	4614      	mov	r4, r2
 8011b9a:	461d      	mov	r5, r3
 8011b9c:	da08      	bge.n	8011bb0 <__swhatbuf_r+0x24>
 8011b9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	602a      	str	r2, [r5, #0]
 8011ba6:	061a      	lsls	r2, r3, #24
 8011ba8:	d410      	bmi.n	8011bcc <__swhatbuf_r+0x40>
 8011baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011bae:	e00e      	b.n	8011bce <__swhatbuf_r+0x42>
 8011bb0:	466a      	mov	r2, sp
 8011bb2:	f000 f8b3 	bl	8011d1c <_fstat_r>
 8011bb6:	2800      	cmp	r0, #0
 8011bb8:	dbf1      	blt.n	8011b9e <__swhatbuf_r+0x12>
 8011bba:	9a01      	ldr	r2, [sp, #4]
 8011bbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011bc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011bc4:	425a      	negs	r2, r3
 8011bc6:	415a      	adcs	r2, r3
 8011bc8:	602a      	str	r2, [r5, #0]
 8011bca:	e7ee      	b.n	8011baa <__swhatbuf_r+0x1e>
 8011bcc:	2340      	movs	r3, #64	; 0x40
 8011bce:	2000      	movs	r0, #0
 8011bd0:	6023      	str	r3, [r4, #0]
 8011bd2:	b016      	add	sp, #88	; 0x58
 8011bd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08011bd8 <__smakebuf_r>:
 8011bd8:	898b      	ldrh	r3, [r1, #12]
 8011bda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011bdc:	079d      	lsls	r5, r3, #30
 8011bde:	4606      	mov	r6, r0
 8011be0:	460c      	mov	r4, r1
 8011be2:	d507      	bpl.n	8011bf4 <__smakebuf_r+0x1c>
 8011be4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011be8:	6023      	str	r3, [r4, #0]
 8011bea:	6123      	str	r3, [r4, #16]
 8011bec:	2301      	movs	r3, #1
 8011bee:	6163      	str	r3, [r4, #20]
 8011bf0:	b002      	add	sp, #8
 8011bf2:	bd70      	pop	{r4, r5, r6, pc}
 8011bf4:	ab01      	add	r3, sp, #4
 8011bf6:	466a      	mov	r2, sp
 8011bf8:	f7ff ffc8 	bl	8011b8c <__swhatbuf_r>
 8011bfc:	9900      	ldr	r1, [sp, #0]
 8011bfe:	4605      	mov	r5, r0
 8011c00:	4630      	mov	r0, r6
 8011c02:	f7ff fa4f 	bl	80110a4 <_malloc_r>
 8011c06:	b948      	cbnz	r0, 8011c1c <__smakebuf_r+0x44>
 8011c08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c0c:	059a      	lsls	r2, r3, #22
 8011c0e:	d4ef      	bmi.n	8011bf0 <__smakebuf_r+0x18>
 8011c10:	f023 0303 	bic.w	r3, r3, #3
 8011c14:	f043 0302 	orr.w	r3, r3, #2
 8011c18:	81a3      	strh	r3, [r4, #12]
 8011c1a:	e7e3      	b.n	8011be4 <__smakebuf_r+0xc>
 8011c1c:	4b0d      	ldr	r3, [pc, #52]	; (8011c54 <__smakebuf_r+0x7c>)
 8011c1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011c20:	89a3      	ldrh	r3, [r4, #12]
 8011c22:	6020      	str	r0, [r4, #0]
 8011c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c28:	81a3      	strh	r3, [r4, #12]
 8011c2a:	9b00      	ldr	r3, [sp, #0]
 8011c2c:	6163      	str	r3, [r4, #20]
 8011c2e:	9b01      	ldr	r3, [sp, #4]
 8011c30:	6120      	str	r0, [r4, #16]
 8011c32:	b15b      	cbz	r3, 8011c4c <__smakebuf_r+0x74>
 8011c34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c38:	4630      	mov	r0, r6
 8011c3a:	f000 f881 	bl	8011d40 <_isatty_r>
 8011c3e:	b128      	cbz	r0, 8011c4c <__smakebuf_r+0x74>
 8011c40:	89a3      	ldrh	r3, [r4, #12]
 8011c42:	f023 0303 	bic.w	r3, r3, #3
 8011c46:	f043 0301 	orr.w	r3, r3, #1
 8011c4a:	81a3      	strh	r3, [r4, #12]
 8011c4c:	89a0      	ldrh	r0, [r4, #12]
 8011c4e:	4305      	orrs	r5, r0
 8011c50:	81a5      	strh	r5, [r4, #12]
 8011c52:	e7cd      	b.n	8011bf0 <__smakebuf_r+0x18>
 8011c54:	08010df1 	.word	0x08010df1

08011c58 <__malloc_lock>:
 8011c58:	4801      	ldr	r0, [pc, #4]	; (8011c60 <__malloc_lock+0x8>)
 8011c5a:	f7ff b9ad 	b.w	8010fb8 <__retarget_lock_acquire_recursive>
 8011c5e:	bf00      	nop
 8011c60:	200080ac 	.word	0x200080ac

08011c64 <__malloc_unlock>:
 8011c64:	4801      	ldr	r0, [pc, #4]	; (8011c6c <__malloc_unlock+0x8>)
 8011c66:	f7ff b9a8 	b.w	8010fba <__retarget_lock_release_recursive>
 8011c6a:	bf00      	nop
 8011c6c:	200080ac 	.word	0x200080ac

08011c70 <_read_r>:
 8011c70:	b538      	push	{r3, r4, r5, lr}
 8011c72:	4d07      	ldr	r5, [pc, #28]	; (8011c90 <_read_r+0x20>)
 8011c74:	4604      	mov	r4, r0
 8011c76:	4608      	mov	r0, r1
 8011c78:	4611      	mov	r1, r2
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	602a      	str	r2, [r5, #0]
 8011c7e:	461a      	mov	r2, r3
 8011c80:	f7f0 f8cc 	bl	8001e1c <_read>
 8011c84:	1c43      	adds	r3, r0, #1
 8011c86:	d102      	bne.n	8011c8e <_read_r+0x1e>
 8011c88:	682b      	ldr	r3, [r5, #0]
 8011c8a:	b103      	cbz	r3, 8011c8e <_read_r+0x1e>
 8011c8c:	6023      	str	r3, [r4, #0]
 8011c8e:	bd38      	pop	{r3, r4, r5, pc}
 8011c90:	200080a8 	.word	0x200080a8

08011c94 <_raise_r>:
 8011c94:	291f      	cmp	r1, #31
 8011c96:	b538      	push	{r3, r4, r5, lr}
 8011c98:	4604      	mov	r4, r0
 8011c9a:	460d      	mov	r5, r1
 8011c9c:	d904      	bls.n	8011ca8 <_raise_r+0x14>
 8011c9e:	2316      	movs	r3, #22
 8011ca0:	6003      	str	r3, [r0, #0]
 8011ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ca6:	bd38      	pop	{r3, r4, r5, pc}
 8011ca8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011caa:	b112      	cbz	r2, 8011cb2 <_raise_r+0x1e>
 8011cac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011cb0:	b94b      	cbnz	r3, 8011cc6 <_raise_r+0x32>
 8011cb2:	4620      	mov	r0, r4
 8011cb4:	f000 f830 	bl	8011d18 <_getpid_r>
 8011cb8:	462a      	mov	r2, r5
 8011cba:	4601      	mov	r1, r0
 8011cbc:	4620      	mov	r0, r4
 8011cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011cc2:	f000 b817 	b.w	8011cf4 <_kill_r>
 8011cc6:	2b01      	cmp	r3, #1
 8011cc8:	d00a      	beq.n	8011ce0 <_raise_r+0x4c>
 8011cca:	1c59      	adds	r1, r3, #1
 8011ccc:	d103      	bne.n	8011cd6 <_raise_r+0x42>
 8011cce:	2316      	movs	r3, #22
 8011cd0:	6003      	str	r3, [r0, #0]
 8011cd2:	2001      	movs	r0, #1
 8011cd4:	e7e7      	b.n	8011ca6 <_raise_r+0x12>
 8011cd6:	2400      	movs	r4, #0
 8011cd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011cdc:	4628      	mov	r0, r5
 8011cde:	4798      	blx	r3
 8011ce0:	2000      	movs	r0, #0
 8011ce2:	e7e0      	b.n	8011ca6 <_raise_r+0x12>

08011ce4 <raise>:
 8011ce4:	4b02      	ldr	r3, [pc, #8]	; (8011cf0 <raise+0xc>)
 8011ce6:	4601      	mov	r1, r0
 8011ce8:	6818      	ldr	r0, [r3, #0]
 8011cea:	f7ff bfd3 	b.w	8011c94 <_raise_r>
 8011cee:	bf00      	nop
 8011cf0:	2000002c 	.word	0x2000002c

08011cf4 <_kill_r>:
 8011cf4:	b538      	push	{r3, r4, r5, lr}
 8011cf6:	4d07      	ldr	r5, [pc, #28]	; (8011d14 <_kill_r+0x20>)
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	4604      	mov	r4, r0
 8011cfc:	4608      	mov	r0, r1
 8011cfe:	4611      	mov	r1, r2
 8011d00:	602b      	str	r3, [r5, #0]
 8011d02:	f7f0 f86f 	bl	8001de4 <_kill>
 8011d06:	1c43      	adds	r3, r0, #1
 8011d08:	d102      	bne.n	8011d10 <_kill_r+0x1c>
 8011d0a:	682b      	ldr	r3, [r5, #0]
 8011d0c:	b103      	cbz	r3, 8011d10 <_kill_r+0x1c>
 8011d0e:	6023      	str	r3, [r4, #0]
 8011d10:	bd38      	pop	{r3, r4, r5, pc}
 8011d12:	bf00      	nop
 8011d14:	200080a8 	.word	0x200080a8

08011d18 <_getpid_r>:
 8011d18:	f7f0 b85c 	b.w	8001dd4 <_getpid>

08011d1c <_fstat_r>:
 8011d1c:	b538      	push	{r3, r4, r5, lr}
 8011d1e:	4d07      	ldr	r5, [pc, #28]	; (8011d3c <_fstat_r+0x20>)
 8011d20:	2300      	movs	r3, #0
 8011d22:	4604      	mov	r4, r0
 8011d24:	4608      	mov	r0, r1
 8011d26:	4611      	mov	r1, r2
 8011d28:	602b      	str	r3, [r5, #0]
 8011d2a:	f7f0 f8bc 	bl	8001ea6 <_fstat>
 8011d2e:	1c43      	adds	r3, r0, #1
 8011d30:	d102      	bne.n	8011d38 <_fstat_r+0x1c>
 8011d32:	682b      	ldr	r3, [r5, #0]
 8011d34:	b103      	cbz	r3, 8011d38 <_fstat_r+0x1c>
 8011d36:	6023      	str	r3, [r4, #0]
 8011d38:	bd38      	pop	{r3, r4, r5, pc}
 8011d3a:	bf00      	nop
 8011d3c:	200080a8 	.word	0x200080a8

08011d40 <_isatty_r>:
 8011d40:	b538      	push	{r3, r4, r5, lr}
 8011d42:	4d06      	ldr	r5, [pc, #24]	; (8011d5c <_isatty_r+0x1c>)
 8011d44:	2300      	movs	r3, #0
 8011d46:	4604      	mov	r4, r0
 8011d48:	4608      	mov	r0, r1
 8011d4a:	602b      	str	r3, [r5, #0]
 8011d4c:	f7f0 f8bb 	bl	8001ec6 <_isatty>
 8011d50:	1c43      	adds	r3, r0, #1
 8011d52:	d102      	bne.n	8011d5a <_isatty_r+0x1a>
 8011d54:	682b      	ldr	r3, [r5, #0]
 8011d56:	b103      	cbz	r3, 8011d5a <_isatty_r+0x1a>
 8011d58:	6023      	str	r3, [r4, #0]
 8011d5a:	bd38      	pop	{r3, r4, r5, pc}
 8011d5c:	200080a8 	.word	0x200080a8

08011d60 <_init>:
 8011d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d62:	bf00      	nop
 8011d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d66:	bc08      	pop	{r3}
 8011d68:	469e      	mov	lr, r3
 8011d6a:	4770      	bx	lr

08011d6c <_fini>:
 8011d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d6e:	bf00      	nop
 8011d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d72:	bc08      	pop	{r3}
 8011d74:	469e      	mov	lr, r3
 8011d76:	4770      	bx	lr
